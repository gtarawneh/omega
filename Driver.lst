;  ASM code generated by mikroVirtualMachine for PIC - V. 8.0.0.0
;  Date/Time: 2/18/2009 11:41:32 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$158A			BSF	PCLATH, 3
$0001	$2EAD			GOTO	_main
$036D	$	_WriteVirtualPorts:
;pins.h,39 :: 		void WriteVirtualPorts()
;pins.h,41 :: 		PORTA = PORTA_V;
$036D	$1303			BCF	STATUS, RP1
$036E	$1683			BSF	STATUS, RP0
$036F	$0820			MOVF	_PORTA_V, 0
$0370	$1283			BCF	STATUS, RP0
$0371	$0085			MOVWF	PORTA
;pins.h,43 :: 		PORTE = PORTE_V;
$0372	$1683			BSF	STATUS, RP0
$0373	$0821			MOVF	_PORTE_V, 0
$0374	$1283			BCF	STATUS, RP0
$0375	$0089			MOVWF	PORTE
;pins.h,44 :: 		}
$0376	$0008			RETURN
$0377	$	_Trace:
;go.h,10 :: 		void Trace()
;go.h,12 :: 		trace_counter++;
$0377	$1303			BCF	STATUS, RP1
$0378	$1683			BSF	STATUS, RP0
$0379	$0AA2			INCF	_trace_counter, 1
$037A	$1903			BTFSC	STATUS, Z
$037B	$0AA3			INCF	_trace_counter+1, 1
$037C	$1903			BTFSC	STATUS, Z
$037D	$0AA4			INCF	_trace_counter+2, 1
$037E	$1903			BTFSC	STATUS, Z
$037F	$0AA5			INCF	_trace_counter+3, 1
;go.h,14 :: 		if (trace_counter >= trace_skip)
$0380	$0829			MOVF	_trace_skip+3, 0
$0381	$0225			SUBWF	_trace_counter+3, 0
$0382	$1D03			BTFSS	STATUS, Z
$0383	$2B8E			GOTO	L_Trace_206
$0384	$0828			MOVF	_trace_skip+2, 0
$0385	$0224			SUBWF	_trace_counter+2, 0
$0386	$1D03			BTFSS	STATUS, Z
$0387	$2B8E			GOTO	L_Trace_206
$0388	$0827			MOVF	_trace_skip+1, 0
$0389	$0223			SUBWF	_trace_counter+1, 0
$038A	$1D03			BTFSS	STATUS, Z
$038B	$2B8E			GOTO	L_Trace_206
$038C	$0826			MOVF	_trace_skip, 0
$038D	$0222			SUBWF	_trace_counter, 0
$038E	$	L_Trace_206:
$038E	$1C03			BTFSS	STATUS, C
$038F	$2B96			GOTO	L_Trace_44
;go.h,16 :: 		trace_flag = 1;
$0390	$3001			MOVLW	1
$0391	$00AA			MOVWF	_trace_flag
;go.h,18 :: 		trace_counter = 0;
$0392	$01A2			CLRF	_trace_counter
$0393	$01A3			CLRF	_trace_counter+1
$0394	$01A4			CLRF	_trace_counter+2
$0395	$01A5			CLRF	_trace_counter+3
;go.h,19 :: 		}
$0396	$	L_Trace_44:
;go.h,20 :: 		}
$0396	$0008			RETURN
$0397	$	_ProcessStop:
;go.h,5 :: 		void ProcessStop()
;go.h,7 :: 		T2CON.TMR2ON = 0; // Disable Timer2
$0397	$1303			BCF	STATUS, RP1
$0398	$1283			BCF	STATUS, RP0
$0399	$1112			BCF	T2CON, 2
;go.h,8 :: 		}
$039A	$0008			RETURN
$0004	$	_interrupt:
$0004	$00FF			MOVWF	STACK_15
$0005	$0E03			SWAPF	STATUS, 0
$0006	$0183			CLRF	STATUS
$0007	$1703			BSF	STATUS, RP1
$0008	$00CE			MOVWF	?saveSTATUS
$0009	$0804			MOVF	FSR, 0
$000A	$00CD			MOVWF	?saveFSR
$000B	$080A			MOVF	PCLATH, 0
$000C	$00CF			MOVWF	?savePCLATH
$000D	$018A			CLRF	PCLATH
$000E	$0871			MOVF	STACK_1, 0
$000F	$00E0			MOVWF	STSAVED_1
$0010	$0870			MOVF	STACK_0, 0
$0011	$00DF			MOVWF	STSAVED_0
;go.h,22 :: 		void interrupt()
;go.h,24 :: 		short axis1_job_over = 0;
$0012	$01CA			CLRF	interrupt_axis1_job_over_L0, 1
;go.h,26 :: 		short axis2_job_over = 0;
$0013	$01CB			CLRF	interrupt_axis2_job_over_L0, 1
;go.h,28 :: 		short axis3_job_over = 0;
$0014	$01CC			CLRF	interrupt_axis3_job_over_L0, 1
;go.h,30 :: 		if (SWITCH1) switch1_closed = 1;
$0015	$1303			BCF	STATUS, RP1
$0016	$1C08			BTFSS	PORTD, 0
$0017	$281B			GOTO	L_interrupt_45
$0018	$3001			MOVLW	1
$0019	$1683			BSF	STATUS, RP0
$001A	$00AB			MOVWF	_switch1_closed
$001B	$	L_interrupt_45:
;go.h,32 :: 		if (SWITCH2) switch2_closed = 1;
$001B	$1283			BCF	STATUS, RP0
$001C	$1C88			BTFSS	PORTD, 1
$001D	$2821			GOTO	L_interrupt_46
$001E	$3001			MOVLW	1
$001F	$1683			BSF	STATUS, RP0
$0020	$00AC			MOVWF	_switch2_closed
$0021	$	L_interrupt_46:
;go.h,34 :: 		axis1_counter++;
$0021	$1303			BCF	STATUS, RP1
$0022	$1683			BSF	STATUS, RP0
$0023	$0AAD			INCF	_axis1_counter, 1
$0024	$1903			BTFSC	STATUS, Z
$0025	$0AAE			INCF	_axis1_counter+1, 1
$0026	$1903			BTFSC	STATUS, Z
$0027	$0AAF			INCF	_axis1_counter+2, 1
$0028	$1903			BTFSC	STATUS, Z
$0029	$0AB0			INCF	_axis1_counter+3, 1
;go.h,36 :: 		axis2_counter++;
$002A	$0AB1			INCF	_axis2_counter, 1
$002B	$1903			BTFSC	STATUS, Z
$002C	$0AB2			INCF	_axis2_counter+1, 1
$002D	$1903			BTFSC	STATUS, Z
$002E	$0AB3			INCF	_axis2_counter+2, 1
$002F	$1903			BTFSC	STATUS, Z
$0030	$0AB4			INCF	_axis2_counter+3, 1
;go.h,38 :: 		axis3_counter++;
$0031	$0AB5			INCF	_axis3_counter, 1
$0032	$1903			BTFSC	STATUS, Z
$0033	$0AB6			INCF	_axis3_counter+1, 1
$0034	$1903			BTFSC	STATUS, Z
$0035	$0AB7			INCF	_axis3_counter+2, 1
$0036	$1903			BTFSC	STATUS, Z
$0037	$0AB8			INCF	_axis3_counter+3, 1
;go.h,40 :: 		axis1_warmup_counter++;
$0038	$0AB9			INCF	_axis1_warmup_counter, 1
$0039	$1903			BTFSC	STATUS, Z
$003A	$0ABA			INCF	_axis1_warmup_counter+1, 1
$003B	$1903			BTFSC	STATUS, Z
$003C	$0ABB			INCF	_axis1_warmup_counter+2, 1
$003D	$1903			BTFSC	STATUS, Z
$003E	$0ABC			INCF	_axis1_warmup_counter+3, 1
;go.h,42 :: 		axis2_warmup_counter++;
$003F	$0ABD			INCF	_axis2_warmup_counter, 1
$0040	$1903			BTFSC	STATUS, Z
$0041	$0ABE			INCF	_axis2_warmup_counter+1, 1
$0042	$1903			BTFSC	STATUS, Z
$0043	$0ABF			INCF	_axis2_warmup_counter+2, 1
$0044	$1903			BTFSC	STATUS, Z
$0045	$0AC0			INCF	_axis2_warmup_counter+3, 1
;go.h,44 :: 		axis3_warmup_counter++;
$0046	$0AC1			INCF	_axis3_warmup_counter, 1
$0047	$1903			BTFSC	STATUS, Z
$0048	$0AC2			INCF	_axis3_warmup_counter+1, 1
$0049	$1903			BTFSC	STATUS, Z
$004A	$0AC3			INCF	_axis3_warmup_counter+2, 1
$004B	$1903			BTFSC	STATUS, Z
$004C	$0AC4			INCF	_axis3_warmup_counter+3, 1
;go.h,48 :: 		if (!AXIS1_ENABLE_BIT) axis1_job_over = 1;
$004D	$18A0			BTFSC	_PORTA_V, 1
$004E	$2853			GOTO	L_interrupt_47
$004F	$3001			MOVLW	1
$0050	$1703			BSF	STATUS, RP1
$0051	$1283			BCF	STATUS, RP0
$0052	$00CA			MOVWF	interrupt_axis1_job_over_L0
$0053	$	L_interrupt_47:
;go.h,50 :: 		if (!axis1_bind_switch1 && !axis1_bind_switch2 && !axis1_steps) axis1_job_over = 1;
$0053	$1303			BCF	STATUS, RP1
$0054	$1683			BSF	STATUS, RP0
$0055	$0845			MOVF	_axis1_bind_switch1, 0
$0056	$1D03			BTFSS	STATUS, Z
$0057	$2865			GOTO	L_interrupt_50
$0058	$0846			MOVF	_axis1_bind_switch2, 0
$0059	$1D03			BTFSS	STATUS, Z
$005A	$2865			GOTO	L_interrupt_50
$005B	$0847			MOVF	_axis1_steps, 0
$005C	$0448			IORWF	_axis1_steps+1, 0
$005D	$0449			IORWF	_axis1_steps+2, 0
$005E	$044A			IORWF	_axis1_steps+3, 0
$005F	$1D03			BTFSS	STATUS, Z
$0060	$2865			GOTO	L_interrupt_50
$0061	$	L382_ex_L_interrupt_50:
$0061	$3001			MOVLW	1
$0062	$1703			BSF	STATUS, RP1
$0063	$1283			BCF	STATUS, RP0
$0064	$00CA			MOVWF	interrupt_axis1_job_over_L0
$0065	$	L_interrupt_50:
;go.h,52 :: 		if (!axis1_bind_switch1 && !axis1_bind_switch2 && axis1_steps_counter >= axis1_steps) axis1_job_over = 1;
$0065	$1303			BCF	STATUS, RP1
$0066	$1683			BSF	STATUS, RP0
$0067	$0845			MOVF	_axis1_bind_switch1, 0
$0068	$1D03			BTFSS	STATUS, Z
$0069	$2881			GOTO	L_interrupt_53
$006A	$0846			MOVF	_axis1_bind_switch2, 0
$006B	$1D03			BTFSS	STATUS, Z
$006C	$2881			GOTO	L_interrupt_53
$006D	$084A			MOVF	_axis1_steps+3, 0
$006E	$024E			SUBWF	_axis1_steps_counter+3, 0
$006F	$1D03			BTFSS	STATUS, Z
$0070	$287B			GOTO	L_interrupt_207
$0071	$0849			MOVF	_axis1_steps+2, 0
$0072	$024D			SUBWF	_axis1_steps_counter+2, 0
$0073	$1D03			BTFSS	STATUS, Z
$0074	$287B			GOTO	L_interrupt_207
$0075	$0848			MOVF	_axis1_steps+1, 0
$0076	$024C			SUBWF	_axis1_steps_counter+1, 0
$0077	$1D03			BTFSS	STATUS, Z
$0078	$287B			GOTO	L_interrupt_207
$0079	$0847			MOVF	_axis1_steps, 0
$007A	$024B			SUBWF	_axis1_steps_counter, 0
$007B	$	L_interrupt_207:
$007B	$1C03			BTFSS	STATUS, C
$007C	$2881			GOTO	L_interrupt_53
$007D	$	L397_ex_L_interrupt_53:
$007D	$3001			MOVLW	1
$007E	$1703			BSF	STATUS, RP1
$007F	$1283			BCF	STATUS, RP0
$0080	$00CA			MOVWF	interrupt_axis1_job_over_L0
$0081	$	L_interrupt_53:
;go.h,54 :: 		if (axis1_bind_switch1 && switch1_closed == 1) axis1_job_over = 1;
$0081	$1303			BCF	STATUS, RP1
$0082	$1683			BSF	STATUS, RP0
$0083	$0845			MOVF	_axis1_bind_switch1, 0
$0084	$1903			BTFSC	STATUS, Z
$0085	$288E			GOTO	L_interrupt_56
$0086	$082B			MOVF	_switch1_closed, 0
$0087	$3A01			XORLW	1
$0088	$1D03			BTFSS	STATUS, Z
$0089	$288E			GOTO	L_interrupt_56
$008A	$	L409_ex_L_interrupt_56:
$008A	$3001			MOVLW	1
$008B	$1703			BSF	STATUS, RP1
$008C	$1283			BCF	STATUS, RP0
$008D	$00CA			MOVWF	interrupt_axis1_job_over_L0
$008E	$	L_interrupt_56:
;go.h,56 :: 		if (axis1_bind_switch2 && switch2_closed == 1) axis1_job_over = 1;
$008E	$1303			BCF	STATUS, RP1
$008F	$1683			BSF	STATUS, RP0
$0090	$0846			MOVF	_axis1_bind_switch2, 0
$0091	$1903			BTFSC	STATUS, Z
$0092	$289B			GOTO	L_interrupt_59
$0093	$082C			MOVF	_switch2_closed, 0
$0094	$3A01			XORLW	1
$0095	$1D03			BTFSS	STATUS, Z
$0096	$289B			GOTO	L_interrupt_59
$0097	$	L421_ex_L_interrupt_59:
$0097	$3001			MOVLW	1
$0098	$1703			BSF	STATUS, RP1
$0099	$1283			BCF	STATUS, RP0
$009A	$00CA			MOVWF	interrupt_axis1_job_over_L0
$009B	$	L_interrupt_59:
;go.h,60 :: 		if (!AXIS2_ENABLE_BIT) axis2_job_over = 1;
$009B	$1303			BCF	STATUS, RP1
$009C	$1683			BSF	STATUS, RP0
$009D	$18A1			BTFSC	_PORTE_V, 1
$009E	$28A3			GOTO	L_interrupt_60
$009F	$3001			MOVLW	1
$00A0	$1703			BSF	STATUS, RP1
$00A1	$1283			BCF	STATUS, RP0
$00A2	$00CB			MOVWF	interrupt_axis2_job_over_L0
$00A3	$	L_interrupt_60:
;go.h,62 :: 		if (!axis2_bind_switch1 && !axis2_bind_switch2 && !axis2_steps) axis2_job_over = 1;
$00A3	$1303			BCF	STATUS, RP1
$00A4	$1683			BSF	STATUS, RP0
$00A5	$084F			MOVF	_axis2_bind_switch1, 0
$00A6	$1D03			BTFSS	STATUS, Z
$00A7	$28B5			GOTO	L_interrupt_63
$00A8	$0850			MOVF	_axis2_bind_switch2, 0
$00A9	$1D03			BTFSS	STATUS, Z
$00AA	$28B5			GOTO	L_interrupt_63
$00AB	$0851			MOVF	_axis2_steps, 0
$00AC	$0452			IORWF	_axis2_steps+1, 0
$00AD	$0453			IORWF	_axis2_steps+2, 0
$00AE	$0454			IORWF	_axis2_steps+3, 0
$00AF	$1D03			BTFSS	STATUS, Z
$00B0	$28B5			GOTO	L_interrupt_63
$00B1	$	L440_ex_L_interrupt_63:
$00B1	$3001			MOVLW	1
$00B2	$1703			BSF	STATUS, RP1
$00B3	$1283			BCF	STATUS, RP0
$00B4	$00CB			MOVWF	interrupt_axis2_job_over_L0
$00B5	$	L_interrupt_63:
;go.h,64 :: 		if (!axis2_bind_switch1 && !axis2_bind_switch2 && axis2_steps_counter >= axis2_steps) axis2_job_over = 1;
$00B5	$1303			BCF	STATUS, RP1
$00B6	$1683			BSF	STATUS, RP0
$00B7	$084F			MOVF	_axis2_bind_switch1, 0
$00B8	$1D03			BTFSS	STATUS, Z
$00B9	$28D1			GOTO	L_interrupt_66
$00BA	$0850			MOVF	_axis2_bind_switch2, 0
$00BB	$1D03			BTFSS	STATUS, Z
$00BC	$28D1			GOTO	L_interrupt_66
$00BD	$0854			MOVF	_axis2_steps+3, 0
$00BE	$0258			SUBWF	_axis2_steps_counter+3, 0
$00BF	$1D03			BTFSS	STATUS, Z
$00C0	$28CB			GOTO	L_interrupt_208
$00C1	$0853			MOVF	_axis2_steps+2, 0
$00C2	$0257			SUBWF	_axis2_steps_counter+2, 0
$00C3	$1D03			BTFSS	STATUS, Z
$00C4	$28CB			GOTO	L_interrupt_208
$00C5	$0852			MOVF	_axis2_steps+1, 0
$00C6	$0256			SUBWF	_axis2_steps_counter+1, 0
$00C7	$1D03			BTFSS	STATUS, Z
$00C8	$28CB			GOTO	L_interrupt_208
$00C9	$0851			MOVF	_axis2_steps, 0
$00CA	$0255			SUBWF	_axis2_steps_counter, 0
$00CB	$	L_interrupt_208:
$00CB	$1C03			BTFSS	STATUS, C
$00CC	$28D1			GOTO	L_interrupt_66
$00CD	$	L455_ex_L_interrupt_66:
$00CD	$3001			MOVLW	1
$00CE	$1703			BSF	STATUS, RP1
$00CF	$1283			BCF	STATUS, RP0
$00D0	$00CB			MOVWF	interrupt_axis2_job_over_L0
$00D1	$	L_interrupt_66:
;go.h,66 :: 		if (axis2_bind_switch1 && switch1_closed == 1) axis2_job_over = 1;
$00D1	$1303			BCF	STATUS, RP1
$00D2	$1683			BSF	STATUS, RP0
$00D3	$084F			MOVF	_axis2_bind_switch1, 0
$00D4	$1903			BTFSC	STATUS, Z
$00D5	$28DE			GOTO	L_interrupt_69
$00D6	$082B			MOVF	_switch1_closed, 0
$00D7	$3A01			XORLW	1
$00D8	$1D03			BTFSS	STATUS, Z
$00D9	$28DE			GOTO	L_interrupt_69
$00DA	$	L467_ex_L_interrupt_69:
$00DA	$3001			MOVLW	1
$00DB	$1703			BSF	STATUS, RP1
$00DC	$1283			BCF	STATUS, RP0
$00DD	$00CB			MOVWF	interrupt_axis2_job_over_L0
$00DE	$	L_interrupt_69:
;go.h,68 :: 		if (axis2_bind_switch2 && switch2_closed == 1) axis2_job_over = 1;
$00DE	$1303			BCF	STATUS, RP1
$00DF	$1683			BSF	STATUS, RP0
$00E0	$0850			MOVF	_axis2_bind_switch2, 0
$00E1	$1903			BTFSC	STATUS, Z
$00E2	$28EB			GOTO	L_interrupt_72
$00E3	$082C			MOVF	_switch2_closed, 0
$00E4	$3A01			XORLW	1
$00E5	$1D03			BTFSS	STATUS, Z
$00E6	$28EB			GOTO	L_interrupt_72
$00E7	$	L479_ex_L_interrupt_72:
$00E7	$3001			MOVLW	1
$00E8	$1703			BSF	STATUS, RP1
$00E9	$1283			BCF	STATUS, RP0
$00EA	$00CB			MOVWF	interrupt_axis2_job_over_L0
$00EB	$	L_interrupt_72:
;go.h,72 :: 		if (!AXIS3_ENABLE_BIT) axis3_job_over = 1;
$00EB	$1303			BCF	STATUS, RP1
$00EC	$1283			BCF	STATUS, RP0
$00ED	$1303			BCF	STATUS, RP1
$00EE	$1887			BTFSC	PORTC, 1
$00EF	$28F3			GOTO	L_interrupt_73
$00F0	$3001			MOVLW	1
$00F1	$1703			BSF	STATUS, RP1
$00F2	$00CC			MOVWF	interrupt_axis3_job_over_L0
$00F3	$	L_interrupt_73:
;go.h,74 :: 		if (!axis3_bind_switch1 && !axis3_bind_switch2 && !axis3_steps) axis3_job_over = 1;
$00F3	$1303			BCF	STATUS, RP1
$00F4	$1683			BSF	STATUS, RP0
$00F5	$1303			BCF	STATUS, RP1
$00F6	$1683			BSF	STATUS, RP0
$00F7	$0859			MOVF	_axis3_bind_switch1, 0
$00F8	$1D03			BTFSS	STATUS, Z
$00F9	$2907			GOTO	L_interrupt_76
$00FA	$085A			MOVF	_axis3_bind_switch2, 0
$00FB	$1D03			BTFSS	STATUS, Z
$00FC	$2907			GOTO	L_interrupt_76
$00FD	$085B			MOVF	_axis3_steps, 0
$00FE	$045C			IORWF	_axis3_steps+1, 0
$00FF	$045D			IORWF	_axis3_steps+2, 0
$0100	$045E			IORWF	_axis3_steps+3, 0
$0101	$1D03			BTFSS	STATUS, Z
$0102	$2907			GOTO	L_interrupt_76
$0103	$	L498_ex_L_interrupt_76:
$0103	$3001			MOVLW	1
$0104	$1703			BSF	STATUS, RP1
$0105	$1283			BCF	STATUS, RP0
$0106	$00CC			MOVWF	interrupt_axis3_job_over_L0
$0107	$	L_interrupt_76:
;go.h,76 :: 		if (!axis3_bind_switch1 && !axis3_bind_switch2 && axis3_steps_counter >= axis3_steps) axis3_job_over = 1;
$0107	$1303			BCF	STATUS, RP1
$0108	$1683			BSF	STATUS, RP0
$0109	$0859			MOVF	_axis3_bind_switch1, 0
$010A	$1D03			BTFSS	STATUS, Z
$010B	$2923			GOTO	L_interrupt_79
$010C	$085A			MOVF	_axis3_bind_switch2, 0
$010D	$1D03			BTFSS	STATUS, Z
$010E	$2923			GOTO	L_interrupt_79
$010F	$085E			MOVF	_axis3_steps+3, 0
$0110	$0262			SUBWF	_axis3_steps_counter+3, 0
$0111	$1D03			BTFSS	STATUS, Z
$0112	$291D			GOTO	L_interrupt_209
$0113	$085D			MOVF	_axis3_steps+2, 0
$0114	$0261			SUBWF	_axis3_steps_counter+2, 0
$0115	$1D03			BTFSS	STATUS, Z
$0116	$291D			GOTO	L_interrupt_209
$0117	$085C			MOVF	_axis3_steps+1, 0
$0118	$0260			SUBWF	_axis3_steps_counter+1, 0
$0119	$1D03			BTFSS	STATUS, Z
$011A	$291D			GOTO	L_interrupt_209
$011B	$085B			MOVF	_axis3_steps, 0
$011C	$025F			SUBWF	_axis3_steps_counter, 0
$011D	$	L_interrupt_209:
$011D	$1C03			BTFSS	STATUS, C
$011E	$2923			GOTO	L_interrupt_79
$011F	$	L513_ex_L_interrupt_79:
$011F	$3001			MOVLW	1
$0120	$1703			BSF	STATUS, RP1
$0121	$1283			BCF	STATUS, RP0
$0122	$00CC			MOVWF	interrupt_axis3_job_over_L0
$0123	$	L_interrupt_79:
;go.h,78 :: 		if (axis3_bind_switch1 && switch1_closed == 1) axis3_job_over = 1;
$0123	$1303			BCF	STATUS, RP1
$0124	$1683			BSF	STATUS, RP0
$0125	$0859			MOVF	_axis3_bind_switch1, 0
$0126	$1903			BTFSC	STATUS, Z
$0127	$2930			GOTO	L_interrupt_82
$0128	$082B			MOVF	_switch1_closed, 0
$0129	$3A01			XORLW	1
$012A	$1D03			BTFSS	STATUS, Z
$012B	$2930			GOTO	L_interrupt_82
$012C	$	L525_ex_L_interrupt_82:
$012C	$3001			MOVLW	1
$012D	$1703			BSF	STATUS, RP1
$012E	$1283			BCF	STATUS, RP0
$012F	$00CC			MOVWF	interrupt_axis3_job_over_L0
$0130	$	L_interrupt_82:
;go.h,80 :: 		if (axis3_bind_switch2 && switch2_closed == 1) axis3_job_over = 1;
$0130	$1303			BCF	STATUS, RP1
$0131	$1683			BSF	STATUS, RP0
$0132	$085A			MOVF	_axis3_bind_switch2, 0
$0133	$1903			BTFSC	STATUS, Z
$0134	$293D			GOTO	L_interrupt_85
$0135	$082C			MOVF	_switch2_closed, 0
$0136	$3A01			XORLW	1
$0137	$1D03			BTFSS	STATUS, Z
$0138	$293D			GOTO	L_interrupt_85
$0139	$	L537_ex_L_interrupt_85:
$0139	$3001			MOVLW	1
$013A	$1703			BSF	STATUS, RP1
$013B	$1283			BCF	STATUS, RP0
$013C	$00CC			MOVWF	interrupt_axis3_job_over_L0
$013D	$	L_interrupt_85:
;go.h,84 :: 		if (axis1_warmup_counter >= axis1_period_warmup)
$013D	$1303			BCF	STATUS, RP1
$013E	$1683			BSF	STATUS, RP0
$013F	$0866			MOVF	_axis1_period_warmup+3, 0
$0140	$023C			SUBWF	_axis1_warmup_counter+3, 0
$0141	$1D03			BTFSS	STATUS, Z
$0142	$294D			GOTO	L_interrupt_210
$0143	$0865			MOVF	_axis1_period_warmup+2, 0
$0144	$023B			SUBWF	_axis1_warmup_counter+2, 0
$0145	$1D03			BTFSS	STATUS, Z
$0146	$294D			GOTO	L_interrupt_210
$0147	$0864			MOVF	_axis1_period_warmup+1, 0
$0148	$023A			SUBWF	_axis1_warmup_counter+1, 0
$0149	$1D03			BTFSS	STATUS, Z
$014A	$294D			GOTO	L_interrupt_210
$014B	$0863			MOVF	_axis1_period_warmup, 0
$014C	$0239			SUBWF	_axis1_warmup_counter, 0
$014D	$	L_interrupt_210:
$014D	$1C03			BTFSS	STATUS, C
$014E	$2982			GOTO	L_interrupt_86
;go.h,86 :: 		if (axis1_period_current<axis1_period_end) axis1_period_current++;
$014F	$086E			MOVF	_axis1_period_end+3, 0
$0150	$026A			SUBWF	_axis1_period_current+3, 0
$0151	$1D03			BTFSS	STATUS, Z
$0152	$295D			GOTO	L_interrupt_211
$0153	$086D			MOVF	_axis1_period_end+2, 0
$0154	$0269			SUBWF	_axis1_period_current+2, 0
$0155	$1D03			BTFSS	STATUS, Z
$0156	$295D			GOTO	L_interrupt_211
$0157	$086C			MOVF	_axis1_period_end+1, 0
$0158	$0268			SUBWF	_axis1_period_current+1, 0
$0159	$1D03			BTFSS	STATUS, Z
$015A	$295D			GOTO	L_interrupt_211
$015B	$086B			MOVF	_axis1_period_end, 0
$015C	$0267			SUBWF	_axis1_period_current, 0
$015D	$	L_interrupt_211:
$015D	$1803			BTFSC	STATUS, C
$015E	$2966			GOTO	L_interrupt_87
$015F	$0AE7			INCF	_axis1_period_current, 1
$0160	$1903			BTFSC	STATUS, Z
$0161	$0AE8			INCF	_axis1_period_current+1, 1
$0162	$1903			BTFSC	STATUS, Z
$0163	$0AE9			INCF	_axis1_period_current+2, 1
$0164	$1903			BTFSC	STATUS, Z
$0165	$0AEA			INCF	_axis1_period_current+3, 1
$0166	$	L_interrupt_87:
;go.h,88 :: 		if (axis1_period_current>axis1_period_end) axis1_period_current--;
$0166	$086A			MOVF	_axis1_period_current+3, 0
$0167	$026E			SUBWF	_axis1_period_end+3, 0
$0168	$1D03			BTFSS	STATUS, Z
$0169	$2974			GOTO	L_interrupt_212
$016A	$0869			MOVF	_axis1_period_current+2, 0
$016B	$026D			SUBWF	_axis1_period_end+2, 0
$016C	$1D03			BTFSS	STATUS, Z
$016D	$2974			GOTO	L_interrupt_212
$016E	$0868			MOVF	_axis1_period_current+1, 0
$016F	$026C			SUBWF	_axis1_period_end+1, 0
$0170	$1D03			BTFSS	STATUS, Z
$0171	$2974			GOTO	L_interrupt_212
$0172	$0867			MOVF	_axis1_period_current, 0
$0173	$026B			SUBWF	_axis1_period_end, 0
$0174	$	L_interrupt_212:
$0174	$1803			BTFSC	STATUS, C
$0175	$297E			GOTO	L_interrupt_88
$0176	$3001			MOVLW	1
$0177	$02E7			SUBWF	_axis1_period_current, 1
$0178	$1C03			BTFSS	STATUS, C
$0179	$02E8			SUBWF	_axis1_period_current+1, 1
$017A	$1C03			BTFSS	STATUS, C
$017B	$02E9			SUBWF	_axis1_period_current+2, 1
$017C	$1C03			BTFSS	STATUS, C
$017D	$02EA			SUBWF	_axis1_period_current+3, 1
$017E	$	L_interrupt_88:
;go.h,90 :: 		axis1_warmup_counter = 0;
$017E	$01B9			CLRF	_axis1_warmup_counter
$017F	$01BA			CLRF	_axis1_warmup_counter+1
$0180	$01BB			CLRF	_axis1_warmup_counter+2
$0181	$01BC			CLRF	_axis1_warmup_counter+3
;go.h,91 :: 		}
$0182	$	L_interrupt_86:
;go.h,93 :: 		if (axis2_warmup_counter >= axis2_period_warmup)
$0182	$1703			BSF	STATUS, RP1
$0183	$1283			BCF	STATUS, RP0
$0184	$0813			MOVF	_axis2_period_warmup+3, 0
$0185	$1303			BCF	STATUS, RP1
$0186	$1683			BSF	STATUS, RP0
$0187	$0240			SUBWF	_axis2_warmup_counter+3, 0
$0188	$1D03			BTFSS	STATUS, Z
$0189	$29A0			GOTO	L_interrupt_213
$018A	$1703			BSF	STATUS, RP1
$018B	$1283			BCF	STATUS, RP0
$018C	$0812			MOVF	_axis2_period_warmup+2, 0
$018D	$1303			BCF	STATUS, RP1
$018E	$1683			BSF	STATUS, RP0
$018F	$023F			SUBWF	_axis2_warmup_counter+2, 0
$0190	$1D03			BTFSS	STATUS, Z
$0191	$29A0			GOTO	L_interrupt_213
$0192	$1703			BSF	STATUS, RP1
$0193	$1283			BCF	STATUS, RP0
$0194	$0811			MOVF	_axis2_period_warmup+1, 0
$0195	$1303			BCF	STATUS, RP1
$0196	$1683			BSF	STATUS, RP0
$0197	$023E			SUBWF	_axis2_warmup_counter+1, 0
$0198	$1D03			BTFSS	STATUS, Z
$0199	$29A0			GOTO	L_interrupt_213
$019A	$1703			BSF	STATUS, RP1
$019B	$1283			BCF	STATUS, RP0
$019C	$0810			MOVF	_axis2_period_warmup, 0
$019D	$1303			BCF	STATUS, RP1
$019E	$1683			BSF	STATUS, RP0
$019F	$023D			SUBWF	_axis2_warmup_counter, 0
$01A0	$	L_interrupt_213:
$01A0	$1C03			BTFSS	STATUS, C
$01A1	$29D9			GOTO	L_interrupt_89
;go.h,95 :: 		if (axis2_period_current<axis2_period_end) axis2_period_current++;
$01A2	$1703			BSF	STATUS, RP1
$01A3	$1283			BCF	STATUS, RP0
$01A4	$081B			MOVF	_axis2_period_end+3, 0
$01A5	$0217			SUBWF	_axis2_period_current+3, 0
$01A6	$1D03			BTFSS	STATUS, Z
$01A7	$29B2			GOTO	L_interrupt_214
$01A8	$081A			MOVF	_axis2_period_end+2, 0
$01A9	$0216			SUBWF	_axis2_period_current+2, 0
$01AA	$1D03			BTFSS	STATUS, Z
$01AB	$29B2			GOTO	L_interrupt_214
$01AC	$0819			MOVF	_axis2_period_end+1, 0
$01AD	$0215			SUBWF	_axis2_period_current+1, 0
$01AE	$1D03			BTFSS	STATUS, Z
$01AF	$29B2			GOTO	L_interrupt_214
$01B0	$0818			MOVF	_axis2_period_end, 0
$01B1	$0214			SUBWF	_axis2_period_current, 0
$01B2	$	L_interrupt_214:
$01B2	$1803			BTFSC	STATUS, C
$01B3	$29BB			GOTO	L_interrupt_90
$01B4	$0A94			INCF	_axis2_period_current, 1
$01B5	$1903			BTFSC	STATUS, Z
$01B6	$0A95			INCF	_axis2_period_current+1, 1
$01B7	$1903			BTFSC	STATUS, Z
$01B8	$0A96			INCF	_axis2_period_current+2, 1
$01B9	$1903			BTFSC	STATUS, Z
$01BA	$0A97			INCF	_axis2_period_current+3, 1
$01BB	$	L_interrupt_90:
;go.h,97 :: 		if (axis2_period_current>axis2_period_end) axis2_period_current--;
$01BB	$0817			MOVF	_axis2_period_current+3, 0
$01BC	$021B			SUBWF	_axis2_period_end+3, 0
$01BD	$1D03			BTFSS	STATUS, Z
$01BE	$29C9			GOTO	L_interrupt_215
$01BF	$0816			MOVF	_axis2_period_current+2, 0
$01C0	$021A			SUBWF	_axis2_period_end+2, 0
$01C1	$1D03			BTFSS	STATUS, Z
$01C2	$29C9			GOTO	L_interrupt_215
$01C3	$0815			MOVF	_axis2_period_current+1, 0
$01C4	$0219			SUBWF	_axis2_period_end+1, 0
$01C5	$1D03			BTFSS	STATUS, Z
$01C6	$29C9			GOTO	L_interrupt_215
$01C7	$0814			MOVF	_axis2_period_current, 0
$01C8	$0218			SUBWF	_axis2_period_end, 0
$01C9	$	L_interrupt_215:
$01C9	$1803			BTFSC	STATUS, C
$01CA	$29D3			GOTO	L_interrupt_91
$01CB	$3001			MOVLW	1
$01CC	$0294			SUBWF	_axis2_period_current, 1
$01CD	$1C03			BTFSS	STATUS, C
$01CE	$0295			SUBWF	_axis2_period_current+1, 1
$01CF	$1C03			BTFSS	STATUS, C
$01D0	$0296			SUBWF	_axis2_period_current+2, 1
$01D1	$1C03			BTFSS	STATUS, C
$01D2	$0297			SUBWF	_axis2_period_current+3, 1
$01D3	$	L_interrupt_91:
;go.h,99 :: 		axis2_warmup_counter = 0;
$01D3	$1303			BCF	STATUS, RP1
$01D4	$1683			BSF	STATUS, RP0
$01D5	$01BD			CLRF	_axis2_warmup_counter
$01D6	$01BE			CLRF	_axis2_warmup_counter+1
$01D7	$01BF			CLRF	_axis2_warmup_counter+2
$01D8	$01C0			CLRF	_axis2_warmup_counter+3
;go.h,100 :: 		}
$01D9	$	L_interrupt_89:
;go.h,102 :: 		if (axis3_warmup_counter >= axis3_period_warmup)
$01D9	$1703			BSF	STATUS, RP1
$01DA	$1283			BCF	STATUS, RP0
$01DB	$081F			MOVF	_axis3_period_warmup+3, 0
$01DC	$1303			BCF	STATUS, RP1
$01DD	$1683			BSF	STATUS, RP0
$01DE	$0244			SUBWF	_axis3_warmup_counter+3, 0
$01DF	$1D03			BTFSS	STATUS, Z
$01E0	$29F7			GOTO	L_interrupt_216
$01E1	$1703			BSF	STATUS, RP1
$01E2	$1283			BCF	STATUS, RP0
$01E3	$081E			MOVF	_axis3_period_warmup+2, 0
$01E4	$1303			BCF	STATUS, RP1
$01E5	$1683			BSF	STATUS, RP0
$01E6	$0243			SUBWF	_axis3_warmup_counter+2, 0
$01E7	$1D03			BTFSS	STATUS, Z
$01E8	$29F7			GOTO	L_interrupt_216
$01E9	$1703			BSF	STATUS, RP1
$01EA	$1283			BCF	STATUS, RP0
$01EB	$081D			MOVF	_axis3_period_warmup+1, 0
$01EC	$1303			BCF	STATUS, RP1
$01ED	$1683			BSF	STATUS, RP0
$01EE	$0242			SUBWF	_axis3_warmup_counter+1, 0
$01EF	$1D03			BTFSS	STATUS, Z
$01F0	$29F7			GOTO	L_interrupt_216
$01F1	$1703			BSF	STATUS, RP1
$01F2	$1283			BCF	STATUS, RP0
$01F3	$081C			MOVF	_axis3_period_warmup, 0
$01F4	$1303			BCF	STATUS, RP1
$01F5	$1683			BSF	STATUS, RP0
$01F6	$0241			SUBWF	_axis3_warmup_counter, 0
$01F7	$	L_interrupt_216:
$01F7	$1C03			BTFSS	STATUS, C
$01F8	$2A30			GOTO	L_interrupt_92
;go.h,104 :: 		if (axis3_period_current<axis3_period_end) axis3_period_current++;
$01F9	$1703			BSF	STATUS, RP1
$01FA	$1283			BCF	STATUS, RP0
$01FB	$0827			MOVF	_axis3_period_end+3, 0
$01FC	$0223			SUBWF	_axis3_period_current+3, 0
$01FD	$1D03			BTFSS	STATUS, Z
$01FE	$2A09			GOTO	L_interrupt_217
$01FF	$0826			MOVF	_axis3_period_end+2, 0
$0200	$0222			SUBWF	_axis3_period_current+2, 0
$0201	$1D03			BTFSS	STATUS, Z
$0202	$2A09			GOTO	L_interrupt_217
$0203	$0825			MOVF	_axis3_period_end+1, 0
$0204	$0221			SUBWF	_axis3_period_current+1, 0
$0205	$1D03			BTFSS	STATUS, Z
$0206	$2A09			GOTO	L_interrupt_217
$0207	$0824			MOVF	_axis3_period_end, 0
$0208	$0220			SUBWF	_axis3_period_current, 0
$0209	$	L_interrupt_217:
$0209	$1803			BTFSC	STATUS, C
$020A	$2A12			GOTO	L_interrupt_93
$020B	$0AA0			INCF	_axis3_period_current, 1
$020C	$1903			BTFSC	STATUS, Z
$020D	$0AA1			INCF	_axis3_period_current+1, 1
$020E	$1903			BTFSC	STATUS, Z
$020F	$0AA2			INCF	_axis3_period_current+2, 1
$0210	$1903			BTFSC	STATUS, Z
$0211	$0AA3			INCF	_axis3_period_current+3, 1
$0212	$	L_interrupt_93:
;go.h,106 :: 		if (axis3_period_current>axis3_period_end) axis3_period_current--;
$0212	$0823			MOVF	_axis3_period_current+3, 0
$0213	$0227			SUBWF	_axis3_period_end+3, 0
$0214	$1D03			BTFSS	STATUS, Z
$0215	$2A20			GOTO	L_interrupt_218
$0216	$0822			MOVF	_axis3_period_current+2, 0
$0217	$0226			SUBWF	_axis3_period_end+2, 0
$0218	$1D03			BTFSS	STATUS, Z
$0219	$2A20			GOTO	L_interrupt_218
$021A	$0821			MOVF	_axis3_period_current+1, 0
$021B	$0225			SUBWF	_axis3_period_end+1, 0
$021C	$1D03			BTFSS	STATUS, Z
$021D	$2A20			GOTO	L_interrupt_218
$021E	$0820			MOVF	_axis3_period_current, 0
$021F	$0224			SUBWF	_axis3_period_end, 0
$0220	$	L_interrupt_218:
$0220	$1803			BTFSC	STATUS, C
$0221	$2A2A			GOTO	L_interrupt_94
$0222	$3001			MOVLW	1
$0223	$02A0			SUBWF	_axis3_period_current, 1
$0224	$1C03			BTFSS	STATUS, C
$0225	$02A1			SUBWF	_axis3_period_current+1, 1
$0226	$1C03			BTFSS	STATUS, C
$0227	$02A2			SUBWF	_axis3_period_current+2, 1
$0228	$1C03			BTFSS	STATUS, C
$0229	$02A3			SUBWF	_axis3_period_current+3, 1
$022A	$	L_interrupt_94:
;go.h,108 :: 		axis3_warmup_counter = 0;
$022A	$1303			BCF	STATUS, RP1
$022B	$1683			BSF	STATUS, RP0
$022C	$01C1			CLRF	_axis3_warmup_counter
$022D	$01C2			CLRF	_axis3_warmup_counter+1
$022E	$01C3			CLRF	_axis3_warmup_counter+2
$022F	$01C4			CLRF	_axis3_warmup_counter+3
;go.h,109 :: 		}
$0230	$	L_interrupt_92:
;go.h,113 :: 		if (axis1_counter>=axis1_period_current)
$0230	$086A			MOVF	_axis1_period_current+3, 0
$0231	$0230			SUBWF	_axis1_counter+3, 0
$0232	$1D03			BTFSS	STATUS, Z
$0233	$2A3E			GOTO	L_interrupt_219
$0234	$0869			MOVF	_axis1_period_current+2, 0
$0235	$022F			SUBWF	_axis1_counter+2, 0
$0236	$1D03			BTFSS	STATUS, Z
$0237	$2A3E			GOTO	L_interrupt_219
$0238	$0868			MOVF	_axis1_period_current+1, 0
$0239	$022E			SUBWF	_axis1_counter+1, 0
$023A	$1D03			BTFSS	STATUS, Z
$023B	$2A3E			GOTO	L_interrupt_219
$023C	$0867			MOVF	_axis1_period_current, 0
$023D	$022D			SUBWF	_axis1_counter, 0
$023E	$	L_interrupt_219:
$023E	$1C03			BTFSS	STATUS, C
$023F	$2A83			GOTO	L_interrupt_95
;go.h,115 :: 		axis1_counter = 0;
$0240	$01AD			CLRF	_axis1_counter
$0241	$01AE			CLRF	_axis1_counter+1
$0242	$01AF			CLRF	_axis1_counter+2
$0243	$01B0			CLRF	_axis1_counter+3
;go.h,117 :: 		axis1_steps_counter++;
$0244	$0ACB			INCF	_axis1_steps_counter, 1
$0245	$1903			BTFSC	STATUS, Z
$0246	$0ACC			INCF	_axis1_steps_counter+1, 1
$0247	$1903			BTFSC	STATUS, Z
$0248	$0ACD			INCF	_axis1_steps_counter+2, 1
$0249	$1903			BTFSC	STATUS, Z
$024A	$0ACE			INCF	_axis1_steps_counter+3, 1
;go.h,119 :: 		if (!axis1_job_over || (!axis1_steps && AXIS1_ENABLE_BIT))
$024B	$1703			BSF	STATUS, RP1
$024C	$1283			BCF	STATUS, RP0
$024D	$084A			MOVF	interrupt_axis1_job_over_L0, 0
$024E	$1903			BTFSC	STATUS, Z
$024F	$2A60			GOTO	L609_ex_L_interrupt_100
$0250	$1303			BCF	STATUS, RP1
$0251	$1683			BSF	STATUS, RP0
$0252	$0847			MOVF	_axis1_steps, 0
$0253	$0448			IORWF	_axis1_steps+1, 0
$0254	$0449			IORWF	_axis1_steps+2, 0
$0255	$044A			IORWF	_axis1_steps+3, 0
$0256	$1D03			BTFSS	STATUS, Z
$0257	$2A5F			GOTO	L602_ex_L609_ex_L_interrupt_100
$0258	$3000			MOVLW	0
$0259	$18A0			BTFSC	_PORTA_V, 1
$025A	$3001			MOVLW	1
$025B	$00F1			MOVWF	STACK_1
$025C	$0871			MOVF	STACK_1, 0
$025D	$1D03			BTFSS	STATUS, Z
$025E	$2A60			GOTO	L609_ex_L_interrupt_100
$025F	$	L602_ex_L609_ex_L_interrupt_100:
$025F	$2A83			GOTO	L_interrupt_100
$0260	$	L609_ex_L_interrupt_100:
;go.h,121 :: 		AXIS1_STEP_BIT = ~ AXIS1_STEP_BIT; WriteVirtualPorts();
$0260	$1303			BCF	STATUS, RP1
$0261	$1683			BSF	STATUS, RP0
$0262	$3000			MOVLW	0
$0263	$1920			BTFSC	_PORTA_V, 2
$0264	$3001			MOVLW	1
$0265	$00F1			MOVWF	STACK_1
$0266	$0971			COMF	STACK_1, W
$0267	$00F0			MOVWF	STACK_0
$0268	$3000			MOVLW	0
$0269	$1870			BTFSC	STACK_0, 0
$026A	$3004			MOVLW	4
$026B	$0620			XORWF	_PORTA_V, 0
$026C	$3904			ANDLW	4
$026D	$06A0			XORWF	_PORTA_V, 1
$026E	$236D			CALL	_WriteVirtualPorts
;go.h,122 :: 		AXIS1_STEP_BIT = ~ AXIS1_STEP_BIT; WriteVirtualPorts();
$026F	$3000			MOVLW	0
$0270	$1683			BSF	STATUS, RP0
$0271	$1920			BTFSC	_PORTA_V, 2
$0272	$3001			MOVLW	1
$0273	$00F1			MOVWF	STACK_1
$0274	$0971			COMF	STACK_1, W
$0275	$00F0			MOVWF	STACK_0
$0276	$3000			MOVLW	0
$0277	$1870			BTFSC	STACK_0, 0
$0278	$3004			MOVLW	4
$0279	$0620			XORWF	_PORTA_V, 0
$027A	$3904			ANDLW	4
$027B	$06A0			XORWF	_PORTA_V, 1
$027C	$236D			CALL	_WriteVirtualPorts
;go.h,124 :: 		if (trace_axis == 1) Trace();
$027D	$1683			BSF	STATUS, RP0
$027E	$086F			MOVF	_trace_axis, 0
$027F	$3A01			XORLW	1
$0280	$1D03			BTFSS	STATUS, Z
$0281	$2A83			GOTO	L_interrupt_101
$0282	$2377			CALL	_Trace
$0283	$	L_interrupt_101:
;go.h,125 :: 		}
$0283	$	L_interrupt_100:
;go.h,126 :: 		}
$0283	$	L_interrupt_95:
;go.h,128 :: 		if (axis2_counter>=axis2_period_current)
$0283	$1703			BSF	STATUS, RP1
$0284	$1283			BCF	STATUS, RP0
$0285	$0817			MOVF	_axis2_period_current+3, 0
$0286	$1303			BCF	STATUS, RP1
$0287	$1683			BSF	STATUS, RP0
$0288	$0234			SUBWF	_axis2_counter+3, 0
$0289	$1D03			BTFSS	STATUS, Z
$028A	$2AA1			GOTO	L_interrupt_220
$028B	$1703			BSF	STATUS, RP1
$028C	$1283			BCF	STATUS, RP0
$028D	$0816			MOVF	_axis2_period_current+2, 0
$028E	$1303			BCF	STATUS, RP1
$028F	$1683			BSF	STATUS, RP0
$0290	$0233			SUBWF	_axis2_counter+2, 0
$0291	$1D03			BTFSS	STATUS, Z
$0292	$2AA1			GOTO	L_interrupt_220
$0293	$1703			BSF	STATUS, RP1
$0294	$1283			BCF	STATUS, RP0
$0295	$0815			MOVF	_axis2_period_current+1, 0
$0296	$1303			BCF	STATUS, RP1
$0297	$1683			BSF	STATUS, RP0
$0298	$0232			SUBWF	_axis2_counter+1, 0
$0299	$1D03			BTFSS	STATUS, Z
$029A	$2AA1			GOTO	L_interrupt_220
$029B	$1703			BSF	STATUS, RP1
$029C	$1283			BCF	STATUS, RP0
$029D	$0814			MOVF	_axis2_period_current, 0
$029E	$1303			BCF	STATUS, RP1
$029F	$1683			BSF	STATUS, RP0
$02A0	$0231			SUBWF	_axis2_counter, 0
$02A1	$	L_interrupt_220:
$02A1	$1C03			BTFSS	STATUS, C
$02A2	$2AE6			GOTO	L_interrupt_102
;go.h,130 :: 		axis2_counter = 0;
$02A3	$01B1			CLRF	_axis2_counter
$02A4	$01B2			CLRF	_axis2_counter+1
$02A5	$01B3			CLRF	_axis2_counter+2
$02A6	$01B4			CLRF	_axis2_counter+3
;go.h,132 :: 		axis2_steps_counter++;
$02A7	$0AD5			INCF	_axis2_steps_counter, 1
$02A8	$1903			BTFSC	STATUS, Z
$02A9	$0AD6			INCF	_axis2_steps_counter+1, 1
$02AA	$1903			BTFSC	STATUS, Z
$02AB	$0AD7			INCF	_axis2_steps_counter+2, 1
$02AC	$1903			BTFSC	STATUS, Z
$02AD	$0AD8			INCF	_axis2_steps_counter+3, 1
;go.h,134 :: 		if (!axis2_job_over || (!axis2_steps && AXIS2_ENABLE_BIT))
$02AE	$1703			BSF	STATUS, RP1
$02AF	$1283			BCF	STATUS, RP0
$02B0	$084B			MOVF	interrupt_axis2_job_over_L0, 0
$02B1	$1903			BTFSC	STATUS, Z
$02B2	$2AC3			GOTO	L657_ex_L_interrupt_107
$02B3	$1303			BCF	STATUS, RP1
$02B4	$1683			BSF	STATUS, RP0
$02B5	$0851			MOVF	_axis2_steps, 0
$02B6	$0452			IORWF	_axis2_steps+1, 0
$02B7	$0453			IORWF	_axis2_steps+2, 0
$02B8	$0454			IORWF	_axis2_steps+3, 0
$02B9	$1D03			BTFSS	STATUS, Z
$02BA	$2AC2			GOTO	L650_ex_L657_ex_L_interrupt_107
$02BB	$3000			MOVLW	0
$02BC	$18A1			BTFSC	_PORTE_V, 1
$02BD	$3001			MOVLW	1
$02BE	$00F1			MOVWF	STACK_1
$02BF	$0871			MOVF	STACK_1, 0
$02C0	$1D03			BTFSS	STATUS, Z
$02C1	$2AC3			GOTO	L657_ex_L_interrupt_107
$02C2	$	L650_ex_L657_ex_L_interrupt_107:
$02C2	$2AE6			GOTO	L_interrupt_107
$02C3	$	L657_ex_L_interrupt_107:
;go.h,136 :: 		AXIS2_STEP_BIT = ~AXIS2_STEP_BIT; WriteVirtualPorts();
$02C3	$1303			BCF	STATUS, RP1
$02C4	$1683			BSF	STATUS, RP0
$02C5	$3000			MOVLW	0
$02C6	$1921			BTFSC	_PORTE_V, 2
$02C7	$3001			MOVLW	1
$02C8	$00F1			MOVWF	STACK_1
$02C9	$0971			COMF	STACK_1, W
$02CA	$00F0			MOVWF	STACK_0
$02CB	$3000			MOVLW	0
$02CC	$1870			BTFSC	STACK_0, 0
$02CD	$3004			MOVLW	4
$02CE	$0621			XORWF	_PORTE_V, 0
$02CF	$3904			ANDLW	4
$02D0	$06A1			XORWF	_PORTE_V, 1
$02D1	$236D			CALL	_WriteVirtualPorts
;go.h,137 :: 		AXIS2_STEP_BIT = ~AXIS2_STEP_BIT; WriteVirtualPorts();
$02D2	$3000			MOVLW	0
$02D3	$1683			BSF	STATUS, RP0
$02D4	$1921			BTFSC	_PORTE_V, 2
$02D5	$3001			MOVLW	1
$02D6	$00F1			MOVWF	STACK_1
$02D7	$0971			COMF	STACK_1, W
$02D8	$00F0			MOVWF	STACK_0
$02D9	$3000			MOVLW	0
$02DA	$1870			BTFSC	STACK_0, 0
$02DB	$3004			MOVLW	4
$02DC	$0621			XORWF	_PORTE_V, 0
$02DD	$3904			ANDLW	4
$02DE	$06A1			XORWF	_PORTE_V, 1
$02DF	$236D			CALL	_WriteVirtualPorts
;go.h,139 :: 		if (trace_axis == 2) Trace();
$02E0	$1683			BSF	STATUS, RP0
$02E1	$086F			MOVF	_trace_axis, 0
$02E2	$3A02			XORLW	2
$02E3	$1D03			BTFSS	STATUS, Z
$02E4	$2AE6			GOTO	L_interrupt_108
$02E5	$2377			CALL	_Trace
$02E6	$	L_interrupt_108:
;go.h,140 :: 		}
$02E6	$	L_interrupt_107:
;go.h,141 :: 		}
$02E6	$	L_interrupt_102:
;go.h,143 :: 		if (axis3_counter>=axis3_period_current)
$02E6	$1703			BSF	STATUS, RP1
$02E7	$1283			BCF	STATUS, RP0
$02E8	$0823			MOVF	_axis3_period_current+3, 0
$02E9	$1303			BCF	STATUS, RP1
$02EA	$1683			BSF	STATUS, RP0
$02EB	$0238			SUBWF	_axis3_counter+3, 0
$02EC	$1D03			BTFSS	STATUS, Z
$02ED	$2B04			GOTO	L_interrupt_221
$02EE	$1703			BSF	STATUS, RP1
$02EF	$1283			BCF	STATUS, RP0
$02F0	$0822			MOVF	_axis3_period_current+2, 0
$02F1	$1303			BCF	STATUS, RP1
$02F2	$1683			BSF	STATUS, RP0
$02F3	$0237			SUBWF	_axis3_counter+2, 0
$02F4	$1D03			BTFSS	STATUS, Z
$02F5	$2B04			GOTO	L_interrupt_221
$02F6	$1703			BSF	STATUS, RP1
$02F7	$1283			BCF	STATUS, RP0
$02F8	$0821			MOVF	_axis3_period_current+1, 0
$02F9	$1303			BCF	STATUS, RP1
$02FA	$1683			BSF	STATUS, RP0
$02FB	$0236			SUBWF	_axis3_counter+1, 0
$02FC	$1D03			BTFSS	STATUS, Z
$02FD	$2B04			GOTO	L_interrupt_221
$02FE	$1703			BSF	STATUS, RP1
$02FF	$1283			BCF	STATUS, RP0
$0300	$0820			MOVF	_axis3_period_current, 0
$0301	$1303			BCF	STATUS, RP1
$0302	$1683			BSF	STATUS, RP0
$0303	$0235			SUBWF	_axis3_counter, 0
$0304	$	L_interrupt_221:
$0304	$1C03			BTFSS	STATUS, C
$0305	$2B4B			GOTO	L_interrupt_109
;go.h,145 :: 		axis3_counter = 0;
$0306	$01B5			CLRF	_axis3_counter
$0307	$01B6			CLRF	_axis3_counter+1
$0308	$01B7			CLRF	_axis3_counter+2
$0309	$01B8			CLRF	_axis3_counter+3
;go.h,147 :: 		axis3_steps_counter++;
$030A	$0ADF			INCF	_axis3_steps_counter, 1
$030B	$1903			BTFSC	STATUS, Z
$030C	$0AE0			INCF	_axis3_steps_counter+1, 1
$030D	$1903			BTFSC	STATUS, Z
$030E	$0AE1			INCF	_axis3_steps_counter+2, 1
$030F	$1903			BTFSC	STATUS, Z
$0310	$0AE2			INCF	_axis3_steps_counter+3, 1
;go.h,149 :: 		if (!axis3_job_over || (!axis3_steps && AXIS3_ENABLE_BIT))
$0311	$1703			BSF	STATUS, RP1
$0312	$1283			BCF	STATUS, RP0
$0313	$084C			MOVF	interrupt_axis3_job_over_L0, 0
$0314	$1903			BTFSC	STATUS, Z
$0315	$2B29			GOTO	L705_ex_L_interrupt_114
$0316	$1303			BCF	STATUS, RP1
$0317	$1683			BSF	STATUS, RP0
$0318	$085B			MOVF	_axis3_steps, 0
$0319	$045C			IORWF	_axis3_steps+1, 0
$031A	$045D			IORWF	_axis3_steps+2, 0
$031B	$045E			IORWF	_axis3_steps+3, 0
$031C	$1D03			BTFSS	STATUS, Z
$031D	$2B26			GOTO	L698_ex_L705_ex_L_interrupt_114
$031E	$3000			MOVLW	0
$031F	$1283			BCF	STATUS, RP0
$0320	$1887			BTFSC	PORTC, 1
$0321	$3001			MOVLW	1
$0322	$00F1			MOVWF	STACK_1
$0323	$0871			MOVF	STACK_1, 0
$0324	$1D03			BTFSS	STATUS, Z
$0325	$2B29			GOTO	L705_ex_L_interrupt_114
$0326	$	L698_ex_L705_ex_L_interrupt_114:
$0326	$1303			BCF	STATUS, RP1
$0327	$1283			BCF	STATUS, RP0
$0328	$2B4B			GOTO	L_interrupt_114
$0329	$	L705_ex_L_interrupt_114:
;go.h,151 :: 		AXIS3_STEP_BIT = ~AXIS3_STEP_BIT; WriteVirtualPorts();
$0329	$1303			BCF	STATUS, RP1
$032A	$1283			BCF	STATUS, RP0
$032B	$3000			MOVLW	0
$032C	$1907			BTFSC	PORTC, 2
$032D	$3001			MOVLW	1
$032E	$00F1			MOVWF	STACK_1
$032F	$0971			COMF	STACK_1, W
$0330	$00F0			MOVWF	STACK_0
$0331	$3000			MOVLW	0
$0332	$1870			BTFSC	STACK_0, 0
$0333	$3004			MOVLW	4
$0334	$0607			XORWF	PORTC, 0
$0335	$3904			ANDLW	4
$0336	$0687			XORWF	PORTC, 1
$0337	$236D			CALL	_WriteVirtualPorts
;go.h,152 :: 		AXIS3_STEP_BIT = ~AXIS3_STEP_BIT; WriteVirtualPorts();
$0338	$3000			MOVLW	0
$0339	$1907			BTFSC	PORTC, 2
$033A	$3001			MOVLW	1
$033B	$00F1			MOVWF	STACK_1
$033C	$0971			COMF	STACK_1, W
$033D	$00F0			MOVWF	STACK_0
$033E	$3000			MOVLW	0
$033F	$1870			BTFSC	STACK_0, 0
$0340	$3004			MOVLW	4
$0341	$0607			XORWF	PORTC, 0
$0342	$3904			ANDLW	4
$0343	$0687			XORWF	PORTC, 1
$0344	$236D			CALL	_WriteVirtualPorts
;go.h,154 :: 		if (trace_axis == 3) Trace();
$0345	$1683			BSF	STATUS, RP0
$0346	$086F			MOVF	_trace_axis, 0
$0347	$3A03			XORLW	3
$0348	$1D03			BTFSS	STATUS, Z
$0349	$2B4B			GOTO	L_interrupt_115
$034A	$2377			CALL	_Trace
$034B	$	L_interrupt_115:
;go.h,155 :: 		}
$034B	$	L_interrupt_114:
;go.h,156 :: 		}
$034B	$	L_interrupt_109:
;go.h,160 :: 		if (axis1_job_over && axis2_job_over && axis3_job_over)
$034B	$1303			BCF	STATUS, RP1
$034C	$1683			BSF	STATUS, RP0
$034D	$1703			BSF	STATUS, RP1
$034E	$1283			BCF	STATUS, RP0
$034F	$084A			MOVF	interrupt_axis1_job_over_L0, 0
$0350	$1903			BTFSC	STATUS, Z
$0351	$2B5D			GOTO	L_interrupt_118
$0352	$084B			MOVF	interrupt_axis2_job_over_L0, 0
$0353	$1903			BTFSC	STATUS, Z
$0354	$2B5D			GOTO	L_interrupt_118
$0355	$084C			MOVF	interrupt_axis3_job_over_L0, 0
$0356	$1903			BTFSC	STATUS, Z
$0357	$2B5D			GOTO	L_interrupt_118
$0358	$	L735_ex_L_interrupt_118:
;go.h,162 :: 		ProcessStop();
$0358	$2397			CALL	_ProcessStop
;go.h,164 :: 		task_done_msg = 1; // Signal main thread to output "Task Completed" message
$0359	$3001			MOVLW	1
$035A	$1703			BSF	STATUS, RP1
$035B	$00A8			MOVWF	_task_done_msg
;go.h,166 :: 		task_running = 0;
$035C	$01A9			CLRF	_task_running, 1
;go.h,167 :: 		}
$035D	$	L_interrupt_118:
;go.h,169 :: 		PIR1.TMR2IF = 0; // Clear Timer2 Interrupt Flag
$035D	$1303			BCF	STATUS, RP1
$035E	$108C			BCF	PIR1, 1
;go.h,170 :: 		}
$035F	$	L_Interrupt_end:
$035F	$1703			BSF	STATUS, RP1
$0360	$0860			MOVF	STSAVED_1, 0
$0361	$00F1			MOVWF	STACK_1
$0362	$085F			MOVF	STSAVED_0, 0
$0363	$00F0			MOVWF	STACK_0
$0364	$084F			MOVF	?savePCLATH, 0
$0365	$008A			MOVWF	PCLATH
$0366	$084D			MOVF	?saveFSR, 0
$0367	$0084			MOVWF	FSR
$0368	$0E4E			SWAPF	?saveSTATUS, 0
$0369	$0083			MOVWF	STATUS
$036A	$0EFF			SWAPF	STACK_15, 1
$036B	$0E7F			SWAPF	STACK_15, 0
$036C	$0009			RETFIE
$039B	$	_Delay_1us:
;delays.c,7 :: 		void Delay_1us() {
;delays.c,8 :: 		Delay_us(1);
$039B	$3001			MOVLW	1
$039C	$1303			BCF	STATUS, RP1
$039D	$1283			BCF	STATUS, RP0
$039E	$00FA			MOVWF	STACK_10
$039F	$0BFA			DECFSZ	STACK_10, F
$03A0	$2B9F			GOTO	$-1
$03A1	$0000			NOP
;delays.c,9 :: 		}
$03A2	$0008			RETURN
$03A3	$	_Delay_5500us:
;delays.c,31 :: 		void Delay_5500us() {
;delays.c,32 :: 		Delay_us(5500);
$03A3	$3024			MOVLW	36
$03A4	$1303			BCF	STATUS, RP1
$03A5	$1283			BCF	STATUS, RP0
$03A6	$00FB			MOVWF	STACK_11
$03A7	$30FF			MOVLW	255
$03A8	$00FA			MOVWF	STACK_10
$03A9	$0BFB			DECFSZ	STACK_11, F
$03AA	$2BAC			GOTO	$+2
$03AB	$2BAF			GOTO	$+4
$03AC	$0BFA			DECFSZ	STACK_10, F
$03AD	$2BAC			GOTO	$-1
$03AE	$2BA9			GOTO	$-5
$03AF	$309E			MOVLW	158
$03B0	$00FA			MOVWF	STACK_10
$03B1	$0BFA			DECFSZ	STACK_10, F
$03B2	$2BB1			GOTO	$-1
;delays.c,33 :: 		}
$03B3	$0008			RETURN
$03B4	$	_Delay_50us:
;delays.c,19 :: 		void Delay_50us() {
;delays.c,20 :: 		Delay_us(50);
$03B4	$3053			MOVLW	83
$03B5	$1303			BCF	STATUS, RP1
$03B6	$1283			BCF	STATUS, RP0
$03B7	$00FA			MOVWF	STACK_10
$03B8	$0BFA			DECFSZ	STACK_10, F
$03B9	$2BB8			GOTO	$-1
;delays.c,21 :: 		}
$03BA	$0008			RETURN
$03BB	$	_Lcd8_Cmd:
$03BB	$1703			BSF	STATUS, RP1
$03BC	$1283			BCF	STATUS, RP0
$03BD	$082A			MOVF	lcd8bit_DataAddress, 0
$03BE	$0084			MOVWF	FSR
$03BF	$0180			CLRF	INDF, 1
$03C0	$085E			MOVF	FARG_Lcd8_Cmd+0, 0
$03C1	$1903			BTFSC	STATUS, Z
$03C2	$2BC3			GOTO	L_Lcd8_Cmd_0
$03C3	$	L_Lcd8_Cmd_0:
$03C3	$1BDE			BTFSC	FARG_Lcd8_Cmd+0, 7
$03C4	$1780			BSF	INDF, __LCD8_DB7
$03C5	$1B5E			BTFSC	FARG_Lcd8_Cmd+0, 6
$03C6	$1700			BSF	INDF, __LCD8_DB6
$03C7	$1ADE			BTFSC	FARG_Lcd8_Cmd+0, 5
$03C8	$1680			BSF	INDF, __LCD8_DB5
$03C9	$1A5E			BTFSC	FARG_Lcd8_Cmd+0, 4
$03CA	$1600			BSF	INDF, __LCD8_DB4
$03CB	$19DE			BTFSC	FARG_Lcd8_Cmd+0, 3
$03CC	$1580			BSF	INDF, __LCD8_DB3
$03CD	$195E			BTFSC	FARG_Lcd8_Cmd+0, 2
$03CE	$1500			BSF	INDF, __LCD8_DB2
$03CF	$18DE			BTFSC	FARG_Lcd8_Cmd+0, 1
$03D0	$1480			BSF	INDF, __LCD8_DB1
$03D1	$185E			BTFSC	FARG_Lcd8_Cmd+0, 0
$03D2	$1400			BSF	INDF, __LCD8_DB0
$03D3	$082B			MOVF	lcd8bit_CtrlAddress, 0
$03D4	$0084			MOVWF	FSR
$03D5	$1600			BSF	INDF, __LCD8_RS
$03D6	$082C			MOVF	_com, 0
$03D7	$1903			BTFSC	STATUS, Z
$03D8	$2BDA			GOTO	L_Lcd8_Cmd_1
$03D9	$1200			BCF	INDF, __LCD8_RS
$03DA	$	L_Lcd8_Cmd_1:
$03DA	$1700			BSF	INDF, __LCD8_ENABLE
$03DB	$239B			CALL	_Delay_1us
$03DC	$1300			BCF	INDF, __LCD8_ENABLE
$03DD	$1703			BSF	STATUS, RP1
$03DE	$082C			MOVF	_com, 0
$03DF	$1903			BTFSC	STATUS, Z
$03E0	$2BE3			GOTO	L_Lcd8_Cmd_2
$03E1	$23A3			CALL	_Delay_5500us
$03E2	$2BE6			GOTO	L_Lcd8_Cmd_3
$03E3	$	L_Lcd8_Cmd_2:
$03E3	$1303			BCF	STATUS, RP1
$03E4	$1283			BCF	STATUS, RP0
$03E5	$23B4			CALL	_Delay_50us
$03E6	$	L_Lcd8_Cmd_3:
$03E6	$0008			RETURN
$03E7	$	_Lcd8_Chr_CP:
$03E7	$1703			BSF	STATUS, RP1
$03E8	$1283			BCF	STATUS, RP0
$03E9	$01AC			CLRF	_com, 1
$03EA	$085B			MOVF	FARG_Lcd8_Chr_CP+0, 0
$03EB	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$03EC	$23BB			CALL	_Lcd8_Cmd
$03ED	$3001			MOVLW	1
$03EE	$1703			BSF	STATUS, RP1
$03EF	$00AC			MOVWF	_com
$03F0	$0008			RETURN
$03F1	$	_____DoICP:
$03F1	$1703			BSF	STATUS, RP1
$03F2	$1283			BCF	STATUS, RP0
$03F3	$082E			MOVF	___DoICPHiAddr, 0
$03F4	$008A			MOVWF	PCLATH
$03F5	$082F			MOVF	___DoICPLoAddr, 0
$03F6	$0082			MOVWF	PCL
$03F7	$0008			RETURN
$03F8	$	_Lcd8_Chr:
$03F8	$2C0A			GOTO	L_Lcd8_Chr_4
$03F9	$	L_Lcd8_Chr_6:
$03F9	$3080			MOVLW	128
$03FA	$1703			BSF	STATUS, RP1
$03FB	$1283			BCF	STATUS, RP0
$03FC	$00DB			MOVWF	FARG_Lcd8_Chr+0
$03FD	$2C1D			GOTO	L_Lcd8_Chr_5
$03FE	$	L_Lcd8_Chr_7:
$03FE	$30C0			MOVLW	192
$03FF	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0400	$2C1D			GOTO	L_Lcd8_Chr_5
$0401	$	L_Lcd8_Chr_8:
$0401	$3094			MOVLW	148
$0402	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0403	$2C1D			GOTO	L_Lcd8_Chr_5
$0404	$	L_Lcd8_Chr_9:
$0404	$30D4			MOVLW	212
$0405	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0406	$2C1D			GOTO	L_Lcd8_Chr_5
$0407	$	L_Lcd8_Chr_10:
$0407	$3080			MOVLW	128
$0408	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0409	$2C1D			GOTO	L_Lcd8_Chr_5
$040A	$	L_Lcd8_Chr_4:
$040A	$1703			BSF	STATUS, RP1
$040B	$1283			BCF	STATUS, RP0
$040C	$085B			MOVF	FARG_Lcd8_Chr+0, 0
$040D	$3A01			XORLW	1
$040E	$1903			BTFSC	STATUS, Z
$040F	$2BF9			GOTO	L_Lcd8_Chr_6
$0410	$085B			MOVF	FARG_Lcd8_Chr+0, 0
$0411	$3A02			XORLW	2
$0412	$1903			BTFSC	STATUS, Z
$0413	$2BFE			GOTO	L_Lcd8_Chr_7
$0414	$085B			MOVF	FARG_Lcd8_Chr+0, 0
$0415	$3A03			XORLW	3
$0416	$1903			BTFSC	STATUS, Z
$0417	$2C01			GOTO	L_Lcd8_Chr_8
$0418	$085B			MOVF	FARG_Lcd8_Chr+0, 0
$0419	$3A04			XORLW	4
$041A	$1903			BTFSC	STATUS, Z
$041B	$2C04			GOTO	L_Lcd8_Chr_9
$041C	$2C07			GOTO	L_Lcd8_Chr_10
$041D	$	L_Lcd8_Chr_5:
$041D	$035C			DECF	FARG_Lcd8_Chr+1, 0
$041E	$00F0			MOVWF	STACK_0
$041F	$085B			MOVF	FARG_Lcd8_Chr+0, 0
$0420	$07F0			ADDWF	STACK_0, 1
$0421	$0870			MOVF	STACK_0, 0
$0422	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0423	$0870			MOVF	STACK_0, 0
$0424	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0425	$23BB			CALL	_Lcd8_Cmd
$0426	$1703			BSF	STATUS, RP1
$0427	$01AC			CLRF	_com, 1
$0428	$085D			MOVF	FARG_Lcd8_Chr+2, 0
$0429	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$042A	$23BB			CALL	_Lcd8_Cmd
$042B	$3001			MOVLW	1
$042C	$1703			BSF	STATUS, RP1
$042D	$00AC			MOVWF	_com
$042E	$0008			RETURN
$042F	$	_Usart_Write:
$042F	$	L_Usart_Write_3:
$042F	$3000			MOVLW	0
$0430	$1303			BCF	STATUS, RP1
$0431	$1683			BSF	STATUS, RP0
$0432	$1898			BTFSC	TXSTA, 1
$0433	$3001			MOVLW	1
$0434	$00F1			MOVWF	STACK_1
$0435	$0871			MOVF	STACK_1, 0
$0436	$3A00			XORLW	0
$0437	$1D03			BTFSS	STATUS, Z
$0438	$2C3B			GOTO	L_Usart_Write_4
$0439	$0000			NOP
$043A	$2C2F			GOTO	L_Usart_Write_3
$043B	$	L_Usart_Write_4:
$043B	$1703			BSF	STATUS, RP1
$043C	$1283			BCF	STATUS, RP0
$043D	$085B			MOVF	FARG_Usart_Write+0, 0
$043E	$1303			BCF	STATUS, RP1
$043F	$0099			MOVWF	TXREG
$0440	$0008			RETURN
$0441	$	_Mul_32x32_U:
$0441	$1303			BCF	STATUS, RP1
$0442	$1283			BCF	STATUS, RP0
$0443	$3022			MOVLW	34
$0444	$00FC			MOVWF	STACK_12
$0445	$01F8			CLRF	STACK_8
$0446	$01F9			CLRF	STACK_9
$0447	$01FA			CLRF	STACK_10
$0448	$01FB			CLRF	STACK_11
$0449	$	_NEXT:
$0449	$03FC			DECF	STACK_12, F
$044A	$1903			BTFSC	STATUS, Z
$044B	$2C77			GOTO	_EXIT2
$044C	$1003			BCF	STATUS, C
$044D	$	_LOOP:
$044D	$0CFB			RRF	STACK_11, F
$044E	$0CFA			RRF	STACK_10, F
$044F	$0CF9			RRF	STACK_9, F
$0450	$0CF8			RRF	STACK_8, F
$0451	$0CF3			RRF	STACK_3, F
$0452	$0CF2			RRF	STACK_2, F
$0453	$0CF1			RRF	STACK_1, F
$0454	$0CF0			RRF	STACK_0, F
$0455	$1C03			BTFSS	STATUS, C
$0456	$2C49			GOTO	_NEXT
$0457	$03FC			DECF	STACK_12, F
$0458	$1903			BTFSC	STATUS, Z
$0459	$2C69			GOTO	_EXIT1
$045A	$0874			MOVF	STACK_4, W
$045B	$07F8			ADDWF	STACK_8, F
$045C	$0875			MOVF	STACK_5, W
$045D	$1803			BTFSC	STATUS, C
$045E	$0F75			INCFSZ	STACK_5, W
$045F	$07F9			ADDWF	STACK_9, F
$0460	$0876			MOVF	STACK_6, W
$0461	$1803			BTFSC	STATUS, C
$0462	$0F76			INCFSZ	STACK_6, W
$0463	$07FA			ADDWF	STACK_10, F
$0464	$0877			MOVF	STACK_7, W
$0465	$1803			BTFSC	STATUS, C
$0466	$0F77			INCFSZ	STACK_7, W
$0467	$07FB			ADDWF	STACK_11, F
$0468	$2C4D			GOTO	_LOOP
$0469	$	_EXIT1:
$0469	$0874			MOVF	STACK_4, W
$046A	$07F8			ADDWF	STACK_8, F
$046B	$0875			MOVF	STACK_5, W
$046C	$1803			BTFSC	STATUS, C
$046D	$0F75			INCFSZ	STACK_5, W
$046E	$07F9			ADDWF	STACK_9, F
$046F	$0876			MOVF	STACK_6, W
$0470	$1803			BTFSC	STATUS, C
$0471	$0F76			INCFSZ	STACK_6, W
$0472	$07FA			ADDWF	STACK_10, F
$0473	$0877			MOVF	STACK_7, W
$0474	$1803			BTFSC	STATUS, C
$0475	$0F77			INCFSZ	STACK_7, W
$0476	$07FB			ADDWF	STACK_11, F
$0477	$	_EXIT2:
$0477	$0008			RETURN
$0478	$	_Lcd8_Init:
$0478	$23A3			CALL	_Delay_5500us
$0479	$23A3			CALL	_Delay_5500us
$047A	$23A3			CALL	_Delay_5500us
$047B	$1703			BSF	STATUS, RP1
$047C	$0857			MOVF	FARG_Lcd8_Init+1, 0
$047D	$00AA			MOVWF	lcd8bit_DataAddress
$047E	$0857			MOVF	FARG_Lcd8_Init+1, 0
$047F	$0084			MOVWF	FSR
$0480	$1784			BSF	FSR, 7
$0481	$0180			CLRF	INDF, 1
$0482	$0856			MOVF	FARG_Lcd8_Init+0, 0
$0483	$00AB			MOVWF	lcd8bit_CtrlAddress
$0484	$0856			MOVF	FARG_Lcd8_Init+0, 0
$0485	$0084			MOVWF	FSR
$0486	$1280			BCF	INDF, __LCD8_RW
$0487	$1784			BSF	FSR, 7
$0488	$1200			BCF	INDF, __LCD8_RS
$0489	$1280			BCF	INDF, __LCD8_RW
$048A	$1300			BCF	INDF, __LCD8_ENABLE
$048B	$1384			BCF	FSR, 7
$048C	$3001			MOVLW	1
$048D	$00AC			MOVWF	_com
$048E	$3030			MOVLW	48
$048F	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0490	$23BB			CALL	_Lcd8_Cmd
$0491	$3030			MOVLW	48
$0492	$1703			BSF	STATUS, RP1
$0493	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0494	$23BB			CALL	_Lcd8_Cmd
$0495	$3030			MOVLW	48
$0496	$1703			BSF	STATUS, RP1
$0497	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0498	$23BB			CALL	_Lcd8_Cmd
$0499	$3038			MOVLW	56
$049A	$1703			BSF	STATUS, RP1
$049B	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$049C	$23BB			CALL	_Lcd8_Cmd
$049D	$3008			MOVLW	8
$049E	$1703			BSF	STATUS, RP1
$049F	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$04A0	$23BB			CALL	_Lcd8_Cmd
$04A1	$3001			MOVLW	1
$04A2	$1703			BSF	STATUS, RP1
$04A3	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$04A4	$23BB			CALL	_Lcd8_Cmd
$04A5	$3006			MOVLW	6
$04A6	$1703			BSF	STATUS, RP1
$04A7	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$04A8	$23BB			CALL	_Lcd8_Cmd
$04A9	$300C			MOVLW	12
$04AA	$1703			BSF	STATUS, RP1
$04AB	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$04AC	$23BB			CALL	_Lcd8_Cmd
$04AD	$0008			RETURN
$04AE	$	_ProgramCustomChars:
;lcd.h,1 :: 		void ProgramCustomChars()
;lcd.h,4 :: 		Lcd8_Cmd (64);
$04AE	$3040			MOVLW	64
$04AF	$1703			BSF	STATUS, RP1
$04B0	$1283			BCF	STATUS, RP0
$04B1	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$04B2	$23BB			CALL	_Lcd8_Cmd
;lcd.h,8 :: 		Lcd8_Chr_Cp(0b00000100);
$04B3	$3004			MOVLW	4
$04B4	$1703			BSF	STATUS, RP1
$04B5	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04B6	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,9 :: 		Lcd8_Chr_Cp(0b00001110);
$04B7	$300E			MOVLW	14
$04B8	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04B9	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,10 :: 		Lcd8_Chr_Cp(0b00010101);
$04BA	$3015			MOVLW	21
$04BB	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04BC	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,11 :: 		Lcd8_Chr_Cp(0b00000100);
$04BD	$3004			MOVLW	4
$04BE	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04BF	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,12 :: 		Lcd8_Chr_Cp(0b00000100);
$04C0	$3004			MOVLW	4
$04C1	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04C2	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,13 :: 		Lcd8_Chr_Cp(0b00000100);
$04C3	$3004			MOVLW	4
$04C4	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04C5	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,14 :: 		Lcd8_Chr_Cp(0b00000100);
$04C6	$3004			MOVLW	4
$04C7	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04C8	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,15 :: 		Lcd8_Chr_Cp(0b00000000);
$04C9	$01DB			CLRF	FARG_Lcd8_Chr_CP+0, 1
$04CA	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,19 :: 		Lcd8_Chr_Cp(0b00000000);
$04CB	$01DB			CLRF	FARG_Lcd8_Chr_CP+0, 1
$04CC	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,20 :: 		Lcd8_Chr_Cp(0b00000100);
$04CD	$3004			MOVLW	4
$04CE	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04CF	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,21 :: 		Lcd8_Chr_Cp(0b00000100);
$04D0	$3004			MOVLW	4
$04D1	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04D2	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,22 :: 		Lcd8_Chr_Cp(0b00000100);
$04D3	$3004			MOVLW	4
$04D4	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04D5	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,23 :: 		Lcd8_Chr_Cp(0b00000100);
$04D6	$3004			MOVLW	4
$04D7	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04D8	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,24 :: 		Lcd8_Chr_Cp(0b00010101);
$04D9	$3015			MOVLW	21
$04DA	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04DB	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,25 :: 		Lcd8_Chr_Cp(0b00001110);
$04DC	$300E			MOVLW	14
$04DD	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04DE	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,26 :: 		Lcd8_Chr_Cp(0b00000100);
$04DF	$3004			MOVLW	4
$04E0	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04E1	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,30 :: 		Lcd8_Chr_Cp(0b00011111);
$04E2	$301F			MOVLW	31
$04E3	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04E4	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,31 :: 		Lcd8_Chr_Cp(0b00010001);
$04E5	$3011			MOVLW	17
$04E6	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04E7	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,32 :: 		Lcd8_Chr_Cp(0b00010001);
$04E8	$3011			MOVLW	17
$04E9	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04EA	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,33 :: 		Lcd8_Chr_Cp(0b00010001);
$04EB	$3011			MOVLW	17
$04EC	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04ED	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,34 :: 		Lcd8_Chr_Cp(0b00010001);
$04EE	$3011			MOVLW	17
$04EF	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04F0	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,35 :: 		Lcd8_Chr_Cp(0b00010001);
$04F1	$3011			MOVLW	17
$04F2	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04F3	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,36 :: 		Lcd8_Chr_Cp(0b00010001);
$04F4	$3011			MOVLW	17
$04F5	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04F6	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,37 :: 		Lcd8_Chr_Cp(0b00011111);
$04F7	$301F			MOVLW	31
$04F8	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04F9	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,41 :: 		Lcd8_Chr_Cp(0b00011111);
$04FA	$301F			MOVLW	31
$04FB	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04FC	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,42 :: 		Lcd8_Chr_Cp(0b00011111);
$04FD	$301F			MOVLW	31
$04FE	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$04FF	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,43 :: 		Lcd8_Chr_Cp(0b00011111);
$0500	$301F			MOVLW	31
$0501	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$0502	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,44 :: 		Lcd8_Chr_Cp(0b00011111);
$0503	$301F			MOVLW	31
$0504	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$0505	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,45 :: 		Lcd8_Chr_Cp(0b00011111);
$0506	$301F			MOVLW	31
$0507	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$0508	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,46 :: 		Lcd8_Chr_Cp(0b00011111);
$0509	$301F			MOVLW	31
$050A	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$050B	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,47 :: 		Lcd8_Chr_Cp(0b00011111);
$050C	$301F			MOVLW	31
$050D	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$050E	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,48 :: 		Lcd8_Chr_Cp(0b00011111);
$050F	$301F			MOVLW	31
$0510	$00DB			MOVWF	FARG_Lcd8_Chr_CP+0
$0511	$23E7			CALL	_Lcd8_Chr_CP
;lcd.h,50 :: 		Lcd8_Cmd(Lcd_Return_Home);
$0512	$3002			MOVLW	2
$0513	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0514	$23BB			CALL	_Lcd8_Cmd
;lcd.h,51 :: 		}
$0515	$0008			RETURN
$0516	$	_strcp_c:
;functions.h,1 :: 		void strcp_c(char *str1, const char *cstr2)
;functions.h,5 :: 		unsigned short i = 0;
$0516	$1703			BSF	STATUS, RP1
$0517	$1283			BCF	STATUS, RP0
$0518	$01D9			CLRF	strcp_c_i_L0, 1
;functions.h,7 :: 		do
$0519	$	L_strcp_c_0:
;functions.h,9 :: 		str1[i] = cstr2[i];
$0519	$0859			MOVF	strcp_c_i_L0, 0
$051A	$0756			ADDWF	FARG_strcp_c+0, 0
$051B	$00F2			MOVWF	STACK_2
$051C	$0859			MOVF	strcp_c_i_L0, 0
$051D	$0757			ADDWF	FARG_strcp_c+1, 0
$051E	$00F0			MOVWF	STACK_0
$051F	$0858			MOVF	FARG_strcp_c+2, 0
$0520	$1803			BTFSC	STATUS, C
$0521	$3F01			ADDLW	1
$0522	$00F1			MOVWF	STACK_0+1
$0523	$0870			MOVF	STACK_0, 0
$0524	$00AF			MOVWF	___DoICPLoAddr
$0525	$0871			MOVF	STACK_0+1, 0
$0526	$00AE			MOVWF	___DoICPHiAddr
$0527	$080A			MOVF	PCLATH, 0
$0528	$00AD			MOVWF	___DoICPSavePCLATH
$0529	$23F1			CALL	_____DoICP
$052A	$00F0			MOVWF	STACK_0
$052B	$082D			MOVF	___DoICPSavePCLATH, 0
$052C	$008A			MOVWF	PCLATH
$052D	$0872			MOVF	STACK_2, 0
$052E	$0084			MOVWF	FSR
$052F	$0870			MOVF	STACK_0, 0
$0530	$0080			MOVWF	INDF
;functions.h,11 :: 		while (str1[i++]);
$0531	$0859			MOVF	strcp_c_i_L0, 0
$0532	$00F0			MOVWF	STACK_0
$0533	$0AD9			INCF	strcp_c_i_L0, 1
$0534	$0870			MOVF	STACK_0, 0
$0535	$0756			ADDWF	FARG_strcp_c+0, 0
$0536	$0084			MOVWF	FSR
$0537	$0800			MOVF	INDF, 0
$0538	$00F0			MOVWF	STACK_0
$0539	$0870			MOVF	STACK_0, 0
$053A	$1D03			BTFSS	STATUS, Z
$053B	$2D19			GOTO	L_strcp_c_0
$053C	$	L_strcp_c_1:
;functions.h,12 :: 		}
$053C	$0008			RETURN
$053D	$	table___lcd1_default:
;main.c,5 :: 		#define FIRMWARE_VERSION "2.0\n"
$053D	$3452			RETLW	82
$053E	$3465			RETLW	101
$053F	$3461			RETLW	97
$0540	$3464			RETLW	100
$0541	$3479			RETLW	121
$0542	$3400			RETLW	0
$0543	$0008			RETURN
$0544	$	table___lcd2_default:
;main.c,6 :: 		
$0544	$3420			RETLW	32
$0545	$3400			RETLW	0
$0546	$0008			RETURN
$0547	$	_strcpy:
$0547	$1703			BSF	STATUS, RP1
$0548	$1283			BCF	STATUS, RP0
$0549	$0856			MOVF	FARG_strcpy+0, 0
$054A	$00D8			MOVWF	strcpy_cp_L0
$054B	$	L_strcpy_31:
$054B	$0858			MOVF	strcpy_cp_L0, 0
$054C	$00F1			MOVWF	STACK_1
$054D	$0AD8			INCF	strcpy_cp_L0, 1
$054E	$0857			MOVF	FARG_strcpy+1, 0
$054F	$0084			MOVWF	FSR
$0550	$0AD7			INCF	FARG_strcpy+1, 1
$0551	$0800			MOVF	INDF, 0
$0552	$00F0			MOVWF	STACK_0
$0553	$0871			MOVF	STACK_1, 0
$0554	$0084			MOVWF	FSR
$0555	$0870			MOVF	STACK_0, 0
$0556	$0080			MOVWF	INDF
$0557	$0871			MOVF	STACK_1, 0
$0558	$0084			MOVWF	FSR
$0559	$0800			MOVF	INDF, 0
$055A	$00F0			MOVWF	STACK_0
$055B	$0870			MOVF	STACK_0, 0
$055C	$1D03			BTFSS	STATUS, Z
$055D	$2D4B			GOTO	L_strcpy_31
$055E	$	L_strcpy_32:
$055E	$0856			MOVF	FARG_strcpy+0, 0
$055F	$00F0			MOVWF	STACK_0
$0560	$0008			RETURN
$0561	$	_Lcd8_Out:
$0561	$1703			BSF	STATUS, RP1
$0562	$1283			BCF	STATUS, RP0
$0563	$01D9			CLRF	Lcd8_Out_i_L0, 1
$0564	$0858			MOVF	FARG_Lcd8_Out+2, 0
$0565	$0084			MOVWF	FSR
$0566	$0800			MOVF	INDF, 0
$0567	$00DA			MOVWF	Lcd8_Out_j_L0
$0568	$	L_Lcd8_Out_11:
$0568	$085A			MOVF	Lcd8_Out_j_L0, 0
$0569	$1903			BTFSC	STATUS, Z
$056A	$2D7D			GOTO	L_Lcd8_Out_12
$056B	$0856			MOVF	FARG_Lcd8_Out+0, 0
$056C	$00DB			MOVWF	FARG_Lcd8_Chr+0
$056D	$0859			MOVF	Lcd8_Out_i_L0, 0
$056E	$0757			ADDWF	FARG_Lcd8_Out+1, 0
$056F	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0570	$0859			MOVF	Lcd8_Out_i_L0, 0
$0571	$0758			ADDWF	FARG_Lcd8_Out+2, 0
$0572	$0084			MOVWF	FSR
$0573	$0800			MOVF	INDF, 0
$0574	$00DD			MOVWF	FARG_Lcd8_Chr+2
$0575	$23F8			CALL	_Lcd8_Chr
$0576	$0AD9			INCF	Lcd8_Out_i_L0, 1
$0577	$0859			MOVF	Lcd8_Out_i_L0, 0
$0578	$0758			ADDWF	FARG_Lcd8_Out+2, 0
$0579	$0084			MOVWF	FSR
$057A	$0800			MOVF	INDF, 0
$057B	$00DA			MOVWF	Lcd8_Out_j_L0
$057C	$2D68			GOTO	L_Lcd8_Out_11
$057D	$	L_Lcd8_Out_12:
$057D	$0008			RETURN
$057E	$	_strcmp_c:
;functions.h,14 :: 		short strcmp_c(char *str1, const char *str2)
;functions.h,18 :: 		short i = 0;
$057E	$1703			BSF	STATUS, RP1
$057F	$1283			BCF	STATUS, RP0
$0580	$01D9			CLRF	strcmp_c_i_L0, 1
;functions.h,20 :: 		for (;(i==0) || (str2[i-1]!='\n');i++)
$0581	$	L_strcmp_c_2:
$0581	$0859			MOVF	strcmp_c_i_L0, 0
$0582	$3A00			XORLW	0
$0583	$1903			BTFSC	STATUS, Z
$0584	$2DA3			GOTO	L34_ex_L_strcmp_c_3
$0585	$3001			MOVLW	1
$0586	$0259			SUBWF	strcmp_c_i_L0, 0
$0587	$00F0			MOVWF	STACK_0
$0588	$01F1			CLRF	STACK_0+1
$0589	$1C03			BTFSS	STATUS, C
$058A	$03F1			DECF	STACK_0+1, 1
$058B	$30FF			MOVLW	255
$058C	$1FD9			BTFSS	strcmp_c_i_L0, 7
$058D	$3000			MOVLW	0
$058E	$07F1			ADDWF	STACK_0+1, 1
$058F	$0857			MOVF	FARG_strcmp_c+1, 0
$0590	$07F0			ADDWF	STACK_0, 1
$0591	$0858			MOVF	FARG_strcmp_c+2, 0
$0592	$1803			BTFSC	STATUS, C
$0593	$3F01			ADDLW	1
$0594	$07F1			ADDWF	STACK_0+1, 1
$0595	$0870			MOVF	STACK_0, 0
$0596	$00AF			MOVWF	___DoICPLoAddr
$0597	$0871			MOVF	STACK_0+1, 0
$0598	$00AE			MOVWF	___DoICPHiAddr
$0599	$080A			MOVF	PCLATH, 0
$059A	$00AD			MOVWF	___DoICPSavePCLATH
$059B	$23F1			CALL	_____DoICP
$059C	$00F2			MOVWF	STACK_2
$059D	$082D			MOVF	___DoICPSavePCLATH, 0
$059E	$008A			MOVWF	PCLATH
$059F	$0872			MOVF	STACK_2, 0
$05A0	$3A0A			XORLW	10
$05A1	$1903			BTFSC	STATUS, Z
$05A2	$2DC1			GOTO	L_strcmp_c_3
$05A3	$	L34_ex_L_strcmp_c_3:
;functions.h,22 :: 		if (str1[i] != str2[i]) return 0;
$05A3	$0859			MOVF	strcmp_c_i_L0, 0
$05A4	$0756			ADDWF	FARG_strcmp_c+0, 0
$05A5	$0084			MOVWF	FSR
$05A6	$0800			MOVF	INDF, 0
$05A7	$00F3			MOVWF	STACK_3
$05A8	$0859			MOVF	strcmp_c_i_L0, 0
$05A9	$0757			ADDWF	FARG_strcmp_c+1, 0
$05AA	$00F0			MOVWF	STACK_0
$05AB	$0858			MOVF	FARG_strcmp_c+2, 0
$05AC	$1803			BTFSC	STATUS, C
$05AD	$3F01			ADDLW	1
$05AE	$00F1			MOVWF	STACK_0+1
$05AF	$0870			MOVF	STACK_0, 0
$05B0	$00AF			MOVWF	___DoICPLoAddr
$05B1	$0871			MOVF	STACK_0+1, 0
$05B2	$00AE			MOVWF	___DoICPHiAddr
$05B3	$080A			MOVF	PCLATH, 0
$05B4	$00AD			MOVWF	___DoICPSavePCLATH
$05B5	$23F1			CALL	_____DoICP
$05B6	$00F2			MOVWF	STACK_2
$05B7	$082D			MOVF	___DoICPSavePCLATH, 0
$05B8	$008A			MOVWF	PCLATH
$05B9	$0873			MOVF	STACK_3, 0
$05BA	$0672			XORWF	STACK_2, 0
$05BB	$1903			BTFSC	STATUS, Z
$05BC	$2DBF			GOTO	L_strcmp_c_7
$05BD	$01F0			CLRF	STACK_0, 1
$05BE	$0008			RETURN
$05BF	$	L_strcmp_c_7:
;functions.h,23 :: 		}
$05BF	$	L_strcmp_c_4:
;functions.h,20 :: 		for (;(i==0) || (str2[i-1]!='\n');i++)
$05BF	$0AD9			INCF	strcmp_c_i_L0, 1
;functions.h,23 :: 		}
$05C0	$2D81			GOTO	L_strcmp_c_2
$05C1	$	L_strcmp_c_3:
;functions.h,25 :: 		return 1;
$05C1	$3001			MOVLW	1
$05C2	$00F0			MOVWF	STACK_0
;functions.h,26 :: 		}
$05C3	$0008			RETURN
$05C4	$	table___cmd3:
;main.c,22 :: 		
$05C4	$3461			RETLW	97
$05C5	$3478			RETLW	120
$05C6	$3469			RETLW	105
$05C7	$3473			RETLW	115
$05C8	$3431			RETLW	49
$05C9	$3420			RETLW	32
$05CA	$346F			RETLW	111
$05CB	$346E			RETLW	110
$05CC	$340A			RETLW	10
$05CD	$3400			RETLW	0
$05CE	$0008			RETURN
$05CF	$	_DisplayScreen2:
;lcd.h,83 :: 		void DisplayScreen2()
;lcd.h,85 :: 		Lcd8_Cmd(LCD_CLEAR);
$05CF	$3001			MOVLW	1
$05D0	$1703			BSF	STATUS, RP1
$05D1	$1283			BCF	STATUS, RP0
$05D2	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$05D3	$23BB			CALL	_Lcd8_Cmd
;lcd.h,87 :: 		Lcd8_Chr(1,3,'1');
$05D4	$3001			MOVLW	1
$05D5	$1703			BSF	STATUS, RP1
$05D6	$00DB			MOVWF	FARG_Lcd8_Chr+0
$05D7	$3003			MOVLW	3
$05D8	$00DC			MOVWF	FARG_Lcd8_Chr+1
$05D9	$3031			MOVLW	49
$05DA	$00DD			MOVWF	FARG_Lcd8_Chr+2
$05DB	$23F8			CALL	_Lcd8_Chr
;lcd.h,89 :: 		Lcd8_Chr(1,8,'2');
$05DC	$3001			MOVLW	1
$05DD	$00DB			MOVWF	FARG_Lcd8_Chr+0
$05DE	$3008			MOVLW	8
$05DF	$00DC			MOVWF	FARG_Lcd8_Chr+1
$05E0	$3032			MOVLW	50
$05E1	$00DD			MOVWF	FARG_Lcd8_Chr+2
$05E2	$23F8			CALL	_Lcd8_Chr
;lcd.h,91 :: 		Lcd8_Chr(1,13,'3');
$05E3	$3001			MOVLW	1
$05E4	$00DB			MOVWF	FARG_Lcd8_Chr+0
$05E5	$300D			MOVLW	13
$05E6	$00DC			MOVWF	FARG_Lcd8_Chr+1
$05E7	$3033			MOVLW	51
$05E8	$00DD			MOVWF	FARG_Lcd8_Chr+2
$05E9	$23F8			CALL	_Lcd8_Chr
;lcd.h,93 :: 		LCD8_Chr(2, 2, (AXIS1_ENABLE_BIT) ? 3 : 2);
$05EA	$3002			MOVLW	2
$05EB	$00DB			MOVWF	FARG_Lcd8_Chr+0
$05EC	$3002			MOVLW	2
$05ED	$00DC			MOVWF	FARG_Lcd8_Chr+1
$05EE	$1303			BCF	STATUS, RP1
$05EF	$1683			BSF	STATUS, RP0
$05F0	$1CA0			BTFSS	_PORTA_V, 1
$05F1	$2DF5			GOTO	L_DisplayScreen2_32
$05F2	$3003			MOVLW	3
$05F3	$00F0			MOVWF	STACK_0
$05F4	$2DF7			GOTO	L_DisplayScreen2_33
$05F5	$	L_DisplayScreen2_32:
$05F5	$3002			MOVLW	2
$05F6	$00F0			MOVWF	STACK_0
$05F7	$	L_DisplayScreen2_33:
$05F7	$0870			MOVF	STACK_0, 0
$05F8	$1703			BSF	STATUS, RP1
$05F9	$1283			BCF	STATUS, RP0
$05FA	$00DD			MOVWF	FARG_Lcd8_Chr+2
$05FB	$23F8			CALL	_Lcd8_Chr
;lcd.h,95 :: 		LCD8_Chr(2, 4, (AXIS1_DIRECTION_BIT) ? 1 : 0);
$05FC	$3002			MOVLW	2
$05FD	$00DB			MOVWF	FARG_Lcd8_Chr+0
$05FE	$3004			MOVLW	4
$05FF	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0600	$1303			BCF	STATUS, RP1
$0601	$1683			BSF	STATUS, RP0
$0602	$1C20			BTFSS	_PORTA_V, 0
$0603	$2E07			GOTO	L_DisplayScreen2_34
$0604	$3001			MOVLW	1
$0605	$00F0			MOVWF	STACK_0
$0606	$2E08			GOTO	L_DisplayScreen2_35
$0607	$	L_DisplayScreen2_34:
$0607	$01F0			CLRF	STACK_0, 1
$0608	$	L_DisplayScreen2_35:
$0608	$0870			MOVF	STACK_0, 0
$0609	$1703			BSF	STATUS, RP1
$060A	$1283			BCF	STATUS, RP0
$060B	$00DD			MOVWF	FARG_Lcd8_Chr+2
$060C	$23F8			CALL	_Lcd8_Chr
;lcd.h,97 :: 		LCD8_Chr(2, 7, (AXIS2_ENABLE_BIT) ? 3 : 2);
$060D	$3002			MOVLW	2
$060E	$00DB			MOVWF	FARG_Lcd8_Chr+0
$060F	$3007			MOVLW	7
$0610	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0611	$1303			BCF	STATUS, RP1
$0612	$1683			BSF	STATUS, RP0
$0613	$1CA1			BTFSS	_PORTE_V, 1
$0614	$2E18			GOTO	L_DisplayScreen2_36
$0615	$3003			MOVLW	3
$0616	$00F0			MOVWF	STACK_0
$0617	$2E1A			GOTO	L_DisplayScreen2_37
$0618	$	L_DisplayScreen2_36:
$0618	$3002			MOVLW	2
$0619	$00F0			MOVWF	STACK_0
$061A	$	L_DisplayScreen2_37:
$061A	$0870			MOVF	STACK_0, 0
$061B	$1703			BSF	STATUS, RP1
$061C	$1283			BCF	STATUS, RP0
$061D	$00DD			MOVWF	FARG_Lcd8_Chr+2
$061E	$23F8			CALL	_Lcd8_Chr
;lcd.h,99 :: 		LCD8_Chr(2, 9, (AXIS2_DIRECTION_BIT) ? 1 : 0);
$061F	$3002			MOVLW	2
$0620	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0621	$3009			MOVLW	9
$0622	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0623	$1303			BCF	STATUS, RP1
$0624	$1683			BSF	STATUS, RP0
$0625	$1C21			BTFSS	_PORTE_V, 0
$0626	$2E2A			GOTO	L_DisplayScreen2_38
$0627	$3001			MOVLW	1
$0628	$00F0			MOVWF	STACK_0
$0629	$2E2B			GOTO	L_DisplayScreen2_39
$062A	$	L_DisplayScreen2_38:
$062A	$01F0			CLRF	STACK_0, 1
$062B	$	L_DisplayScreen2_39:
$062B	$0870			MOVF	STACK_0, 0
$062C	$1703			BSF	STATUS, RP1
$062D	$1283			BCF	STATUS, RP0
$062E	$00DD			MOVWF	FARG_Lcd8_Chr+2
$062F	$23F8			CALL	_Lcd8_Chr
;lcd.h,101 :: 		LCD8_Chr(2, 12, (AXIS3_ENABLE_BIT) ? 3 : 2);
$0630	$3002			MOVLW	2
$0631	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0632	$300C			MOVLW	12
$0633	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0634	$1303			BCF	STATUS, RP1
$0635	$1C87			BTFSS	PORTC, 1
$0636	$2E3A			GOTO	L_DisplayScreen2_40
$0637	$3003			MOVLW	3
$0638	$00F0			MOVWF	STACK_0
$0639	$2E3C			GOTO	L_DisplayScreen2_41
$063A	$	L_DisplayScreen2_40:
$063A	$3002			MOVLW	2
$063B	$00F0			MOVWF	STACK_0
$063C	$	L_DisplayScreen2_41:
$063C	$0870			MOVF	STACK_0, 0
$063D	$1703			BSF	STATUS, RP1
$063E	$00DD			MOVWF	FARG_Lcd8_Chr+2
$063F	$23F8			CALL	_Lcd8_Chr
;lcd.h,103 :: 		LCD8_Chr(2, 14, (AXIS3_DIRECTION_BIT) ? 1 : 0);
$0640	$3002			MOVLW	2
$0641	$00DB			MOVWF	FARG_Lcd8_Chr+0
$0642	$300E			MOVLW	14
$0643	$00DC			MOVWF	FARG_Lcd8_Chr+1
$0644	$1303			BCF	STATUS, RP1
$0645	$1C07			BTFSS	PORTC, 0
$0646	$2E4A			GOTO	L_DisplayScreen2_42
$0647	$3001			MOVLW	1
$0648	$00F0			MOVWF	STACK_0
$0649	$2E4B			GOTO	L_DisplayScreen2_43
$064A	$	L_DisplayScreen2_42:
$064A	$01F0			CLRF	STACK_0, 1
$064B	$	L_DisplayScreen2_43:
$064B	$0870			MOVF	STACK_0, 0
$064C	$1703			BSF	STATUS, RP1
$064D	$00DD			MOVWF	FARG_Lcd8_Chr+2
$064E	$23F8			CALL	_Lcd8_Chr
;lcd.h,105 :: 		lcd_screen = 2;
$064F	$3002			MOVLW	2
$0650	$00B0			MOVWF	_lcd_screen
;lcd.h,106 :: 		}
$0651	$0008			RETURN
$0652	$	_SendConstLine:
;functions.h,56 :: 		void SendConstLine( const char *l)
;functions.h,62 :: 		for (t=0; l[t]!= '\n'; t++) Usart_Write(l[t]);
$0652	$1703			BSF	STATUS, RP1
$0653	$1283			BCF	STATUS, RP0
$0654	$01D8			CLRF	SendConstLine_t_L0
$0655	$01D9			CLRF	SendConstLine_t_L0+1
$0656	$	L_SendConstLine_17:
$0656	$0858			MOVF	SendConstLine_t_L0, 0
$0657	$0756			ADDWF	FARG_SendConstLine+0, 0
$0658	$00F0			MOVWF	STACK_0
$0659	$0857			MOVF	FARG_SendConstLine+1, 0
$065A	$1803			BTFSC	STATUS, C
$065B	$3F01			ADDLW	1
$065C	$0759			ADDWF	SendConstLine_t_L0+1, 0
$065D	$00F1			MOVWF	STACK_0+1
$065E	$0870			MOVF	STACK_0, 0
$065F	$00AF			MOVWF	___DoICPLoAddr
$0660	$0871			MOVF	STACK_0+1, 0
$0661	$00AE			MOVWF	___DoICPHiAddr
$0662	$080A			MOVF	PCLATH, 0
$0663	$00AD			MOVWF	___DoICPSavePCLATH
$0664	$23F1			CALL	_____DoICP
$0665	$00F2			MOVWF	STACK_2
$0666	$082D			MOVF	___DoICPSavePCLATH, 0
$0667	$008A			MOVWF	PCLATH
$0668	$0872			MOVF	STACK_2, 0
$0669	$3A0A			XORLW	10
$066A	$1903			BTFSC	STATUS, Z
$066B	$2E84			GOTO	L_SendConstLine_18
$066C	$0858			MOVF	SendConstLine_t_L0, 0
$066D	$0756			ADDWF	FARG_SendConstLine+0, 0
$066E	$00F0			MOVWF	STACK_0
$066F	$0857			MOVF	FARG_SendConstLine+1, 0
$0670	$1803			BTFSC	STATUS, C
$0671	$3F01			ADDLW	1
$0672	$0759			ADDWF	SendConstLine_t_L0+1, 0
$0673	$00F1			MOVWF	STACK_0+1
$0674	$0870			MOVF	STACK_0, 0
$0675	$00AF			MOVWF	___DoICPLoAddr
$0676	$0871			MOVF	STACK_0+1, 0
$0677	$00AE			MOVWF	___DoICPHiAddr
$0678	$080A			MOVF	PCLATH, 0
$0679	$00AD			MOVWF	___DoICPSavePCLATH
$067A	$23F1			CALL	_____DoICP
$067B	$00DB			MOVWF	FARG_Usart_Write+0
$067C	$082D			MOVF	___DoICPSavePCLATH, 0
$067D	$008A			MOVWF	PCLATH
$067E	$242F			CALL	_Usart_Write
$067F	$	L_SendConstLine_19:
$067F	$1703			BSF	STATUS, RP1
$0680	$0AD8			INCF	SendConstLine_t_L0, 1
$0681	$1903			BTFSC	STATUS, Z
$0682	$0AD9			INCF	SendConstLine_t_L0+1, 1
$0683	$2E56			GOTO	L_SendConstLine_17
$0684	$	L_SendConstLine_18:
;functions.h,64 :: 		Usart_Write(13);
$0684	$300D			MOVLW	13
$0685	$00DB			MOVWF	FARG_Usart_Write+0
$0686	$242F			CALL	_Usart_Write
;functions.h,66 :: 		Usart_Write(10);
$0687	$300A			MOVLW	10
$0688	$1703			BSF	STATUS, RP1
$0689	$00DB			MOVWF	FARG_Usart_Write+0
$068A	$242F			CALL	_Usart_Write
;functions.h,67 :: 		}
$068B	$0008			RETURN
$068C	$	table___msg1:
;main.c,14 :: 		
$068C	$344F			RETLW	79
$068D	$344B			RETLW	75
$068E	$340A			RETLW	10
$068F	$3400			RETLW	0
$0690	$0008			RETURN
$0691	$	table___cmd4:
;main.c,23 :: 		#include "Commands.h"
$0691	$3461			RETLW	97
$0692	$3478			RETLW	120
$0693	$3469			RETLW	105
$0694	$3473			RETLW	115
$0695	$3431			RETLW	49
$0696	$3420			RETLW	32
$0697	$346F			RETLW	111
$0698	$3466			RETLW	102
$0699	$3466			RETLW	102
$069A	$340A			RETLW	10
$069B	$3400			RETLW	0
$069C	$0008			RETURN
$069D	$	table___cmd1:
;main.c,20 :: 		
$069D	$3461			RETLW	97
$069E	$3478			RETLW	120
$069F	$3469			RETLW	105
$06A0	$3473			RETLW	115
$06A1	$3431			RETLW	49
$06A2	$3420			RETLW	32
$06A3	$342B			RETLW	43
$06A4	$340A			RETLW	10
$06A5	$3400			RETLW	0
$06A6	$0008			RETURN
$06A7	$	table___cmd2:
;main.c,21 :: 		#include "Go.h"
$06A7	$3461			RETLW	97
$06A8	$3478			RETLW	120
$06A9	$3469			RETLW	105
$06AA	$3473			RETLW	115
$06AB	$3431			RETLW	49
$06AC	$3420			RETLW	32
$06AD	$342D			RETLW	45
$06AE	$340A			RETLW	10
$06AF	$3400			RETLW	0
$06B0	$0008			RETURN
$0800	$	table___cmd27:
;main.c,53 :: 		b[b_i] = '\n';            // Append "New Line" character to command buffer
$0800	$3461			RETLW	97
$0801	$3478			RETLW	120
$0802	$3469			RETLW	105
$0803	$3473			RETLW	115
$0804	$3431			RETLW	49
$0805	$3420			RETLW	32
$0806	$3473			RETLW	115
$0807	$3474			RETLW	116
$0808	$3465			RETLW	101
$0809	$3470			RETLW	112
$080A	$3473			RETLW	115
$080B	$3420			RETLW	32
$080C	$3473			RETLW	115
$080D	$3477			RETLW	119
$080E	$3469			RETLW	105
$080F	$3474			RETLW	116
$0810	$3463			RETLW	99
$0811	$3468			RETLW	104
$0812	$3431			RETLW	49
$0813	$340A			RETLW	10
$0814	$3400			RETLW	0
$0815	$0008			RETURN
$0816	$	table___cmd28:
;main.c,54 :: 		
$0816	$3461			RETLW	97
$0817	$3478			RETLW	120
$0818	$3469			RETLW	105
$0819	$3473			RETLW	115
$081A	$3431			RETLW	49
$081B	$3420			RETLW	32
$081C	$3473			RETLW	115
$081D	$3474			RETLW	116
$081E	$3465			RETLW	101
$081F	$3470			RETLW	112
$0820	$3473			RETLW	115
$0821	$3420			RETLW	32
$0822	$3473			RETLW	115
$0823	$3477			RETLW	119
$0824	$3469			RETLW	105
$0825	$3474			RETLW	116
$0826	$3463			RETLW	99
$0827	$3468			RETLW	104
$0828	$3432			RETLW	50
$0829	$340A			RETLW	10
$082A	$3400			RETLW	0
$082B	$0008			RETURN
$082C	$	_str_starts_with:
;functions.h,28 :: 		short str_starts_with(char *str1, const char *str2)
;functions.h,32 :: 		short i = 0;
$082C	$1703			BSF	STATUS, RP1
$082D	$1283			BCF	STATUS, RP0
$082E	$01D9			CLRF	str_starts_with_i_L0, 1
;functions.h,34 :: 		for (;(i==0) || (str2[i]!='\n');i++)
$082F	$	L_str_starts_with_8:
$082F	$0859			MOVF	str_starts_with_i_L0, 0
$0830	$3A00			XORLW	0
$0831	$1903			BTFSC	STATUS, Z
$0832	$284A			GOTO	L58_ex_L_str_starts_with_9
$0833	$0859			MOVF	str_starts_with_i_L0, 0
$0834	$0757			ADDWF	FARG_str_starts_with+1, 0
$0835	$00F0			MOVWF	STACK_0
$0836	$0858			MOVF	FARG_str_starts_with+2, 0
$0837	$1803			BTFSC	STATUS, C
$0838	$3F01			ADDLW	1
$0839	$00F1			MOVWF	STACK_0+1
$083A	$0870			MOVF	STACK_0, 0
$083B	$00AF			MOVWF	___DoICPLoAddr
$083C	$0871			MOVF	STACK_0+1, 0
$083D	$00AE			MOVWF	___DoICPHiAddr
$083E	$080A			MOVF	PCLATH, 0
$083F	$00AD			MOVWF	___DoICPSavePCLATH
$0840	$118A			BCF	PCLATH, 3
$0841	$23F1			CALL	_____DoICP
$0842	$158A			BSF	PCLATH, 3
$0843	$00F2			MOVWF	STACK_2
$0844	$082D			MOVF	___DoICPSavePCLATH, 0
$0845	$008A			MOVWF	PCLATH
$0846	$0872			MOVF	STACK_2, 0
$0847	$3A0A			XORLW	10
$0848	$1903			BTFSC	STATUS, Z
$0849	$286A			GOTO	L_str_starts_with_9
$084A	$	L58_ex_L_str_starts_with_9:
;functions.h,36 :: 		if (str1[i] != str2[i]) return 0;
$084A	$0859			MOVF	str_starts_with_i_L0, 0
$084B	$0756			ADDWF	FARG_str_starts_with+0, 0
$084C	$0084			MOVWF	FSR
$084D	$0800			MOVF	INDF, 0
$084E	$00F3			MOVWF	STACK_3
$084F	$0859			MOVF	str_starts_with_i_L0, 0
$0850	$0757			ADDWF	FARG_str_starts_with+1, 0
$0851	$00F0			MOVWF	STACK_0
$0852	$0858			MOVF	FARG_str_starts_with+2, 0
$0853	$1803			BTFSC	STATUS, C
$0854	$3F01			ADDLW	1
$0855	$00F1			MOVWF	STACK_0+1
$0856	$0870			MOVF	STACK_0, 0
$0857	$00AF			MOVWF	___DoICPLoAddr
$0858	$0871			MOVF	STACK_0+1, 0
$0859	$00AE			MOVWF	___DoICPHiAddr
$085A	$080A			MOVF	PCLATH, 0
$085B	$00AD			MOVWF	___DoICPSavePCLATH
$085C	$118A			BCF	PCLATH, 3
$085D	$23F1			CALL	_____DoICP
$085E	$158A			BSF	PCLATH, 3
$085F	$00F2			MOVWF	STACK_2
$0860	$082D			MOVF	___DoICPSavePCLATH, 0
$0861	$008A			MOVWF	PCLATH
$0862	$0873			MOVF	STACK_3, 0
$0863	$0672			XORWF	STACK_2, 0
$0864	$1903			BTFSC	STATUS, Z
$0865	$2868			GOTO	L_str_starts_with_13
$0866	$01F0			CLRF	STACK_0, 1
$0867	$0008			RETURN
$0868	$	L_str_starts_with_13:
;functions.h,37 :: 		}
$0868	$	L_str_starts_with_10:
;functions.h,34 :: 		for (;(i==0) || (str2[i]!='\n');i++)
$0868	$0AD9			INCF	str_starts_with_i_L0, 1
;functions.h,37 :: 		}
$0869	$282F			GOTO	L_str_starts_with_8
$086A	$	L_str_starts_with_9:
;functions.h,39 :: 		return 1;
$086A	$3001			MOVLW	1
$086B	$00F0			MOVWF	STACK_0
;functions.h,40 :: 		}
$086C	$0008			RETURN
$086D	$	table___cmd5:
;main.c,24 :: 		
$086D	$3461			RETLW	97
$086E	$3478			RETLW	120
$086F	$3469			RETLW	105
$0870	$3473			RETLW	115
$0871	$3431			RETLW	49
$0872	$3420			RETLW	32
$0873	$3473			RETLW	115
$0874	$3474			RETLW	116
$0875	$3465			RETLW	101
$0876	$3470			RETLW	112
$0877	$3473			RETLW	115
$0878	$3420			RETLW	32
$0879	$340A			RETLW	10
$087A	$3400			RETLW	0
$087B	$0008			RETURN
$087C	$	_Extract_Numeric_Argument:
;functions.h,91 :: 		unsigned long Extract_Numeric_Argument(const int start)
;functions.h,93 :: 		sum = 0;
$087C	$1703			BSF	STATUS, RP1
$087D	$1283			BCF	STATUS, RP0
$087E	$01B1			CLRF	_sum
$087F	$01B2			CLRF	_sum+1
$0880	$01B3			CLRF	_sum+2
$0881	$01B4			CLRF	_sum+3
;functions.h,95 :: 		for (j=start; j<b_i; j++)
$0882	$0856			MOVF	FARG_Extract_Numeric_Argument+0, 0
$0883	$00B5			MOVWF	_j
$0884	$0857			MOVF	FARG_Extract_Numeric_Argument+1, 0
$0885	$00B6			MOVWF	_j+1
$0886	$	L_Extract_Numeric_Argument_29:
$0886	$3080			MOVLW	128
$0887	$0636			XORWF	_j+1, 0
$0888	$00F0			MOVWF	STACK_0
$0889	$3080			MOVLW	128
$088A	$0638			XORWF	_b_i+1, 0
$088B	$0270			SUBWF	STACK_0, 0
$088C	$1D03			BTFSS	STATUS, Z
$088D	$2890			GOTO	L_Extract_Numeric_Argument_205
$088E	$0837			MOVF	_b_i, 0
$088F	$0235			SUBWF	_j, 0
$0890	$	L_Extract_Numeric_Argument_205:
$0890	$1803			BTFSC	STATUS, C
$0891	$28C8			GOTO	L_Extract_Numeric_Argument_30
;functions.h,97 :: 		sum = sum * 10 + (b[j] - 48);
$0892	$0831			MOVF	_sum, 0
$0893	$00F0			MOVWF	STACK_0
$0894	$0832			MOVF	_sum+1, 0
$0895	$00F1			MOVWF	STACK_0+1
$0896	$0833			MOVF	_sum+2, 0
$0897	$00F2			MOVWF	STACK_0+2
$0898	$0834			MOVF	_sum+3, 0
$0899	$00F3			MOVWF	STACK_0+3
$089A	$300A			MOVLW	10
$089B	$00F4			MOVWF	STACK_4
$089C	$01F5			CLRF	STACK_4+1
$089D	$01F6			CLRF	STACK_4+2
$089E	$01F7			CLRF	STACK_4+3
$089F	$118A			BCF	PCLATH, 3
$08A0	$2441			CALL	_mul_32x32_u
$08A1	$158A			BSF	PCLATH, 3
$08A2	$1703			BSF	STATUS, RP1
$08A3	$0835			MOVF	_j, 0
$08A4	$3F20			ADDLW	_b
$08A5	$0084			MOVWF	FSR
$08A6	$0800			MOVF	INDF, 0
$08A7	$00F4			MOVWF	STACK_4
$08A8	$3030			MOVLW	48
$08A9	$02F4			SUBWF	STACK_4, 1
$08AA	$01F5			CLRF	STACK_4+1
$08AB	$1C03			BTFSS	STATUS, C
$08AC	$03F5			DECF	STACK_4+1, 1
$08AD	$0874			MOVF	STACK_4, 0
$08AE	$00B1			MOVWF	_sum
$08AF	$0875			MOVF	STACK_4+1, 0
$08B0	$00B2			MOVWF	_sum+1
$08B1	$3000			MOVLW	0
$08B2	$1BB2			BTFSC	_sum+1, 7
$08B3	$30FF			MOVLW	255
$08B4	$00B3			MOVWF	_sum+2
$08B5	$00B4			MOVWF	_sum+3
$08B6	$0870			MOVF	STACK_0, 0
$08B7	$07B1			ADDWF	_sum, 1
$08B8	$0871			MOVF	STACK_0+1, 0
$08B9	$1803			BTFSC	STATUS, C
$08BA	$0F71			INCFSZ	STACK_0+1, 0
$08BB	$07B2			ADDWF	_sum+1, 1
$08BC	$0872			MOVF	STACK_0+2, 0
$08BD	$1803			BTFSC	STATUS, C
$08BE	$0F72			INCFSZ	STACK_0+2, 0
$08BF	$07B3			ADDWF	_sum+2, 1
$08C0	$0873			MOVF	STACK_0+3, 0
$08C1	$1803			BTFSC	STATUS, C
$08C2	$0F73			INCFSZ	STACK_0+3, 0
$08C3	$07B4			ADDWF	_sum+3, 1
;functions.h,98 :: 		}
$08C4	$	L_Extract_Numeric_Argument_31:
;functions.h,95 :: 		for (j=start; j<b_i; j++)
$08C4	$0AB5			INCF	_j, 1
$08C5	$1903			BTFSC	STATUS, Z
$08C6	$0AB6			INCF	_j+1, 1
;functions.h,98 :: 		}
$08C7	$2886			GOTO	L_Extract_Numeric_Argument_29
$08C8	$	L_Extract_Numeric_Argument_30:
;functions.h,100 :: 		return sum;
$08C8	$0831			MOVF	_sum, 0
$08C9	$00F0			MOVWF	STACK_0
$08CA	$0832			MOVF	_sum+1, 0
$08CB	$00F1			MOVWF	STACK_0+1
$08CC	$0833			MOVF	_sum+2, 0
$08CD	$00F2			MOVWF	STACK_0+2
$08CE	$0834			MOVF	_sum+3, 0
$08CF	$00F3			MOVWF	STACK_0+3
;functions.h,102 :: 		}
$08D0	$0008			RETURN
$08D1	$	table___cmd35:
;main.c,65 :: 		}
$08D1	$3461			RETLW	97
$08D2	$3478			RETLW	120
$08D3	$3469			RETLW	105
$08D4	$3473			RETLW	115
$08D5	$3431			RETLW	49
$08D6	$3420			RETLW	32
$08D7	$3470			RETLW	112
$08D8	$3465			RETLW	101
$08D9	$3472			RETLW	114
$08DA	$3469			RETLW	105
$08DB	$346F			RETLW	111
$08DC	$3464			RETLW	100
$08DD	$3420			RETLW	32
$08DE	$3473			RETLW	115
$08DF	$3474			RETLW	116
$08E0	$3461			RETLW	97
$08E1	$3472			RETLW	114
$08E2	$3474			RETLW	116
$08E3	$3420			RETLW	32
$08E4	$340A			RETLW	10
$08E5	$3400			RETLW	0
$08E6	$0008			RETURN
$08E7	$	table___cmd36:
;main.c,66 :: 		
$08E7	$3461			RETLW	97
$08E8	$3478			RETLW	120
$08E9	$3469			RETLW	105
$08EA	$3473			RETLW	115
$08EB	$3431			RETLW	49
$08EC	$3420			RETLW	32
$08ED	$3470			RETLW	112
$08EE	$3465			RETLW	101
$08EF	$3472			RETLW	114
$08F0	$3469			RETLW	105
$08F1	$346F			RETLW	111
$08F2	$3464			RETLW	100
$08F3	$3420			RETLW	32
$08F4	$3465			RETLW	101
$08F5	$346E			RETLW	110
$08F6	$3464			RETLW	100
$08F7	$3420			RETLW	32
$08F8	$340A			RETLW	10
$08F9	$3400			RETLW	0
$08FA	$0008			RETURN
$08FB	$	table___cmd37:
;main.c,67 :: 		if (task_done_msg)
$08FB	$3461			RETLW	97
$08FC	$3478			RETLW	120
$08FD	$3469			RETLW	105
$08FE	$3473			RETLW	115
$08FF	$3431			RETLW	49
$0900	$3420			RETLW	32
$0901	$3470			RETLW	112
$0902	$3465			RETLW	101
$0903	$3472			RETLW	114
$0904	$3469			RETLW	105
$0905	$346F			RETLW	111
$0906	$3464			RETLW	100
$0907	$3420			RETLW	32
$0908	$3477			RETLW	119
$0909	$3461			RETLW	97
$090A	$3472			RETLW	114
$090B	$346D			RETLW	109
$090C	$3475			RETLW	117
$090D	$3470			RETLW	112
$090E	$3420			RETLW	32
$090F	$340A			RETLW	10
$0910	$3400			RETLW	0
$0911	$0008			RETURN
$0912	$	table___cmd6:
;main.c,25 :: 		void IntializeController();
$0912	$3461			RETLW	97
$0913	$3478			RETLW	120
$0914	$3469			RETLW	105
$0915	$3473			RETLW	115
$0916	$3431			RETLW	49
$0917	$3420			RETLW	32
$0918	$3470			RETLW	112
$0919	$3465			RETLW	101
$091A	$3472			RETLW	114
$091B	$3469			RETLW	105
$091C	$346F			RETLW	111
$091D	$3464			RETLW	100
$091E	$3420			RETLW	32
$091F	$340A			RETLW	10
$0920	$3400			RETLW	0
$0921	$0008			RETURN
$06B1	$	table___cmd9:
;main.c,29 :: 		void main()
$06B1	$3461			RETLW	97
$06B2	$3478			RETLW	120
$06B3	$3469			RETLW	105
$06B4	$3473			RETLW	115
$06B5	$3432			RETLW	50
$06B6	$3420			RETLW	32
$06B7	$346F			RETLW	111
$06B8	$346E			RETLW	110
$06B9	$340A			RETLW	10
$06BA	$3400			RETLW	0
$06BB	$0008			RETURN
$0922	$	table___cmd10:
;main.c,30 :: 		{
$0922	$3461			RETLW	97
$0923	$3478			RETLW	120
$0924	$3469			RETLW	105
$0925	$3473			RETLW	115
$0926	$3432			RETLW	50
$0927	$3420			RETLW	32
$0928	$346F			RETLW	111
$0929	$3466			RETLW	102
$092A	$3466			RETLW	102
$092B	$340A			RETLW	10
$092C	$3400			RETLW	0
$092D	$0008			RETURN
$092E	$	table___cmd7:
;main.c,27 :: 		void Prompt();
$092E	$3461			RETLW	97
$092F	$3478			RETLW	120
$0930	$3469			RETLW	105
$0931	$3473			RETLW	115
$0932	$3432			RETLW	50
$0933	$3420			RETLW	32
$0934	$342B			RETLW	43
$0935	$340A			RETLW	10
$0936	$3400			RETLW	0
$0937	$0008			RETURN
$0938	$	table___cmd8:
;main.c,28 :: 		
$0938	$3461			RETLW	97
$0939	$3478			RETLW	120
$093A	$3469			RETLW	105
$093B	$3473			RETLW	115
$093C	$3432			RETLW	50
$093D	$3420			RETLW	32
$093E	$342D			RETLW	45
$093F	$340A			RETLW	10
$0940	$3400			RETLW	0
$0941	$0008			RETURN
$0942	$	table___cmd29:
;main.c,56 :: 		
$0942	$3461			RETLW	97
$0943	$3478			RETLW	120
$0944	$3469			RETLW	105
$0945	$3473			RETLW	115
$0946	$3432			RETLW	50
$0947	$3420			RETLW	32
$0948	$3473			RETLW	115
$0949	$3474			RETLW	116
$094A	$3465			RETLW	101
$094B	$3470			RETLW	112
$094C	$3473			RETLW	115
$094D	$3420			RETLW	32
$094E	$3473			RETLW	115
$094F	$3477			RETLW	119
$0950	$3469			RETLW	105
$0951	$3474			RETLW	116
$0952	$3463			RETLW	99
$0953	$3468			RETLW	104
$0954	$3431			RETLW	49
$0955	$340A			RETLW	10
$0956	$3400			RETLW	0
$0957	$0008			RETURN
$0958	$	table___cmd30:
;main.c,57 :: 		ProcessCommand();         // Process received command
$0958	$3461			RETLW	97
$0959	$3478			RETLW	120
$095A	$3469			RETLW	105
$095B	$3473			RETLW	115
$095C	$3432			RETLW	50
$095D	$3420			RETLW	32
$095E	$3473			RETLW	115
$095F	$3474			RETLW	116
$0960	$3465			RETLW	101
$0961	$3470			RETLW	112
$0962	$3473			RETLW	115
$0963	$3420			RETLW	32
$0964	$3473			RETLW	115
$0965	$3477			RETLW	119
$0966	$3469			RETLW	105
$0967	$3474			RETLW	116
$0968	$3463			RETLW	99
$0969	$3468			RETLW	104
$096A	$3432			RETLW	50
$096B	$340A			RETLW	10
$096C	$3400			RETLW	0
$096D	$0008			RETURN
$096E	$	table___cmd11:
;main.c,31 :: 		
$096E	$3461			RETLW	97
$096F	$3478			RETLW	120
$0970	$3469			RETLW	105
$0971	$3473			RETLW	115
$0972	$3432			RETLW	50
$0973	$3420			RETLW	32
$0974	$3473			RETLW	115
$0975	$3474			RETLW	116
$0976	$3465			RETLW	101
$0977	$3470			RETLW	112
$0978	$3473			RETLW	115
$0979	$3420			RETLW	32
$097A	$340A			RETLW	10
$097B	$3400			RETLW	0
$097C	$0008			RETURN
$097D	$	table___cmd38:
;main.c,69 :: 		SendConstLine(newline);
$097D	$3461			RETLW	97
$097E	$3478			RETLW	120
$097F	$3469			RETLW	105
$0980	$3473			RETLW	115
$0981	$3432			RETLW	50
$0982	$3420			RETLW	32
$0983	$3470			RETLW	112
$0984	$3465			RETLW	101
$0985	$3472			RETLW	114
$0986	$3469			RETLW	105
$0987	$346F			RETLW	111
$0988	$3464			RETLW	100
$0989	$3420			RETLW	32
$098A	$3473			RETLW	115
$098B	$3474			RETLW	116
$098C	$3461			RETLW	97
$098D	$3472			RETLW	114
$098E	$3474			RETLW	116
$098F	$3420			RETLW	32
$0990	$340A			RETLW	10
$0991	$3400			RETLW	0
$0992	$0008			RETURN
$0993	$	table___cmd39:
;main.c,70 :: 		
$0993	$3461			RETLW	97
$0994	$3478			RETLW	120
$0995	$3469			RETLW	105
$0996	$3473			RETLW	115
$0997	$3432			RETLW	50
$0998	$3420			RETLW	32
$0999	$3470			RETLW	112
$099A	$3465			RETLW	101
$099B	$3472			RETLW	114
$099C	$3469			RETLW	105
$099D	$346F			RETLW	111
$099E	$3464			RETLW	100
$099F	$3420			RETLW	32
$09A0	$3465			RETLW	101
$09A1	$346E			RETLW	110
$09A2	$3464			RETLW	100
$09A3	$3420			RETLW	32
$09A4	$340A			RETLW	10
$09A5	$3400			RETLW	0
$09A6	$0008			RETURN
$09A7	$	table___cmd40:
;main.c,71 :: 		SendConstLine(msg5);
$09A7	$3461			RETLW	97
$09A8	$3478			RETLW	120
$09A9	$3469			RETLW	105
$09AA	$3473			RETLW	115
$09AB	$3432			RETLW	50
$09AC	$3420			RETLW	32
$09AD	$3470			RETLW	112
$09AE	$3465			RETLW	101
$09AF	$3472			RETLW	114
$09B0	$3469			RETLW	105
$09B1	$346F			RETLW	111
$09B2	$3464			RETLW	100
$09B3	$3420			RETLW	32
$09B4	$3477			RETLW	119
$09B5	$3461			RETLW	97
$09B6	$3472			RETLW	114
$09B7	$346D			RETLW	109
$09B8	$3475			RETLW	117
$09B9	$3470			RETLW	112
$09BA	$3420			RETLW	32
$09BB	$340A			RETLW	10
$09BC	$3400			RETLW	0
$09BD	$0008			RETURN
$09BE	$	table___cmd12:
;main.c,32 :: 		delay_ms(250); // 250ms delay before startup ...
$09BE	$3461			RETLW	97
$09BF	$3478			RETLW	120
$09C0	$3469			RETLW	105
$09C1	$3473			RETLW	115
$09C2	$3432			RETLW	50
$09C3	$3420			RETLW	32
$09C4	$3470			RETLW	112
$09C5	$3465			RETLW	101
$09C6	$3472			RETLW	114
$09C7	$3469			RETLW	105
$09C8	$346F			RETLW	111
$09C9	$3464			RETLW	100
$09CA	$3420			RETLW	32
$09CB	$340A			RETLW	10
$09CC	$3400			RETLW	0
$09CD	$0008			RETURN
$09CE	$	table___cmd15:
;main.c,36 :: 		while (1)
$09CE	$3461			RETLW	97
$09CF	$3478			RETLW	120
$09D0	$3469			RETLW	105
$09D1	$3473			RETLW	115
$09D2	$3433			RETLW	51
$09D3	$3420			RETLW	32
$09D4	$346F			RETLW	111
$09D5	$346E			RETLW	110
$09D6	$340A			RETLW	10
$09D7	$3400			RETLW	0
$09D8	$0008			RETURN
$09D9	$	table___cmd16:
;main.c,37 :: 		{
$09D9	$3461			RETLW	97
$09DA	$3478			RETLW	120
$09DB	$3469			RETLW	105
$09DC	$3473			RETLW	115
$09DD	$3433			RETLW	51
$09DE	$3420			RETLW	32
$09DF	$346F			RETLW	111
$09E0	$3466			RETLW	102
$09E1	$3466			RETLW	102
$09E2	$340A			RETLW	10
$09E3	$3400			RETLW	0
$09E4	$0008			RETURN
$09E5	$	table___cmd13:
;main.c,34 :: 		IntializeController();
$09E5	$3461			RETLW	97
$09E6	$3478			RETLW	120
$09E7	$3469			RETLW	105
$09E8	$3473			RETLW	115
$09E9	$3433			RETLW	51
$09EA	$3420			RETLW	32
$09EB	$342B			RETLW	43
$09EC	$340A			RETLW	10
$09ED	$3400			RETLW	0
$09EE	$0008			RETURN
$09EF	$	table___cmd14:
;main.c,35 :: 		
$09EF	$3461			RETLW	97
$09F0	$3478			RETLW	120
$09F1	$3469			RETLW	105
$09F2	$3473			RETLW	115
$09F3	$3433			RETLW	51
$09F4	$3420			RETLW	32
$09F5	$342D			RETLW	45
$09F6	$340A			RETLW	10
$09F7	$3400			RETLW	0
$09F8	$0008			RETURN
$09F9	$	table___cmd31:
;main.c,59 :: 		b_i=0;                    // Reset buffer index
$09F9	$3461			RETLW	97
$09FA	$3478			RETLW	120
$09FB	$3469			RETLW	105
$09FC	$3473			RETLW	115
$09FD	$3433			RETLW	51
$09FE	$3420			RETLW	32
$09FF	$3473			RETLW	115
$0A00	$3474			RETLW	116
$0A01	$3465			RETLW	101
$0A02	$3470			RETLW	112
$0A03	$3473			RETLW	115
$0A04	$3420			RETLW	32
$0A05	$3473			RETLW	115
$0A06	$3477			RETLW	119
$0A07	$3469			RETLW	105
$0A08	$3474			RETLW	116
$0A09	$3463			RETLW	99
$0A0A	$3468			RETLW	104
$0A0B	$3431			RETLW	49
$0A0C	$340A			RETLW	10
$0A0D	$3400			RETLW	0
$0A0E	$0008			RETURN
$0A0F	$	table___cmd32:
;main.c,60 :: 		
$0A0F	$3461			RETLW	97
$0A10	$3478			RETLW	120
$0A11	$3469			RETLW	105
$0A12	$3473			RETLW	115
$0A13	$3433			RETLW	51
$0A14	$3420			RETLW	32
$0A15	$3473			RETLW	115
$0A16	$3474			RETLW	116
$0A17	$3465			RETLW	101
$0A18	$3470			RETLW	112
$0A19	$3473			RETLW	115
$0A1A	$3420			RETLW	32
$0A1B	$3473			RETLW	115
$0A1C	$3477			RETLW	119
$0A1D	$3469			RETLW	105
$0A1E	$3474			RETLW	116
$0A1F	$3463			RETLW	99
$0A20	$3468			RETLW	104
$0A21	$3432			RETLW	50
$0A22	$340A			RETLW	10
$0A23	$3400			RETLW	0
$0A24	$0008			RETURN
$0A25	$	table___cmd17:
;main.c,38 :: 		if (Usart_Data_Ready())
$0A25	$3461			RETLW	97
$0A26	$3478			RETLW	120
$0A27	$3469			RETLW	105
$0A28	$3473			RETLW	115
$0A29	$3433			RETLW	51
$0A2A	$3420			RETLW	32
$0A2B	$3473			RETLW	115
$0A2C	$3474			RETLW	116
$0A2D	$3465			RETLW	101
$0A2E	$3470			RETLW	112
$0A2F	$3473			RETLW	115
$0A30	$3420			RETLW	32
$0A31	$340A			RETLW	10
$0A32	$3400			RETLW	0
$0A33	$0008			RETURN
$0A34	$	table___cmd41:
;main.c,73 :: 		Prompt();
$0A34	$3461			RETLW	97
$0A35	$3478			RETLW	120
$0A36	$3469			RETLW	105
$0A37	$3473			RETLW	115
$0A38	$3433			RETLW	51
$0A39	$3420			RETLW	32
$0A3A	$3470			RETLW	112
$0A3B	$3465			RETLW	101
$0A3C	$3472			RETLW	114
$0A3D	$3469			RETLW	105
$0A3E	$346F			RETLW	111
$0A3F	$3464			RETLW	100
$0A40	$3420			RETLW	32
$0A41	$3473			RETLW	115
$0A42	$3474			RETLW	116
$0A43	$3461			RETLW	97
$0A44	$3472			RETLW	114
$0A45	$3474			RETLW	116
$0A46	$3420			RETLW	32
$0A47	$340A			RETLW	10
$0A48	$3400			RETLW	0
$0A49	$0008			RETURN
$0A4A	$	table___cmd42:
;main.c,74 :: 		
$0A4A	$3461			RETLW	97
$0A4B	$3478			RETLW	120
$0A4C	$3469			RETLW	105
$0A4D	$3473			RETLW	115
$0A4E	$3433			RETLW	51
$0A4F	$3420			RETLW	32
$0A50	$3470			RETLW	112
$0A51	$3465			RETLW	101
$0A52	$3472			RETLW	114
$0A53	$3469			RETLW	105
$0A54	$346F			RETLW	111
$0A55	$3464			RETLW	100
$0A56	$3420			RETLW	32
$0A57	$3465			RETLW	101
$0A58	$346E			RETLW	110
$0A59	$3464			RETLW	100
$0A5A	$3420			RETLW	32
$0A5B	$340A			RETLW	10
$0A5C	$3400			RETLW	0
$0A5D	$0008			RETURN
$0A5E	$	table___cmd43:
;main.c,75 :: 		task_done_msg = 0;
$0A5E	$3461			RETLW	97
$0A5F	$3478			RETLW	120
$0A60	$3469			RETLW	105
$0A61	$3473			RETLW	115
$0A62	$3433			RETLW	51
$0A63	$3420			RETLW	32
$0A64	$3470			RETLW	112
$0A65	$3465			RETLW	101
$0A66	$3472			RETLW	114
$0A67	$3469			RETLW	105
$0A68	$346F			RETLW	111
$0A69	$3464			RETLW	100
$0A6A	$3420			RETLW	32
$0A6B	$3477			RETLW	119
$0A6C	$3461			RETLW	97
$0A6D	$3472			RETLW	114
$0A6E	$346D			RETLW	109
$0A6F	$3475			RETLW	117
$0A70	$3470			RETLW	112
$0A71	$3420			RETLW	32
$0A72	$340A			RETLW	10
$0A73	$3400			RETLW	0
$0A74	$0008			RETURN
$0A75	$	table___cmd18:
;main.c,39 :: 		{
$0A75	$3461			RETLW	97
$0A76	$3478			RETLW	120
$0A77	$3469			RETLW	105
$0A78	$3473			RETLW	115
$0A79	$3433			RETLW	51
$0A7A	$3420			RETLW	32
$0A7B	$3470			RETLW	112
$0A7C	$3465			RETLW	101
$0A7D	$3472			RETLW	114
$0A7E	$3469			RETLW	105
$0A7F	$346F			RETLW	111
$0A80	$3464			RETLW	100
$0A81	$3420			RETLW	32
$0A82	$340A			RETLW	10
$0A83	$3400			RETLW	0
$0A84	$0008			RETURN
$0A85	$	_Intialize_LCD:
;lcd.h,53 :: 		void Intialize_LCD()
;lcd.h,55 :: 		Lcd8_Init(&PORTD, &PORTB);
$0A85	$3008			MOVLW	PORTD
$0A86	$1703			BSF	STATUS, RP1
$0A87	$1283			BCF	STATUS, RP0
$0A88	$00D6			MOVWF	FARG_Lcd8_Init+0
$0A89	$3006			MOVLW	PORTB
$0A8A	$00D7			MOVWF	FARG_Lcd8_Init+1
$0A8B	$118A			BCF	PCLATH, 3
$0A8C	$2478			CALL	_Lcd8_Init
$0A8D	$158A			BSF	PCLATH, 3
;lcd.h,57 :: 		Lcd8_Cmd(LCD_CURSOR_OFF);
$0A8E	$300C			MOVLW	12
$0A8F	$1703			BSF	STATUS, RP1
$0A90	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0A91	$118A			BCF	PCLATH, 3
$0A92	$23BB			CALL	_Lcd8_Cmd
$0A93	$158A			BSF	PCLATH, 3
;lcd.h,59 :: 		ProgramCustomChars();
$0A94	$118A			BCF	PCLATH, 3
$0A95	$24AE			CALL	_ProgramCustomChars
$0A96	$158A			BSF	PCLATH, 3
;lcd.h,61 :: 		strcp_c(lcd1, lcd1_default);
$0A97	$3050			MOVLW	_lcd1
$0A98	$1703			BSF	STATUS, RP1
$0A99	$00D6			MOVWF	FARG_strcp_c+0
$0A9A	$303D			MOVLW	#_lcd1_default
$0A9B	$00D7			MOVWF	FARG_strcp_c+1
$0A9C	$3005			MOVLW	@#_lcd1_default
$0A9D	$00D8			MOVWF	FARG_strcp_c+2
$0A9E	$118A			BCF	PCLATH, 3
$0A9F	$2516			CALL	_strcp_c
$0AA0	$158A			BSF	PCLATH, 3
;lcd.h,63 :: 		strcp_c(lcd2, lcd2_default);
$0AA1	$3060			MOVLW	_lcd2
$0AA2	$00D6			MOVWF	FARG_strcp_c+0
$0AA3	$3044			MOVLW	#_lcd2_default
$0AA4	$00D7			MOVWF	FARG_strcp_c+1
$0AA5	$3005			MOVLW	@#_lcd2_default
$0AA6	$00D8			MOVWF	FARG_strcp_c+2
$0AA7	$118A			BCF	PCLATH, 3
$0AA8	$2516			CALL	_strcp_c
$0AA9	$158A			BSF	PCLATH, 3
;lcd.h,66 :: 		}
$0AAA	$0008			RETURN
$0AAB	$	_DisplayScreen1:
;lcd.h,68 :: 		void DisplayScreen1()
;lcd.h,70 :: 		Lcd8_Cmd(LCD_CLEAR);
$0AAB	$3001			MOVLW	1
$0AAC	$1703			BSF	STATUS, RP1
$0AAD	$1283			BCF	STATUS, RP0
$0AAE	$00DE			MOVWF	FARG_Lcd8_Cmd+0
$0AAF	$118A			BCF	PCLATH, 3
$0AB0	$23BB			CALL	_Lcd8_Cmd
$0AB1	$158A			BSF	PCLATH, 3
;lcd.h,72 :: 		strcpy(temp, lcd1);
$0AB2	$3040			MOVLW	_temp
$0AB3	$1703			BSF	STATUS, RP1
$0AB4	$00D6			MOVWF	FARG_strcpy+0
$0AB5	$3050			MOVLW	_lcd1
$0AB6	$00D7			MOVWF	FARG_strcpy+1
$0AB7	$118A			BCF	PCLATH, 3
$0AB8	$2547			CALL	_strcpy
$0AB9	$158A			BSF	PCLATH, 3
;lcd.h,74 :: 		Lcd8_Out(1, 1, temp);
$0ABA	$3001			MOVLW	1
$0ABB	$00D6			MOVWF	FARG_Lcd8_Out+0
$0ABC	$3001			MOVLW	1
$0ABD	$00D7			MOVWF	FARG_Lcd8_Out+1
$0ABE	$3040			MOVLW	_temp
$0ABF	$00D8			MOVWF	FARG_Lcd8_Out+2
$0AC0	$118A			BCF	PCLATH, 3
$0AC1	$2561			CALL	_Lcd8_Out
$0AC2	$158A			BSF	PCLATH, 3
;lcd.h,76 :: 		strcpy(temp, lcd2);
$0AC3	$3040			MOVLW	_temp
$0AC4	$00D6			MOVWF	FARG_strcpy+0
$0AC5	$3060			MOVLW	_lcd2
$0AC6	$00D7			MOVWF	FARG_strcpy+1
$0AC7	$118A			BCF	PCLATH, 3
$0AC8	$2547			CALL	_strcpy
$0AC9	$158A			BSF	PCLATH, 3
;lcd.h,78 :: 		Lcd8_Out(2, 1, temp);
$0ACA	$3002			MOVLW	2
$0ACB	$00D6			MOVWF	FARG_Lcd8_Out+0
$0ACC	$3001			MOVLW	1
$0ACD	$00D7			MOVWF	FARG_Lcd8_Out+1
$0ACE	$3040			MOVLW	_temp
$0ACF	$00D8			MOVWF	FARG_Lcd8_Out+2
$0AD0	$118A			BCF	PCLATH, 3
$0AD1	$2561			CALL	_Lcd8_Out
$0AD2	$158A			BSF	PCLATH, 3
;lcd.h,80 :: 		lcd_screen = 1;
$0AD3	$3001			MOVLW	1
$0AD4	$00B0			MOVWF	_lcd_screen
;lcd.h,81 :: 		}
$0AD5	$0008			RETURN
$06BC	$	table___newline:
;main.c,85 :: 		}
$06BC	$340A			RETLW	10
$06BD	$3400			RETLW	0
$06BE	$0008			RETURN
$0AD6	$	table___banner1:
;main.c,8 :: 		
$0AD6	$3423			RETLW	35
$0AD7	$3423			RETLW	35
$0AD8	$3423			RETLW	35
$0AD9	$3423			RETLW	35
$0ADA	$3423			RETLW	35
$0ADB	$3423			RETLW	35
$0ADC	$3423			RETLW	35
$0ADD	$3423			RETLW	35
$0ADE	$3423			RETLW	35
$0ADF	$3423			RETLW	35
$0AE0	$3423			RETLW	35
$0AE1	$3423			RETLW	35
$0AE2	$3423			RETLW	35
$0AE3	$3423			RETLW	35
$0AE4	$3423			RETLW	35
$0AE5	$3423			RETLW	35
$0AE6	$3423			RETLW	35
$0AE7	$3423			RETLW	35
$0AE8	$3423			RETLW	35
$0AE9	$3423			RETLW	35
$0AEA	$3423			RETLW	35
$0AEB	$3423			RETLW	35
$0AEC	$3423			RETLW	35
$0AED	$3423			RETLW	35
$0AEE	$3423			RETLW	35
$0AEF	$3423			RETLW	35
$0AF0	$3423			RETLW	35
$0AF1	$3423			RETLW	35
$0AF2	$3423			RETLW	35
$0AF3	$3423			RETLW	35
$0AF4	$3423			RETLW	35
$0AF5	$3423			RETLW	35
$0AF6	$3423			RETLW	35
$0AF7	$3423			RETLW	35
$0AF8	$3423			RETLW	35
$0AF9	$3423			RETLW	35
$0AFA	$3423			RETLW	35
$0AFB	$3423			RETLW	35
$0AFC	$3423			RETLW	35
$0AFD	$3423			RETLW	35
$0AFE	$3423			RETLW	35
$0AFF	$3423			RETLW	35
$0B00	$3423			RETLW	35
$0B01	$340A			RETLW	10
$0B02	$3400			RETLW	0
$0B03	$0008			RETURN
$0B04	$	table___banner2:
;main.c,9 :: 		#define TRACE_CHAR '@'
$0B04	$3423			RETLW	35
$0B05	$3420			RETLW	32
$0B06	$3420			RETLW	32
$0B07	$3420			RETLW	32
$0B08	$3420			RETLW	32
$0B09	$3420			RETLW	32
$0B0A	$3420			RETLW	32
$0B0B	$3420			RETLW	32
$0B0C	$3420			RETLW	32
$0B0D	$3420			RETLW	32
$0B0E	$3420			RETLW	32
$0B0F	$3420			RETLW	32
$0B10	$3420			RETLW	32
$0B11	$3420			RETLW	32
$0B12	$3420			RETLW	32
$0B13	$3420			RETLW	32
$0B14	$3420			RETLW	32
$0B15	$3420			RETLW	32
$0B16	$3420			RETLW	32
$0B17	$3420			RETLW	32
$0B18	$3420			RETLW	32
$0B19	$3420			RETLW	32
$0B1A	$3420			RETLW	32
$0B1B	$3420			RETLW	32
$0B1C	$3420			RETLW	32
$0B1D	$3420			RETLW	32
$0B1E	$3420			RETLW	32
$0B1F	$3420			RETLW	32
$0B20	$3420			RETLW	32
$0B21	$3420			RETLW	32
$0B22	$3420			RETLW	32
$0B23	$3420			RETLW	32
$0B24	$3420			RETLW	32
$0B25	$3420			RETLW	32
$0B26	$3420			RETLW	32
$0B27	$3420			RETLW	32
$0B28	$3420			RETLW	32
$0B29	$3420			RETLW	32
$0B2A	$3420			RETLW	32
$0B2B	$3420			RETLW	32
$0B2C	$3420			RETLW	32
$0B2D	$3420			RETLW	32
$0B2E	$3423			RETLW	35
$0B2F	$340A			RETLW	10
$0B30	$3400			RETLW	0
$0B31	$0008			RETURN
$0B32	$	table___banner3:
;main.c,10 :: 		
$0B32	$3423			RETLW	35
$0B33	$3420			RETLW	32
$0B34	$3420			RETLW	32
$0B35	$3420			RETLW	32
$0B36	$344D			RETLW	77
$0B37	$3475			RETLW	117
$0B38	$346C			RETLW	108
$0B39	$3474			RETLW	116
$0B3A	$3469			RETLW	105
$0B3B	$342D			RETLW	45
$0B3C	$3441			RETLW	65
$0B3D	$3478			RETLW	120
$0B3E	$3469			RETLW	105
$0B3F	$3473			RETLW	115
$0B40	$3420			RETLW	32
$0B41	$3453			RETLW	83
$0B42	$3474			RETLW	116
$0B43	$3465			RETLW	101
$0B44	$3470			RETLW	112
$0B45	$3470			RETLW	112
$0B46	$3465			RETLW	101
$0B47	$3472			RETLW	114
$0B48	$3420			RETLW	32
$0B49	$344D			RETLW	77
$0B4A	$346F			RETLW	111
$0B4B	$3474			RETLW	116
$0B4C	$346F			RETLW	111
$0B4D	$3472			RETLW	114
$0B4E	$3420			RETLW	32
$0B4F	$3443			RETLW	67
$0B50	$346F			RETLW	111
$0B51	$346E			RETLW	110
$0B52	$3474			RETLW	116
$0B53	$3472			RETLW	114
$0B54	$346F			RETLW	111
$0B55	$346C			RETLW	108
$0B56	$346C			RETLW	108
$0B57	$3465			RETLW	101
$0B58	$3472			RETLW	114
$0B59	$3420			RETLW	32
$0B5A	$3420			RETLW	32
$0B5B	$3420			RETLW	32
$0B5C	$3423			RETLW	35
$0B5D	$340A			RETLW	10
$0B5E	$3400			RETLW	0
$0B5F	$0008			RETURN
$0B60	$	table___banner4:
;main.c,11 :: 		#include "Pins.h"
$0B60	$3423			RETLW	35
$0B61	$3420			RETLW	32
$0B62	$3420			RETLW	32
$0B63	$3420			RETLW	32
$0B64	$3420			RETLW	32
$0B65	$3420			RETLW	32
$0B66	$3420			RETLW	32
$0B67	$3420			RETLW	32
$0B68	$3420			RETLW	32
$0B69	$3420			RETLW	32
$0B6A	$3420			RETLW	32
$0B6B	$3420			RETLW	32
$0B6C	$3420			RETLW	32
$0B6D	$3420			RETLW	32
$0B6E	$3420			RETLW	32
$0B6F	$3420			RETLW	32
$0B70	$3420			RETLW	32
$0B71	$3420			RETLW	32
$0B72	$3420			RETLW	32
$0B73	$3420			RETLW	32
$0B74	$3420			RETLW	32
$0B75	$3420			RETLW	32
$0B76	$3420			RETLW	32
$0B77	$3420			RETLW	32
$0B78	$3420			RETLW	32
$0B79	$3420			RETLW	32
$0B7A	$3420			RETLW	32
$0B7B	$3420			RETLW	32
$0B7C	$3420			RETLW	32
$0B7D	$3420			RETLW	32
$0B7E	$3420			RETLW	32
$0B7F	$3420			RETLW	32
$0B80	$3420			RETLW	32
$0B81	$3420			RETLW	32
$0B82	$3420			RETLW	32
$0B83	$3420			RETLW	32
$0B84	$3420			RETLW	32
$0B85	$3420			RETLW	32
$0B86	$3420			RETLW	32
$0B87	$3420			RETLW	32
$0B88	$3420			RETLW	32
$0B89	$3420			RETLW	32
$0B8A	$3423			RETLW	35
$0B8B	$340A			RETLW	10
$0B8C	$3400			RETLW	0
$0B8D	$0008			RETURN
$0B8E	$	table___banner5:
;main.c,12 :: 		
$0B8E	$3423			RETLW	35
$0B8F	$3423			RETLW	35
$0B90	$3423			RETLW	35
$0B91	$3423			RETLW	35
$0B92	$3423			RETLW	35
$0B93	$3423			RETLW	35
$0B94	$3423			RETLW	35
$0B95	$3423			RETLW	35
$0B96	$3423			RETLW	35
$0B97	$3423			RETLW	35
$0B98	$3423			RETLW	35
$0B99	$3423			RETLW	35
$0B9A	$3423			RETLW	35
$0B9B	$3423			RETLW	35
$0B9C	$3423			RETLW	35
$0B9D	$3423			RETLW	35
$0B9E	$3423			RETLW	35
$0B9F	$3423			RETLW	35
$0BA0	$3423			RETLW	35
$0BA1	$3423			RETLW	35
$0BA2	$3423			RETLW	35
$0BA3	$3423			RETLW	35
$0BA4	$3423			RETLW	35
$0BA5	$3423			RETLW	35
$0BA6	$3423			RETLW	35
$0BA7	$3423			RETLW	35
$0BA8	$3423			RETLW	35
$0BA9	$3423			RETLW	35
$0BAA	$3423			RETLW	35
$0BAB	$3423			RETLW	35
$0BAC	$3423			RETLW	35
$0BAD	$3423			RETLW	35
$0BAE	$3423			RETLW	35
$0BAF	$3423			RETLW	35
$0BB0	$3423			RETLW	35
$0BB1	$3423			RETLW	35
$0BB2	$3423			RETLW	35
$0BB3	$3423			RETLW	35
$0BB4	$3423			RETLW	35
$0BB5	$3423			RETLW	35
$0BB6	$3423			RETLW	35
$0BB7	$3423			RETLW	35
$0BB8	$3423			RETLW	35
$0BB9	$340A			RETLW	10
$0BBA	$3400			RETLW	0
$0BBB	$0008			RETURN
$0BBC	$	_Prompt:
;main.c,150 :: 		void Prompt()
;main.c,152 :: 		Usart_Write('>');
$0BBC	$303E			MOVLW	62
$0BBD	$1703			BSF	STATUS, RP1
$0BBE	$1283			BCF	STATUS, RP0
$0BBF	$00DB			MOVWF	FARG_Usart_Write+0
$0BC0	$118A			BCF	PCLATH, 3
$0BC1	$242F			CALL	_Usart_Write
$0BC2	$158A			BSF	PCLATH, 3
;main.c,154 :: 		Usart_Write('>');
$0BC3	$303E			MOVLW	62
$0BC4	$1703			BSF	STATUS, RP1
$0BC5	$00DB			MOVWF	FARG_Usart_Write+0
$0BC6	$118A			BCF	PCLATH, 3
$0BC7	$242F			CALL	_Usart_Write
$0BC8	$158A			BSF	PCLATH, 3
;main.c,155 :: 		}
$0BC9	$0008			RETURN
$0BCA	$	_Usart_Init:
$0BCA	$1303			BCF	STATUS, RP1
$0BCB	$1683			BSF	STATUS, RP0
$0BCC	$1698			BSF	TXSTA, 5
$0BCD	$3090			MOVLW	144
$0BCE	$1283			BCF	STATUS, RP0
$0BCF	$0098			MOVWF	RCSTA
$0BD0	$1683			BSF	STATUS, RP0
$0BD1	$1787			BSF	TRISC, 7
$0BD2	$1307			BCF	TRISC, 6
$0BD3	$	L_Usart_Init_0:
$0BD3	$1303			BCF	STATUS, RP1
$0BD4	$1283			BCF	STATUS, RP0
$0BD5	$1283			BCF	STATUS, RP0
$0BD6	$1E8C			BTFSS	PIR1, 5
$0BD7	$2BDC			GOTO	L_Usart_Init_1
$0BD8	$081A			MOVF	RCREG, 0
$0BD9	$1703			BSF	STATUS, RP1
$0BDA	$00D5			MOVWF	Usart_Init_tmp_L0
$0BDB	$2BD3			GOTO	L_Usart_Init_0
$0BDC	$	L_Usart_Init_1:
$0BDC	$1703			BSF	STATUS, RP1
$0BDD	$1283			BCF	STATUS, RP0
$0BDE	$0008			RETURN
$1000	$	_ProcessACC:
;commands.h,9 :: 		short ProcessACC()
;commands.h,15 :: 		if (IsCommand(cmd3)) // Check if input is "axis1 on"
$1000	$3020			MOVLW	_b
$1001	$1703			BSF	STATUS, RP1
$1002	$1283			BCF	STATUS, RP0
$1003	$00D6			MOVWF	FARG_strcmp_c+0
$1004	$30C4			MOVLW	#_cmd3
$1005	$00D7			MOVWF	FARG_strcmp_c+1
$1006	$3005			MOVLW	@#_cmd3
$1007	$00D8			MOVWF	FARG_strcmp_c+2
$1008	$118A			BCF	PCLATH, 3
$1009	$120A			BCF	PCLATH, 4
$100A	$257E			CALL	_strcmp_c
$100B	$160A			BSF	PCLATH, 4
$100C	$0870			MOVF	STACK_0, 0
$100D	$1903			BTFSC	STATUS, Z
$100E	$282A			GOTO	L_ProcessACC_119
;commands.h,18 :: 		AXIS1_ENABLE_BIT = 1;
$100F	$1303			BCF	STATUS, RP1
$1010	$1683			BSF	STATUS, RP0
$1011	$14A0			BSF	_PORTA_V, 1
;commands.h,20 :: 		WriteVirtualPorts();
$1012	$118A			BCF	PCLATH, 3
$1013	$120A			BCF	PCLATH, 4
$1014	$236D			CALL	_WriteVirtualPorts
$1015	$160A			BSF	PCLATH, 4
;commands.h,22 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1016	$1703			BSF	STATUS, RP1
$1017	$0830			MOVF	_lcd_screen, 0
$1018	$3A02			XORLW	2
$1019	$1D03			BTFSS	STATUS, Z
$101A	$281F			GOTO	L_ProcessACC_120
$101B	$118A			BCF	PCLATH, 3
$101C	$120A			BCF	PCLATH, 4
$101D	$25CF			CALL	_DisplayScreen2
$101E	$160A			BSF	PCLATH, 4
$101F	$	L_ProcessACC_120:
;commands.h,24 :: 		SendConstLine(msg1); // Send "OK"
$101F	$308C			MOVLW	#_msg1
$1020	$00D6			MOVWF	FARG_SendConstLine+0
$1021	$3006			MOVLW	@#_msg1
$1022	$00D7			MOVWF	FARG_SendConstLine+1
$1023	$118A			BCF	PCLATH, 3
$1024	$120A			BCF	PCLATH, 4
$1025	$2652			CALL	_SendConstLine
$1026	$160A			BSF	PCLATH, 4
;commands.h,26 :: 		return 1;
$1027	$3001			MOVLW	1
$1028	$00F0			MOVWF	STACK_0
$1029	$0008			RETURN
;commands.h,27 :: 		}
$102A	$	L_ProcessACC_119:
;commands.h,29 :: 		if (IsCommand(cmd4)) // Check if input is "axis1 off"
$102A	$3020			MOVLW	_b
$102B	$1703			BSF	STATUS, RP1
$102C	$00D6			MOVWF	FARG_strcmp_c+0
$102D	$3091			MOVLW	#_cmd4
$102E	$00D7			MOVWF	FARG_strcmp_c+1
$102F	$3006			MOVLW	@#_cmd4
$1030	$00D8			MOVWF	FARG_strcmp_c+2
$1031	$118A			BCF	PCLATH, 3
$1032	$120A			BCF	PCLATH, 4
$1033	$257E			CALL	_strcmp_c
$1034	$160A			BSF	PCLATH, 4
$1035	$0870			MOVF	STACK_0, 0
$1036	$1903			BTFSC	STATUS, Z
$1037	$2853			GOTO	L_ProcessACC_121
;commands.h,31 :: 		AXIS1_ENABLE_BIT = 0;
$1038	$1303			BCF	STATUS, RP1
$1039	$1683			BSF	STATUS, RP0
$103A	$10A0			BCF	_PORTA_V, 1
;commands.h,33 :: 		WriteVirtualPorts();
$103B	$118A			BCF	PCLATH, 3
$103C	$120A			BCF	PCLATH, 4
$103D	$236D			CALL	_WriteVirtualPorts
$103E	$160A			BSF	PCLATH, 4
;commands.h,35 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$103F	$1703			BSF	STATUS, RP1
$1040	$0830			MOVF	_lcd_screen, 0
$1041	$3A02			XORLW	2
$1042	$1D03			BTFSS	STATUS, Z
$1043	$2848			GOTO	L_ProcessACC_122
$1044	$118A			BCF	PCLATH, 3
$1045	$120A			BCF	PCLATH, 4
$1046	$25CF			CALL	_DisplayScreen2
$1047	$160A			BSF	PCLATH, 4
$1048	$	L_ProcessACC_122:
;commands.h,37 :: 		SendConstLine(msg1); // Send "OK"
$1048	$308C			MOVLW	#_msg1
$1049	$00D6			MOVWF	FARG_SendConstLine+0
$104A	$3006			MOVLW	@#_msg1
$104B	$00D7			MOVWF	FARG_SendConstLine+1
$104C	$118A			BCF	PCLATH, 3
$104D	$120A			BCF	PCLATH, 4
$104E	$2652			CALL	_SendConstLine
$104F	$160A			BSF	PCLATH, 4
;commands.h,39 :: 		return 1;
$1050	$3001			MOVLW	1
$1051	$00F0			MOVWF	STACK_0
$1052	$0008			RETURN
;commands.h,40 :: 		}
$1053	$	L_ProcessACC_121:
;commands.h,42 :: 		if (IsCommand(cmd1)) // Check if input is "axis1 +"
$1053	$3020			MOVLW	_b
$1054	$1703			BSF	STATUS, RP1
$1055	$00D6			MOVWF	FARG_strcmp_c+0
$1056	$309D			MOVLW	#_cmd1
$1057	$00D7			MOVWF	FARG_strcmp_c+1
$1058	$3006			MOVLW	@#_cmd1
$1059	$00D8			MOVWF	FARG_strcmp_c+2
$105A	$118A			BCF	PCLATH, 3
$105B	$120A			BCF	PCLATH, 4
$105C	$257E			CALL	_strcmp_c
$105D	$160A			BSF	PCLATH, 4
$105E	$0870			MOVF	STACK_0, 0
$105F	$1903			BTFSC	STATUS, Z
$1060	$287C			GOTO	L_ProcessACC_123
;commands.h,44 :: 		AXIS1_DIRECTION_BIT = 0;
$1061	$1303			BCF	STATUS, RP1
$1062	$1683			BSF	STATUS, RP0
$1063	$1020			BCF	_PORTA_V, 0
;commands.h,46 :: 		WriteVirtualPorts();
$1064	$118A			BCF	PCLATH, 3
$1065	$120A			BCF	PCLATH, 4
$1066	$236D			CALL	_WriteVirtualPorts
$1067	$160A			BSF	PCLATH, 4
;commands.h,48 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1068	$1703			BSF	STATUS, RP1
$1069	$0830			MOVF	_lcd_screen, 0
$106A	$3A02			XORLW	2
$106B	$1D03			BTFSS	STATUS, Z
$106C	$2871			GOTO	L_ProcessACC_124
$106D	$118A			BCF	PCLATH, 3
$106E	$120A			BCF	PCLATH, 4
$106F	$25CF			CALL	_DisplayScreen2
$1070	$160A			BSF	PCLATH, 4
$1071	$	L_ProcessACC_124:
;commands.h,50 :: 		SendConstLine(msg1); // Send "OK"
$1071	$308C			MOVLW	#_msg1
$1072	$00D6			MOVWF	FARG_SendConstLine+0
$1073	$3006			MOVLW	@#_msg1
$1074	$00D7			MOVWF	FARG_SendConstLine+1
$1075	$118A			BCF	PCLATH, 3
$1076	$120A			BCF	PCLATH, 4
$1077	$2652			CALL	_SendConstLine
$1078	$160A			BSF	PCLATH, 4
;commands.h,52 :: 		return 1;
$1079	$3001			MOVLW	1
$107A	$00F0			MOVWF	STACK_0
$107B	$0008			RETURN
;commands.h,53 :: 		}
$107C	$	L_ProcessACC_123:
;commands.h,55 :: 		if (IsCommand(cmd2)) // Check if input is "axis1 -"
$107C	$3020			MOVLW	_b
$107D	$1703			BSF	STATUS, RP1
$107E	$00D6			MOVWF	FARG_strcmp_c+0
$107F	$30A7			MOVLW	#_cmd2
$1080	$00D7			MOVWF	FARG_strcmp_c+1
$1081	$3006			MOVLW	@#_cmd2
$1082	$00D8			MOVWF	FARG_strcmp_c+2
$1083	$118A			BCF	PCLATH, 3
$1084	$120A			BCF	PCLATH, 4
$1085	$257E			CALL	_strcmp_c
$1086	$160A			BSF	PCLATH, 4
$1087	$0870			MOVF	STACK_0, 0
$1088	$1903			BTFSC	STATUS, Z
$1089	$28A5			GOTO	L_ProcessACC_125
;commands.h,57 :: 		AXIS1_DIRECTION_BIT = 1;
$108A	$1303			BCF	STATUS, RP1
$108B	$1683			BSF	STATUS, RP0
$108C	$1420			BSF	_PORTA_V, 0
;commands.h,59 :: 		WriteVirtualPorts();
$108D	$118A			BCF	PCLATH, 3
$108E	$120A			BCF	PCLATH, 4
$108F	$236D			CALL	_WriteVirtualPorts
$1090	$160A			BSF	PCLATH, 4
;commands.h,61 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1091	$1703			BSF	STATUS, RP1
$1092	$0830			MOVF	_lcd_screen, 0
$1093	$3A02			XORLW	2
$1094	$1D03			BTFSS	STATUS, Z
$1095	$289A			GOTO	L_ProcessACC_126
$1096	$118A			BCF	PCLATH, 3
$1097	$120A			BCF	PCLATH, 4
$1098	$25CF			CALL	_DisplayScreen2
$1099	$160A			BSF	PCLATH, 4
$109A	$	L_ProcessACC_126:
;commands.h,63 :: 		SendConstLine(msg1); // Send "OK"
$109A	$308C			MOVLW	#_msg1
$109B	$00D6			MOVWF	FARG_SendConstLine+0
$109C	$3006			MOVLW	@#_msg1
$109D	$00D7			MOVWF	FARG_SendConstLine+1
$109E	$118A			BCF	PCLATH, 3
$109F	$120A			BCF	PCLATH, 4
$10A0	$2652			CALL	_SendConstLine
$10A1	$160A			BSF	PCLATH, 4
;commands.h,65 :: 		return 1;
$10A2	$3001			MOVLW	1
$10A3	$00F0			MOVWF	STACK_0
$10A4	$0008			RETURN
;commands.h,66 :: 		}
$10A5	$	L_ProcessACC_125:
;commands.h,68 :: 		if (IsCommand(cmd27)) // Check if input is "axis1 steps switch1"
$10A5	$3020			MOVLW	_b
$10A6	$1703			BSF	STATUS, RP1
$10A7	$00D6			MOVWF	FARG_strcmp_c+0
$10A8	$3000			MOVLW	#_cmd27
$10A9	$00D7			MOVWF	FARG_strcmp_c+1
$10AA	$3008			MOVLW	@#_cmd27
$10AB	$00D8			MOVWF	FARG_strcmp_c+2
$10AC	$118A			BCF	PCLATH, 3
$10AD	$120A			BCF	PCLATH, 4
$10AE	$257E			CALL	_strcmp_c
$10AF	$160A			BSF	PCLATH, 4
$10B0	$0870			MOVF	STACK_0, 0
$10B1	$1903			BTFSC	STATUS, Z
$10B2	$28CA			GOTO	L_ProcessACC_127
;commands.h,70 :: 		axis1_steps = 1;
$10B3	$3001			MOVLW	1
$10B4	$1303			BCF	STATUS, RP1
$10B5	$1683			BSF	STATUS, RP0
$10B6	$00C7			MOVWF	_axis1_steps
$10B7	$01C8			CLRF	_axis1_steps+1
$10B8	$01C9			CLRF	_axis1_steps+2
$10B9	$01CA			CLRF	_axis1_steps+3
;commands.h,72 :: 		axis1_bind_switch1 = 1;
$10BA	$3001			MOVLW	1
$10BB	$00C5			MOVWF	_axis1_bind_switch1
;commands.h,74 :: 		axis1_bind_switch2 = 0;
$10BC	$01C6			CLRF	_axis1_bind_switch2, 1
;commands.h,76 :: 		SendConstLine(msg1); // Send "OK"
$10BD	$308C			MOVLW	#_msg1
$10BE	$1703			BSF	STATUS, RP1
$10BF	$1283			BCF	STATUS, RP0
$10C0	$00D6			MOVWF	FARG_SendConstLine+0
$10C1	$3006			MOVLW	@#_msg1
$10C2	$00D7			MOVWF	FARG_SendConstLine+1
$10C3	$118A			BCF	PCLATH, 3
$10C4	$120A			BCF	PCLATH, 4
$10C5	$2652			CALL	_SendConstLine
$10C6	$160A			BSF	PCLATH, 4
;commands.h,78 :: 		return 1;
$10C7	$3001			MOVLW	1
$10C8	$00F0			MOVWF	STACK_0
$10C9	$0008			RETURN
;commands.h,79 :: 		}
$10CA	$	L_ProcessACC_127:
;commands.h,81 :: 		if (IsCommand(cmd28)) // Check if input is "axis1 steps switch2"
$10CA	$3020			MOVLW	_b
$10CB	$1703			BSF	STATUS, RP1
$10CC	$00D6			MOVWF	FARG_strcmp_c+0
$10CD	$3016			MOVLW	#_cmd28
$10CE	$00D7			MOVWF	FARG_strcmp_c+1
$10CF	$3008			MOVLW	@#_cmd28
$10D0	$00D8			MOVWF	FARG_strcmp_c+2
$10D1	$118A			BCF	PCLATH, 3
$10D2	$120A			BCF	PCLATH, 4
$10D3	$257E			CALL	_strcmp_c
$10D4	$160A			BSF	PCLATH, 4
$10D5	$0870			MOVF	STACK_0, 0
$10D6	$1903			BTFSC	STATUS, Z
$10D7	$28EF			GOTO	L_ProcessACC_128
;commands.h,83 :: 		axis1_steps = 1;
$10D8	$3001			MOVLW	1
$10D9	$1303			BCF	STATUS, RP1
$10DA	$1683			BSF	STATUS, RP0
$10DB	$00C7			MOVWF	_axis1_steps
$10DC	$01C8			CLRF	_axis1_steps+1
$10DD	$01C9			CLRF	_axis1_steps+2
$10DE	$01CA			CLRF	_axis1_steps+3
;commands.h,85 :: 		axis1_bind_switch1 = 0;
$10DF	$01C5			CLRF	_axis1_bind_switch1, 1
;commands.h,87 :: 		axis1_bind_switch2 = 1;
$10E0	$3001			MOVLW	1
$10E1	$00C6			MOVWF	_axis1_bind_switch2
;commands.h,89 :: 		SendConstLine(msg1); // Send "OK"
$10E2	$308C			MOVLW	#_msg1
$10E3	$1703			BSF	STATUS, RP1
$10E4	$1283			BCF	STATUS, RP0
$10E5	$00D6			MOVWF	FARG_SendConstLine+0
$10E6	$3006			MOVLW	@#_msg1
$10E7	$00D7			MOVWF	FARG_SendConstLine+1
$10E8	$118A			BCF	PCLATH, 3
$10E9	$120A			BCF	PCLATH, 4
$10EA	$2652			CALL	_SendConstLine
$10EB	$160A			BSF	PCLATH, 4
;commands.h,91 :: 		return 1;
$10EC	$3001			MOVLW	1
$10ED	$00F0			MOVWF	STACK_0
$10EE	$0008			RETURN
;commands.h,92 :: 		}
$10EF	$	L_ProcessACC_128:
;commands.h,94 :: 		if (CommandStarts(cmd5)) // Check if input is "axis1 steps x", where x is a number
$10EF	$3020			MOVLW	_b
$10F0	$1703			BSF	STATUS, RP1
$10F1	$00D6			MOVWF	FARG_str_starts_with+0
$10F2	$306D			MOVLW	#_cmd5
$10F3	$00D7			MOVWF	FARG_str_starts_with+1
$10F4	$3008			MOVLW	@#_cmd5
$10F5	$00D8			MOVWF	FARG_str_starts_with+2
$10F6	$158A			BSF	PCLATH, 3
$10F7	$120A			BCF	PCLATH, 4
$10F8	$202C			CALL	_str_starts_with
$10F9	$118A			BCF	PCLATH, 3
$10FA	$160A			BSF	PCLATH, 4
$10FB	$0870			MOVF	STACK_0, 0
$10FC	$1903			BTFSC	STATUS, Z
$10FD	$2920			GOTO	L_ProcessACC_129
;commands.h,96 :: 		axis1_steps = Extract_Numeric_Argument(12);
$10FE	$300C			MOVLW	12
$10FF	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1100	$3000			MOVLW	0
$1101	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1102	$158A			BSF	PCLATH, 3
$1103	$120A			BCF	PCLATH, 4
$1104	$207C			CALL	_Extract_Numeric_Argument
$1105	$118A			BCF	PCLATH, 3
$1106	$160A			BSF	PCLATH, 4
$1107	$0870			MOVF	STACK_0, 0
$1108	$1303			BCF	STATUS, RP1
$1109	$1683			BSF	STATUS, RP0
$110A	$00C7			MOVWF	_axis1_steps
$110B	$0871			MOVF	STACK_0+1, 0
$110C	$00C8			MOVWF	_axis1_steps+1
$110D	$0872			MOVF	STACK_0+2, 0
$110E	$00C9			MOVWF	_axis1_steps+2
$110F	$0873			MOVF	STACK_0+3, 0
$1110	$00CA			MOVWF	_axis1_steps+3
;commands.h,98 :: 		axis1_bind_switch1 = 0;
$1111	$01C5			CLRF	_axis1_bind_switch1, 1
;commands.h,100 :: 		axis1_bind_switch2 = 0;
$1112	$01C6			CLRF	_axis1_bind_switch2, 1
;commands.h,102 :: 		SendConstLine(msg1); // Send "OK"
$1113	$308C			MOVLW	#_msg1
$1114	$1703			BSF	STATUS, RP1
$1115	$1283			BCF	STATUS, RP0
$1116	$00D6			MOVWF	FARG_SendConstLine+0
$1117	$3006			MOVLW	@#_msg1
$1118	$00D7			MOVWF	FARG_SendConstLine+1
$1119	$118A			BCF	PCLATH, 3
$111A	$120A			BCF	PCLATH, 4
$111B	$2652			CALL	_SendConstLine
$111C	$160A			BSF	PCLATH, 4
;commands.h,104 :: 		return 1;
$111D	$3001			MOVLW	1
$111E	$00F0			MOVWF	STACK_0
$111F	$0008			RETURN
;commands.h,106 :: 		}
$1120	$	L_ProcessACC_129:
;commands.h,108 :: 		if (CommandStarts(cmd35)) // Check if input is "axis1 period start x", where x is a number
$1120	$3020			MOVLW	_b
$1121	$1703			BSF	STATUS, RP1
$1122	$00D6			MOVWF	FARG_str_starts_with+0
$1123	$30D1			MOVLW	#_cmd35
$1124	$00D7			MOVWF	FARG_str_starts_with+1
$1125	$3008			MOVLW	@#_cmd35
$1126	$00D8			MOVWF	FARG_str_starts_with+2
$1127	$158A			BSF	PCLATH, 3
$1128	$120A			BCF	PCLATH, 4
$1129	$202C			CALL	_str_starts_with
$112A	$118A			BCF	PCLATH, 3
$112B	$160A			BSF	PCLATH, 4
$112C	$0870			MOVF	STACK_0, 0
$112D	$1903			BTFSC	STATUS, Z
$112E	$2957			GOTO	L_ProcessACC_130
;commands.h,111 :: 		axis1_period_current = axis1_period_start = Extract_Numeric_Argument(19);
$112F	$3013			MOVLW	19
$1130	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1131	$3000			MOVLW	0
$1132	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1133	$158A			BSF	PCLATH, 3
$1134	$120A			BCF	PCLATH, 4
$1135	$207C			CALL	_Extract_Numeric_Argument
$1136	$118A			BCF	PCLATH, 3
$1137	$160A			BSF	PCLATH, 4
$1138	$0870			MOVF	STACK_0, 0
$1139	$00B9			MOVWF	_axis1_period_start
$113A	$0871			MOVF	STACK_0+1, 0
$113B	$00BA			MOVWF	_axis1_period_start+1
$113C	$0872			MOVF	STACK_0+2, 0
$113D	$00BB			MOVWF	_axis1_period_start+2
$113E	$0873			MOVF	STACK_0+3, 0
$113F	$00BC			MOVWF	_axis1_period_start+3
$1140	$0870			MOVF	STACK_0, 0
$1141	$1303			BCF	STATUS, RP1
$1142	$1683			BSF	STATUS, RP0
$1143	$00E7			MOVWF	_axis1_period_current
$1144	$0871			MOVF	STACK_0+1, 0
$1145	$00E8			MOVWF	_axis1_period_current+1
$1146	$0872			MOVF	STACK_0+2, 0
$1147	$00E9			MOVWF	_axis1_period_current+2
$1148	$0873			MOVF	STACK_0+3, 0
$1149	$00EA			MOVWF	_axis1_period_current+3
;commands.h,113 :: 		SendConstLine(msg1); // Send "OK"
$114A	$308C			MOVLW	#_msg1
$114B	$1703			BSF	STATUS, RP1
$114C	$1283			BCF	STATUS, RP0
$114D	$00D6			MOVWF	FARG_SendConstLine+0
$114E	$3006			MOVLW	@#_msg1
$114F	$00D7			MOVWF	FARG_SendConstLine+1
$1150	$118A			BCF	PCLATH, 3
$1151	$120A			BCF	PCLATH, 4
$1152	$2652			CALL	_SendConstLine
$1153	$160A			BSF	PCLATH, 4
;commands.h,115 :: 		return 1;
$1154	$3001			MOVLW	1
$1155	$00F0			MOVWF	STACK_0
$1156	$0008			RETURN
;commands.h,117 :: 		}
$1157	$	L_ProcessACC_130:
;commands.h,119 :: 		if (CommandStarts(cmd36)) // Check if input is "axis1 period end x", where x is a number
$1157	$3020			MOVLW	_b
$1158	$1703			BSF	STATUS, RP1
$1159	$00D6			MOVWF	FARG_str_starts_with+0
$115A	$30E7			MOVLW	#_cmd36
$115B	$00D7			MOVWF	FARG_str_starts_with+1
$115C	$3008			MOVLW	@#_cmd36
$115D	$00D8			MOVWF	FARG_str_starts_with+2
$115E	$158A			BSF	PCLATH, 3
$115F	$120A			BCF	PCLATH, 4
$1160	$202C			CALL	_str_starts_with
$1161	$118A			BCF	PCLATH, 3
$1162	$160A			BSF	PCLATH, 4
$1163	$0870			MOVF	STACK_0, 0
$1164	$1903			BTFSC	STATUS, Z
$1165	$2986			GOTO	L_ProcessACC_131
;commands.h,122 :: 		axis1_period_end = Extract_Numeric_Argument(17);
$1166	$3011			MOVLW	17
$1167	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1168	$3000			MOVLW	0
$1169	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$116A	$158A			BSF	PCLATH, 3
$116B	$120A			BCF	PCLATH, 4
$116C	$207C			CALL	_Extract_Numeric_Argument
$116D	$118A			BCF	PCLATH, 3
$116E	$160A			BSF	PCLATH, 4
$116F	$0870			MOVF	STACK_0, 0
$1170	$1303			BCF	STATUS, RP1
$1171	$1683			BSF	STATUS, RP0
$1172	$00EB			MOVWF	_axis1_period_end
$1173	$0871			MOVF	STACK_0+1, 0
$1174	$00EC			MOVWF	_axis1_period_end+1
$1175	$0872			MOVF	STACK_0+2, 0
$1176	$00ED			MOVWF	_axis1_period_end+2
$1177	$0873			MOVF	STACK_0+3, 0
$1178	$00EE			MOVWF	_axis1_period_end+3
;commands.h,124 :: 		SendConstLine(msg1); // Send "OK"
$1179	$308C			MOVLW	#_msg1
$117A	$1703			BSF	STATUS, RP1
$117B	$1283			BCF	STATUS, RP0
$117C	$00D6			MOVWF	FARG_SendConstLine+0
$117D	$3006			MOVLW	@#_msg1
$117E	$00D7			MOVWF	FARG_SendConstLine+1
$117F	$118A			BCF	PCLATH, 3
$1180	$120A			BCF	PCLATH, 4
$1181	$2652			CALL	_SendConstLine
$1182	$160A			BSF	PCLATH, 4
;commands.h,126 :: 		return 1;
$1183	$3001			MOVLW	1
$1184	$00F0			MOVWF	STACK_0
$1185	$0008			RETURN
;commands.h,128 :: 		}
$1186	$	L_ProcessACC_131:
;commands.h,130 :: 		if (CommandStarts(cmd37)) // Check if input is "axis1 period warmup x", where x is a number
$1186	$3020			MOVLW	_b
$1187	$1703			BSF	STATUS, RP1
$1188	$00D6			MOVWF	FARG_str_starts_with+0
$1189	$30FB			MOVLW	#_cmd37
$118A	$00D7			MOVWF	FARG_str_starts_with+1
$118B	$3008			MOVLW	@#_cmd37
$118C	$00D8			MOVWF	FARG_str_starts_with+2
$118D	$158A			BSF	PCLATH, 3
$118E	$120A			BCF	PCLATH, 4
$118F	$202C			CALL	_str_starts_with
$1190	$118A			BCF	PCLATH, 3
$1191	$160A			BSF	PCLATH, 4
$1192	$0870			MOVF	STACK_0, 0
$1193	$1903			BTFSC	STATUS, Z
$1194	$29B5			GOTO	L_ProcessACC_132
;commands.h,133 :: 		axis1_period_warmup = Extract_Numeric_Argument(20);
$1195	$3014			MOVLW	20
$1196	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1197	$3000			MOVLW	0
$1198	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1199	$158A			BSF	PCLATH, 3
$119A	$120A			BCF	PCLATH, 4
$119B	$207C			CALL	_Extract_Numeric_Argument
$119C	$118A			BCF	PCLATH, 3
$119D	$160A			BSF	PCLATH, 4
$119E	$0870			MOVF	STACK_0, 0
$119F	$1303			BCF	STATUS, RP1
$11A0	$1683			BSF	STATUS, RP0
$11A1	$00E3			MOVWF	_axis1_period_warmup
$11A2	$0871			MOVF	STACK_0+1, 0
$11A3	$00E4			MOVWF	_axis1_period_warmup+1
$11A4	$0872			MOVF	STACK_0+2, 0
$11A5	$00E5			MOVWF	_axis1_period_warmup+2
$11A6	$0873			MOVF	STACK_0+3, 0
$11A7	$00E6			MOVWF	_axis1_period_warmup+3
;commands.h,135 :: 		SendConstLine(msg1); // Send "OK"
$11A8	$308C			MOVLW	#_msg1
$11A9	$1703			BSF	STATUS, RP1
$11AA	$1283			BCF	STATUS, RP0
$11AB	$00D6			MOVWF	FARG_SendConstLine+0
$11AC	$3006			MOVLW	@#_msg1
$11AD	$00D7			MOVWF	FARG_SendConstLine+1
$11AE	$118A			BCF	PCLATH, 3
$11AF	$120A			BCF	PCLATH, 4
$11B0	$2652			CALL	_SendConstLine
$11B1	$160A			BSF	PCLATH, 4
;commands.h,137 :: 		return 1;
$11B2	$3001			MOVLW	1
$11B3	$00F0			MOVWF	STACK_0
$11B4	$0008			RETURN
;commands.h,139 :: 		}
$11B5	$	L_ProcessACC_132:
;commands.h,141 :: 		if (CommandStarts(cmd6)) // Check if input is "axis1 period x", where x is a number
$11B5	$3020			MOVLW	_b
$11B6	$1703			BSF	STATUS, RP1
$11B7	$00D6			MOVWF	FARG_str_starts_with+0
$11B8	$3012			MOVLW	#_cmd6
$11B9	$00D7			MOVWF	FARG_str_starts_with+1
$11BA	$3009			MOVLW	@#_cmd6
$11BB	$00D8			MOVWF	FARG_str_starts_with+2
$11BC	$158A			BSF	PCLATH, 3
$11BD	$120A			BCF	PCLATH, 4
$11BE	$202C			CALL	_str_starts_with
$11BF	$118A			BCF	PCLATH, 3
$11C0	$160A			BSF	PCLATH, 4
$11C1	$0870			MOVF	STACK_0, 0
$11C2	$1903			BTFSC	STATUS, Z
$11C3	$29EC			GOTO	L_ProcessACC_133
;commands.h,144 :: 		axis1_period_end = axis1_period_start = Extract_Numeric_Argument(13);
$11C4	$300D			MOVLW	13
$11C5	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$11C6	$3000			MOVLW	0
$11C7	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$11C8	$158A			BSF	PCLATH, 3
$11C9	$120A			BCF	PCLATH, 4
$11CA	$207C			CALL	_Extract_Numeric_Argument
$11CB	$118A			BCF	PCLATH, 3
$11CC	$160A			BSF	PCLATH, 4
$11CD	$0870			MOVF	STACK_0, 0
$11CE	$00B9			MOVWF	_axis1_period_start
$11CF	$0871			MOVF	STACK_0+1, 0
$11D0	$00BA			MOVWF	_axis1_period_start+1
$11D1	$0872			MOVF	STACK_0+2, 0
$11D2	$00BB			MOVWF	_axis1_period_start+2
$11D3	$0873			MOVF	STACK_0+3, 0
$11D4	$00BC			MOVWF	_axis1_period_start+3
$11D5	$0870			MOVF	STACK_0, 0
$11D6	$1303			BCF	STATUS, RP1
$11D7	$1683			BSF	STATUS, RP0
$11D8	$00EB			MOVWF	_axis1_period_end
$11D9	$0871			MOVF	STACK_0+1, 0
$11DA	$00EC			MOVWF	_axis1_period_end+1
$11DB	$0872			MOVF	STACK_0+2, 0
$11DC	$00ED			MOVWF	_axis1_period_end+2
$11DD	$0873			MOVF	STACK_0+3, 0
$11DE	$00EE			MOVWF	_axis1_period_end+3
;commands.h,146 :: 		SendConstLine(msg1); // Send "OK"
$11DF	$308C			MOVLW	#_msg1
$11E0	$1703			BSF	STATUS, RP1
$11E1	$1283			BCF	STATUS, RP0
$11E2	$00D6			MOVWF	FARG_SendConstLine+0
$11E3	$3006			MOVLW	@#_msg1
$11E4	$00D7			MOVWF	FARG_SendConstLine+1
$11E5	$118A			BCF	PCLATH, 3
$11E6	$120A			BCF	PCLATH, 4
$11E7	$2652			CALL	_SendConstLine
$11E8	$160A			BSF	PCLATH, 4
;commands.h,148 :: 		return 1;
$11E9	$3001			MOVLW	1
$11EA	$00F0			MOVWF	STACK_0
$11EB	$0008			RETURN
;commands.h,150 :: 		}
$11EC	$	L_ProcessACC_133:
;commands.h,154 :: 		if (IsCommand(cmd9)) // Check if input is "axis2 on"
$11EC	$3020			MOVLW	_b
$11ED	$1703			BSF	STATUS, RP1
$11EE	$00D6			MOVWF	FARG_strcmp_c+0
$11EF	$30B1			MOVLW	#_cmd9
$11F0	$00D7			MOVWF	FARG_strcmp_c+1
$11F1	$3006			MOVLW	@#_cmd9
$11F2	$00D8			MOVWF	FARG_strcmp_c+2
$11F3	$118A			BCF	PCLATH, 3
$11F4	$120A			BCF	PCLATH, 4
$11F5	$257E			CALL	_strcmp_c
$11F6	$160A			BSF	PCLATH, 4
$11F7	$0870			MOVF	STACK_0, 0
$11F8	$1903			BTFSC	STATUS, Z
$11F9	$2A15			GOTO	L_ProcessACC_134
;commands.h,157 :: 		AXIS2_ENABLE_BIT = 1;
$11FA	$1303			BCF	STATUS, RP1
$11FB	$1683			BSF	STATUS, RP0
$11FC	$14A1			BSF	_PORTE_V, 1
;commands.h,159 :: 		WriteVirtualPorts();
$11FD	$118A			BCF	PCLATH, 3
$11FE	$120A			BCF	PCLATH, 4
$11FF	$236D			CALL	_WriteVirtualPorts
$1200	$160A			BSF	PCLATH, 4
;commands.h,161 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1201	$1703			BSF	STATUS, RP1
$1202	$0830			MOVF	_lcd_screen, 0
$1203	$3A02			XORLW	2
$1204	$1D03			BTFSS	STATUS, Z
$1205	$2A0A			GOTO	L_ProcessACC_135
$1206	$118A			BCF	PCLATH, 3
$1207	$120A			BCF	PCLATH, 4
$1208	$25CF			CALL	_DisplayScreen2
$1209	$160A			BSF	PCLATH, 4
$120A	$	L_ProcessACC_135:
;commands.h,163 :: 		SendConstLine(msg1); // Send "OK"
$120A	$308C			MOVLW	#_msg1
$120B	$00D6			MOVWF	FARG_SendConstLine+0
$120C	$3006			MOVLW	@#_msg1
$120D	$00D7			MOVWF	FARG_SendConstLine+1
$120E	$118A			BCF	PCLATH, 3
$120F	$120A			BCF	PCLATH, 4
$1210	$2652			CALL	_SendConstLine
$1211	$160A			BSF	PCLATH, 4
;commands.h,165 :: 		return 1;
$1212	$3001			MOVLW	1
$1213	$00F0			MOVWF	STACK_0
$1214	$0008			RETURN
;commands.h,166 :: 		}
$1215	$	L_ProcessACC_134:
;commands.h,168 :: 		if (IsCommand(cmd10)) // Check if input is "axis2 off"
$1215	$3020			MOVLW	_b
$1216	$1703			BSF	STATUS, RP1
$1217	$00D6			MOVWF	FARG_strcmp_c+0
$1218	$3022			MOVLW	#_cmd10
$1219	$00D7			MOVWF	FARG_strcmp_c+1
$121A	$3009			MOVLW	@#_cmd10
$121B	$00D8			MOVWF	FARG_strcmp_c+2
$121C	$118A			BCF	PCLATH, 3
$121D	$120A			BCF	PCLATH, 4
$121E	$257E			CALL	_strcmp_c
$121F	$160A			BSF	PCLATH, 4
$1220	$0870			MOVF	STACK_0, 0
$1221	$1903			BTFSC	STATUS, Z
$1222	$2A3E			GOTO	L_ProcessACC_136
;commands.h,170 :: 		AXIS2_ENABLE_BIT =0;
$1223	$1303			BCF	STATUS, RP1
$1224	$1683			BSF	STATUS, RP0
$1225	$10A1			BCF	_PORTE_V, 1
;commands.h,172 :: 		WriteVirtualPorts();
$1226	$118A			BCF	PCLATH, 3
$1227	$120A			BCF	PCLATH, 4
$1228	$236D			CALL	_WriteVirtualPorts
$1229	$160A			BSF	PCLATH, 4
;commands.h,174 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$122A	$1703			BSF	STATUS, RP1
$122B	$0830			MOVF	_lcd_screen, 0
$122C	$3A02			XORLW	2
$122D	$1D03			BTFSS	STATUS, Z
$122E	$2A33			GOTO	L_ProcessACC_137
$122F	$118A			BCF	PCLATH, 3
$1230	$120A			BCF	PCLATH, 4
$1231	$25CF			CALL	_DisplayScreen2
$1232	$160A			BSF	PCLATH, 4
$1233	$	L_ProcessACC_137:
;commands.h,176 :: 		SendConstLine(msg1); // Send "OK"
$1233	$308C			MOVLW	#_msg1
$1234	$00D6			MOVWF	FARG_SendConstLine+0
$1235	$3006			MOVLW	@#_msg1
$1236	$00D7			MOVWF	FARG_SendConstLine+1
$1237	$118A			BCF	PCLATH, 3
$1238	$120A			BCF	PCLATH, 4
$1239	$2652			CALL	_SendConstLine
$123A	$160A			BSF	PCLATH, 4
;commands.h,178 :: 		return 1;
$123B	$3001			MOVLW	1
$123C	$00F0			MOVWF	STACK_0
$123D	$0008			RETURN
;commands.h,179 :: 		}
$123E	$	L_ProcessACC_136:
;commands.h,181 :: 		if (IsCommand(cmd7)) // Check if input is "axis2 +"
$123E	$3020			MOVLW	_b
$123F	$1703			BSF	STATUS, RP1
$1240	$00D6			MOVWF	FARG_strcmp_c+0
$1241	$302E			MOVLW	#_cmd7
$1242	$00D7			MOVWF	FARG_strcmp_c+1
$1243	$3009			MOVLW	@#_cmd7
$1244	$00D8			MOVWF	FARG_strcmp_c+2
$1245	$118A			BCF	PCLATH, 3
$1246	$120A			BCF	PCLATH, 4
$1247	$257E			CALL	_strcmp_c
$1248	$160A			BSF	PCLATH, 4
$1249	$0870			MOVF	STACK_0, 0
$124A	$1903			BTFSC	STATUS, Z
$124B	$2A67			GOTO	L_ProcessACC_138
;commands.h,183 :: 		AXIS2_DIRECTION_BIT = 0;
$124C	$1303			BCF	STATUS, RP1
$124D	$1683			BSF	STATUS, RP0
$124E	$1021			BCF	_PORTE_V, 0
;commands.h,185 :: 		WriteVirtualPorts();
$124F	$118A			BCF	PCLATH, 3
$1250	$120A			BCF	PCLATH, 4
$1251	$236D			CALL	_WriteVirtualPorts
$1252	$160A			BSF	PCLATH, 4
;commands.h,187 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1253	$1703			BSF	STATUS, RP1
$1254	$0830			MOVF	_lcd_screen, 0
$1255	$3A02			XORLW	2
$1256	$1D03			BTFSS	STATUS, Z
$1257	$2A5C			GOTO	L_ProcessACC_139
$1258	$118A			BCF	PCLATH, 3
$1259	$120A			BCF	PCLATH, 4
$125A	$25CF			CALL	_DisplayScreen2
$125B	$160A			BSF	PCLATH, 4
$125C	$	L_ProcessACC_139:
;commands.h,189 :: 		SendConstLine(msg1); // Send "OK"
$125C	$308C			MOVLW	#_msg1
$125D	$00D6			MOVWF	FARG_SendConstLine+0
$125E	$3006			MOVLW	@#_msg1
$125F	$00D7			MOVWF	FARG_SendConstLine+1
$1260	$118A			BCF	PCLATH, 3
$1261	$120A			BCF	PCLATH, 4
$1262	$2652			CALL	_SendConstLine
$1263	$160A			BSF	PCLATH, 4
;commands.h,191 :: 		return 1;
$1264	$3001			MOVLW	1
$1265	$00F0			MOVWF	STACK_0
$1266	$0008			RETURN
;commands.h,192 :: 		}
$1267	$	L_ProcessACC_138:
;commands.h,194 :: 		if (IsCommand(cmd8)) // Check if input is "axis2 -"
$1267	$3020			MOVLW	_b
$1268	$1703			BSF	STATUS, RP1
$1269	$00D6			MOVWF	FARG_strcmp_c+0
$126A	$3038			MOVLW	#_cmd8
$126B	$00D7			MOVWF	FARG_strcmp_c+1
$126C	$3009			MOVLW	@#_cmd8
$126D	$00D8			MOVWF	FARG_strcmp_c+2
$126E	$118A			BCF	PCLATH, 3
$126F	$120A			BCF	PCLATH, 4
$1270	$257E			CALL	_strcmp_c
$1271	$160A			BSF	PCLATH, 4
$1272	$0870			MOVF	STACK_0, 0
$1273	$1903			BTFSC	STATUS, Z
$1274	$2A90			GOTO	L_ProcessACC_140
;commands.h,196 :: 		AXIS2_DIRECTION_BIT = 1;
$1275	$1303			BCF	STATUS, RP1
$1276	$1683			BSF	STATUS, RP0
$1277	$1421			BSF	_PORTE_V, 0
;commands.h,198 :: 		WriteVirtualPorts();
$1278	$118A			BCF	PCLATH, 3
$1279	$120A			BCF	PCLATH, 4
$127A	$236D			CALL	_WriteVirtualPorts
$127B	$160A			BSF	PCLATH, 4
;commands.h,200 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$127C	$1703			BSF	STATUS, RP1
$127D	$0830			MOVF	_lcd_screen, 0
$127E	$3A02			XORLW	2
$127F	$1D03			BTFSS	STATUS, Z
$1280	$2A85			GOTO	L_ProcessACC_141
$1281	$118A			BCF	PCLATH, 3
$1282	$120A			BCF	PCLATH, 4
$1283	$25CF			CALL	_DisplayScreen2
$1284	$160A			BSF	PCLATH, 4
$1285	$	L_ProcessACC_141:
;commands.h,202 :: 		SendConstLine(msg1); // Send "OK"
$1285	$308C			MOVLW	#_msg1
$1286	$00D6			MOVWF	FARG_SendConstLine+0
$1287	$3006			MOVLW	@#_msg1
$1288	$00D7			MOVWF	FARG_SendConstLine+1
$1289	$118A			BCF	PCLATH, 3
$128A	$120A			BCF	PCLATH, 4
$128B	$2652			CALL	_SendConstLine
$128C	$160A			BSF	PCLATH, 4
;commands.h,204 :: 		return 1;
$128D	$3001			MOVLW	1
$128E	$00F0			MOVWF	STACK_0
$128F	$0008			RETURN
;commands.h,205 :: 		}
$1290	$	L_ProcessACC_140:
;commands.h,207 :: 		if (IsCommand(cmd29)) // Check if input is "axis2 steps switch1"
$1290	$3020			MOVLW	_b
$1291	$1703			BSF	STATUS, RP1
$1292	$00D6			MOVWF	FARG_strcmp_c+0
$1293	$3042			MOVLW	#_cmd29
$1294	$00D7			MOVWF	FARG_strcmp_c+1
$1295	$3009			MOVLW	@#_cmd29
$1296	$00D8			MOVWF	FARG_strcmp_c+2
$1297	$118A			BCF	PCLATH, 3
$1298	$120A			BCF	PCLATH, 4
$1299	$257E			CALL	_strcmp_c
$129A	$160A			BSF	PCLATH, 4
$129B	$0870			MOVF	STACK_0, 0
$129C	$1903			BTFSC	STATUS, Z
$129D	$2AB5			GOTO	L_ProcessACC_142
;commands.h,209 :: 		axis2_steps = 1;
$129E	$3001			MOVLW	1
$129F	$1303			BCF	STATUS, RP1
$12A0	$1683			BSF	STATUS, RP0
$12A1	$00D1			MOVWF	_axis2_steps
$12A2	$01D2			CLRF	_axis2_steps+1
$12A3	$01D3			CLRF	_axis2_steps+2
$12A4	$01D4			CLRF	_axis2_steps+3
;commands.h,211 :: 		axis2_bind_switch1 = 1;
$12A5	$3001			MOVLW	1
$12A6	$00CF			MOVWF	_axis2_bind_switch1
;commands.h,213 :: 		axis2_bind_switch2 = 0;
$12A7	$01D0			CLRF	_axis2_bind_switch2, 1
;commands.h,215 :: 		SendConstLine(msg1); // Send "OK"
$12A8	$308C			MOVLW	#_msg1
$12A9	$1703			BSF	STATUS, RP1
$12AA	$1283			BCF	STATUS, RP0
$12AB	$00D6			MOVWF	FARG_SendConstLine+0
$12AC	$3006			MOVLW	@#_msg1
$12AD	$00D7			MOVWF	FARG_SendConstLine+1
$12AE	$118A			BCF	PCLATH, 3
$12AF	$120A			BCF	PCLATH, 4
$12B0	$2652			CALL	_SendConstLine
$12B1	$160A			BSF	PCLATH, 4
;commands.h,217 :: 		return 1;
$12B2	$3001			MOVLW	1
$12B3	$00F0			MOVWF	STACK_0
$12B4	$0008			RETURN
;commands.h,218 :: 		}
$12B5	$	L_ProcessACC_142:
;commands.h,220 :: 		if (IsCommand(cmd30)) // Check if input is "axis2 steps switch2"
$12B5	$3020			MOVLW	_b
$12B6	$1703			BSF	STATUS, RP1
$12B7	$00D6			MOVWF	FARG_strcmp_c+0
$12B8	$3058			MOVLW	#_cmd30
$12B9	$00D7			MOVWF	FARG_strcmp_c+1
$12BA	$3009			MOVLW	@#_cmd30
$12BB	$00D8			MOVWF	FARG_strcmp_c+2
$12BC	$118A			BCF	PCLATH, 3
$12BD	$120A			BCF	PCLATH, 4
$12BE	$257E			CALL	_strcmp_c
$12BF	$160A			BSF	PCLATH, 4
$12C0	$0870			MOVF	STACK_0, 0
$12C1	$1903			BTFSC	STATUS, Z
$12C2	$2ADA			GOTO	L_ProcessACC_143
;commands.h,222 :: 		axis2_steps = 1;
$12C3	$3001			MOVLW	1
$12C4	$1303			BCF	STATUS, RP1
$12C5	$1683			BSF	STATUS, RP0
$12C6	$00D1			MOVWF	_axis2_steps
$12C7	$01D2			CLRF	_axis2_steps+1
$12C8	$01D3			CLRF	_axis2_steps+2
$12C9	$01D4			CLRF	_axis2_steps+3
;commands.h,224 :: 		axis2_bind_switch1 = 0;
$12CA	$01CF			CLRF	_axis2_bind_switch1, 1
;commands.h,226 :: 		axis2_bind_switch2 = 1;
$12CB	$3001			MOVLW	1
$12CC	$00D0			MOVWF	_axis2_bind_switch2
;commands.h,228 :: 		SendConstLine(msg1); // Send "OK"
$12CD	$308C			MOVLW	#_msg1
$12CE	$1703			BSF	STATUS, RP1
$12CF	$1283			BCF	STATUS, RP0
$12D0	$00D6			MOVWF	FARG_SendConstLine+0
$12D1	$3006			MOVLW	@#_msg1
$12D2	$00D7			MOVWF	FARG_SendConstLine+1
$12D3	$118A			BCF	PCLATH, 3
$12D4	$120A			BCF	PCLATH, 4
$12D5	$2652			CALL	_SendConstLine
$12D6	$160A			BSF	PCLATH, 4
;commands.h,230 :: 		return 1;
$12D7	$3001			MOVLW	1
$12D8	$00F0			MOVWF	STACK_0
$12D9	$0008			RETURN
;commands.h,231 :: 		}
$12DA	$	L_ProcessACC_143:
;commands.h,233 :: 		if (CommandStarts(cmd11)) // Check if input is "axis2 steps x", where x is a number
$12DA	$3020			MOVLW	_b
$12DB	$1703			BSF	STATUS, RP1
$12DC	$00D6			MOVWF	FARG_str_starts_with+0
$12DD	$306E			MOVLW	#_cmd11
$12DE	$00D7			MOVWF	FARG_str_starts_with+1
$12DF	$3009			MOVLW	@#_cmd11
$12E0	$00D8			MOVWF	FARG_str_starts_with+2
$12E1	$158A			BSF	PCLATH, 3
$12E2	$120A			BCF	PCLATH, 4
$12E3	$202C			CALL	_str_starts_with
$12E4	$118A			BCF	PCLATH, 3
$12E5	$160A			BSF	PCLATH, 4
$12E6	$0870			MOVF	STACK_0, 0
$12E7	$1903			BTFSC	STATUS, Z
$12E8	$2B0B			GOTO	L_ProcessACC_144
;commands.h,235 :: 		axis2_steps = Extract_Numeric_Argument(12);
$12E9	$300C			MOVLW	12
$12EA	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$12EB	$3000			MOVLW	0
$12EC	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$12ED	$158A			BSF	PCLATH, 3
$12EE	$120A			BCF	PCLATH, 4
$12EF	$207C			CALL	_Extract_Numeric_Argument
$12F0	$118A			BCF	PCLATH, 3
$12F1	$160A			BSF	PCLATH, 4
$12F2	$0870			MOVF	STACK_0, 0
$12F3	$1303			BCF	STATUS, RP1
$12F4	$1683			BSF	STATUS, RP0
$12F5	$00D1			MOVWF	_axis2_steps
$12F6	$0871			MOVF	STACK_0+1, 0
$12F7	$00D2			MOVWF	_axis2_steps+1
$12F8	$0872			MOVF	STACK_0+2, 0
$12F9	$00D3			MOVWF	_axis2_steps+2
$12FA	$0873			MOVF	STACK_0+3, 0
$12FB	$00D4			MOVWF	_axis2_steps+3
;commands.h,237 :: 		axis2_bind_switch1 = 0;
$12FC	$01CF			CLRF	_axis2_bind_switch1, 1
;commands.h,239 :: 		axis2_bind_switch2 = 0;
$12FD	$01D0			CLRF	_axis2_bind_switch2, 1
;commands.h,241 :: 		SendConstLine(msg1); // Send "OK"
$12FE	$308C			MOVLW	#_msg1
$12FF	$1703			BSF	STATUS, RP1
$1300	$1283			BCF	STATUS, RP0
$1301	$00D6			MOVWF	FARG_SendConstLine+0
$1302	$3006			MOVLW	@#_msg1
$1303	$00D7			MOVWF	FARG_SendConstLine+1
$1304	$118A			BCF	PCLATH, 3
$1305	$120A			BCF	PCLATH, 4
$1306	$2652			CALL	_SendConstLine
$1307	$160A			BSF	PCLATH, 4
;commands.h,243 :: 		return 1;
$1308	$3001			MOVLW	1
$1309	$00F0			MOVWF	STACK_0
$130A	$0008			RETURN
;commands.h,245 :: 		}
$130B	$	L_ProcessACC_144:
;commands.h,247 :: 		if (CommandStarts(cmd38)) // Check if input is "axis2 period start x", where x is a number
$130B	$3020			MOVLW	_b
$130C	$1703			BSF	STATUS, RP1
$130D	$00D6			MOVWF	FARG_str_starts_with+0
$130E	$307D			MOVLW	#_cmd38
$130F	$00D7			MOVWF	FARG_str_starts_with+1
$1310	$3009			MOVLW	@#_cmd38
$1311	$00D8			MOVWF	FARG_str_starts_with+2
$1312	$158A			BSF	PCLATH, 3
$1313	$120A			BCF	PCLATH, 4
$1314	$202C			CALL	_str_starts_with
$1315	$118A			BCF	PCLATH, 3
$1316	$160A			BSF	PCLATH, 4
$1317	$0870			MOVF	STACK_0, 0
$1318	$1903			BTFSC	STATUS, Z
$1319	$2B36			GOTO	L_ProcessACC_145
;commands.h,250 :: 		axis2_period_start = Extract_Numeric_Argument(19);
$131A	$3013			MOVLW	19
$131B	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$131C	$3000			MOVLW	0
$131D	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$131E	$158A			BSF	PCLATH, 3
$131F	$120A			BCF	PCLATH, 4
$1320	$207C			CALL	_Extract_Numeric_Argument
$1321	$118A			BCF	PCLATH, 3
$1322	$160A			BSF	PCLATH, 4
$1323	$0870			MOVF	STACK_0, 0
$1324	$00BD			MOVWF	_axis2_period_start
$1325	$0871			MOVF	STACK_0+1, 0
$1326	$00BE			MOVWF	_axis2_period_start+1
$1327	$0872			MOVF	STACK_0+2, 0
$1328	$00BF			MOVWF	_axis2_period_start+2
$1329	$0873			MOVF	STACK_0+3, 0
$132A	$00C0			MOVWF	_axis2_period_start+3
;commands.h,252 :: 		SendConstLine(msg1); // Send "OK"
$132B	$308C			MOVLW	#_msg1
$132C	$00D6			MOVWF	FARG_SendConstLine+0
$132D	$3006			MOVLW	@#_msg1
$132E	$00D7			MOVWF	FARG_SendConstLine+1
$132F	$118A			BCF	PCLATH, 3
$1330	$120A			BCF	PCLATH, 4
$1331	$2652			CALL	_SendConstLine
$1332	$160A			BSF	PCLATH, 4
;commands.h,254 :: 		return 1;
$1333	$3001			MOVLW	1
$1334	$00F0			MOVWF	STACK_0
$1335	$0008			RETURN
;commands.h,256 :: 		}
$1336	$	L_ProcessACC_145:
;commands.h,258 :: 		if (CommandStarts(cmd39)) // Check if input is "axis2 period end x", where x is a number
$1336	$3020			MOVLW	_b
$1337	$1703			BSF	STATUS, RP1
$1338	$00D6			MOVWF	FARG_str_starts_with+0
$1339	$3093			MOVLW	#_cmd39
$133A	$00D7			MOVWF	FARG_str_starts_with+1
$133B	$3009			MOVLW	@#_cmd39
$133C	$00D8			MOVWF	FARG_str_starts_with+2
$133D	$158A			BSF	PCLATH, 3
$133E	$120A			BCF	PCLATH, 4
$133F	$202C			CALL	_str_starts_with
$1340	$118A			BCF	PCLATH, 3
$1341	$160A			BSF	PCLATH, 4
$1342	$0870			MOVF	STACK_0, 0
$1343	$1903			BTFSC	STATUS, Z
$1344	$2B61			GOTO	L_ProcessACC_146
;commands.h,260 :: 		axis2_period_end = Extract_Numeric_Argument(17);
$1345	$3011			MOVLW	17
$1346	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1347	$3000			MOVLW	0
$1348	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1349	$158A			BSF	PCLATH, 3
$134A	$120A			BCF	PCLATH, 4
$134B	$207C			CALL	_Extract_Numeric_Argument
$134C	$118A			BCF	PCLATH, 3
$134D	$160A			BSF	PCLATH, 4
$134E	$0870			MOVF	STACK_0, 0
$134F	$0098			MOVWF	_axis2_period_end
$1350	$0871			MOVF	STACK_0+1, 0
$1351	$0099			MOVWF	_axis2_period_end+1
$1352	$0872			MOVF	STACK_0+2, 0
$1353	$009A			MOVWF	_axis2_period_end+2
$1354	$0873			MOVF	STACK_0+3, 0
$1355	$009B			MOVWF	_axis2_period_end+3
;commands.h,262 :: 		SendConstLine(msg1); // Send "OK"
$1356	$308C			MOVLW	#_msg1
$1357	$00D6			MOVWF	FARG_SendConstLine+0
$1358	$3006			MOVLW	@#_msg1
$1359	$00D7			MOVWF	FARG_SendConstLine+1
$135A	$118A			BCF	PCLATH, 3
$135B	$120A			BCF	PCLATH, 4
$135C	$2652			CALL	_SendConstLine
$135D	$160A			BSF	PCLATH, 4
;commands.h,264 :: 		return 1;
$135E	$3001			MOVLW	1
$135F	$00F0			MOVWF	STACK_0
$1360	$0008			RETURN
;commands.h,265 :: 		}
$1361	$	L_ProcessACC_146:
;commands.h,267 :: 		if (CommandStarts(cmd40)) // Check if input is "axis2 period warmup x", where x is a number
$1361	$3020			MOVLW	_b
$1362	$1703			BSF	STATUS, RP1
$1363	$00D6			MOVWF	FARG_str_starts_with+0
$1364	$30A7			MOVLW	#_cmd40
$1365	$00D7			MOVWF	FARG_str_starts_with+1
$1366	$3009			MOVLW	@#_cmd40
$1367	$00D8			MOVWF	FARG_str_starts_with+2
$1368	$158A			BSF	PCLATH, 3
$1369	$120A			BCF	PCLATH, 4
$136A	$202C			CALL	_str_starts_with
$136B	$118A			BCF	PCLATH, 3
$136C	$160A			BSF	PCLATH, 4
$136D	$0870			MOVF	STACK_0, 0
$136E	$1903			BTFSC	STATUS, Z
$136F	$2B8C			GOTO	L_ProcessACC_147
;commands.h,269 :: 		axis2_period_warmup = Extract_Numeric_Argument(20);
$1370	$3014			MOVLW	20
$1371	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1372	$3000			MOVLW	0
$1373	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1374	$158A			BSF	PCLATH, 3
$1375	$120A			BCF	PCLATH, 4
$1376	$207C			CALL	_Extract_Numeric_Argument
$1377	$118A			BCF	PCLATH, 3
$1378	$160A			BSF	PCLATH, 4
$1379	$0870			MOVF	STACK_0, 0
$137A	$0090			MOVWF	_axis2_period_warmup
$137B	$0871			MOVF	STACK_0+1, 0
$137C	$0091			MOVWF	_axis2_period_warmup+1
$137D	$0872			MOVF	STACK_0+2, 0
$137E	$0092			MOVWF	_axis2_period_warmup+2
$137F	$0873			MOVF	STACK_0+3, 0
$1380	$0093			MOVWF	_axis2_period_warmup+3
;commands.h,271 :: 		SendConstLine(msg1); // Send "OK"
$1381	$308C			MOVLW	#_msg1
$1382	$00D6			MOVWF	FARG_SendConstLine+0
$1383	$3006			MOVLW	@#_msg1
$1384	$00D7			MOVWF	FARG_SendConstLine+1
$1385	$118A			BCF	PCLATH, 3
$1386	$120A			BCF	PCLATH, 4
$1387	$2652			CALL	_SendConstLine
$1388	$160A			BSF	PCLATH, 4
;commands.h,273 :: 		return 1;
$1389	$3001			MOVLW	1
$138A	$00F0			MOVWF	STACK_0
$138B	$0008			RETURN
;commands.h,274 :: 		}
$138C	$	L_ProcessACC_147:
;commands.h,276 :: 		if (CommandStarts(cmd12)) // Check if input is "axis2 period x", where x is a number
$138C	$3020			MOVLW	_b
$138D	$1703			BSF	STATUS, RP1
$138E	$00D6			MOVWF	FARG_str_starts_with+0
$138F	$30BE			MOVLW	#_cmd12
$1390	$00D7			MOVWF	FARG_str_starts_with+1
$1391	$3009			MOVLW	@#_cmd12
$1392	$00D8			MOVWF	FARG_str_starts_with+2
$1393	$158A			BSF	PCLATH, 3
$1394	$120A			BCF	PCLATH, 4
$1395	$202C			CALL	_str_starts_with
$1396	$118A			BCF	PCLATH, 3
$1397	$160A			BSF	PCLATH, 4
$1398	$0870			MOVF	STACK_0, 0
$1399	$1903			BTFSC	STATUS, Z
$139A	$2BC7			GOTO	L_ProcessACC_148
;commands.h,278 :: 		axis2_period_current = axis2_period_end = axis2_period_start = Extract_Numeric_Argument(13);
$139B	$300D			MOVLW	13
$139C	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$139D	$3000			MOVLW	0
$139E	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$139F	$158A			BSF	PCLATH, 3
$13A0	$120A			BCF	PCLATH, 4
$13A1	$207C			CALL	_Extract_Numeric_Argument
$13A2	$118A			BCF	PCLATH, 3
$13A3	$160A			BSF	PCLATH, 4
$13A4	$0870			MOVF	STACK_0, 0
$13A5	$00BD			MOVWF	_axis2_period_start
$13A6	$0871			MOVF	STACK_0+1, 0
$13A7	$00BE			MOVWF	_axis2_period_start+1
$13A8	$0872			MOVF	STACK_0+2, 0
$13A9	$00BF			MOVWF	_axis2_period_start+2
$13AA	$0873			MOVF	STACK_0+3, 0
$13AB	$00C0			MOVWF	_axis2_period_start+3
$13AC	$0870			MOVF	STACK_0, 0
$13AD	$0098			MOVWF	_axis2_period_end
$13AE	$0871			MOVF	STACK_0+1, 0
$13AF	$0099			MOVWF	_axis2_period_end+1
$13B0	$0872			MOVF	STACK_0+2, 0
$13B1	$009A			MOVWF	_axis2_period_end+2
$13B2	$0873			MOVF	STACK_0+3, 0
$13B3	$009B			MOVWF	_axis2_period_end+3
$13B4	$0870			MOVF	STACK_0, 0
$13B5	$0094			MOVWF	_axis2_period_current
$13B6	$0871			MOVF	STACK_0+1, 0
$13B7	$0095			MOVWF	_axis2_period_current+1
$13B8	$0872			MOVF	STACK_0+2, 0
$13B9	$0096			MOVWF	_axis2_period_current+2
$13BA	$0873			MOVF	STACK_0+3, 0
$13BB	$0097			MOVWF	_axis2_period_current+3
;commands.h,280 :: 		SendConstLine(msg1); // Send "OK"
$13BC	$308C			MOVLW	#_msg1
$13BD	$00D6			MOVWF	FARG_SendConstLine+0
$13BE	$3006			MOVLW	@#_msg1
$13BF	$00D7			MOVWF	FARG_SendConstLine+1
$13C0	$118A			BCF	PCLATH, 3
$13C1	$120A			BCF	PCLATH, 4
$13C2	$2652			CALL	_SendConstLine
$13C3	$160A			BSF	PCLATH, 4
;commands.h,282 :: 		return 1;
$13C4	$3001			MOVLW	1
$13C5	$00F0			MOVWF	STACK_0
$13C6	$0008			RETURN
;commands.h,284 :: 		}
$13C7	$	L_ProcessACC_148:
;commands.h,288 :: 		if (IsCommand(cmd15)) // Check if input is "axis3 on"
$13C7	$3020			MOVLW	_b
$13C8	$1703			BSF	STATUS, RP1
$13C9	$00D6			MOVWF	FARG_strcmp_c+0
$13CA	$30CE			MOVLW	#_cmd15
$13CB	$00D7			MOVWF	FARG_strcmp_c+1
$13CC	$3009			MOVLW	@#_cmd15
$13CD	$00D8			MOVWF	FARG_strcmp_c+2
$13CE	$118A			BCF	PCLATH, 3
$13CF	$120A			BCF	PCLATH, 4
$13D0	$257E			CALL	_strcmp_c
$13D1	$160A			BSF	PCLATH, 4
$13D2	$0870			MOVF	STACK_0, 0
$13D3	$1903			BTFSC	STATUS, Z
$13D4	$2BEF			GOTO	L_ProcessACC_149
;commands.h,291 :: 		AXIS3_ENABLE_BIT = 1;
$13D5	$1303			BCF	STATUS, RP1
$13D6	$1487			BSF	PORTC, 1
;commands.h,293 :: 		WriteVirtualPorts();
$13D7	$118A			BCF	PCLATH, 3
$13D8	$120A			BCF	PCLATH, 4
$13D9	$236D			CALL	_WriteVirtualPorts
$13DA	$160A			BSF	PCLATH, 4
;commands.h,295 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$13DB	$1703			BSF	STATUS, RP1
$13DC	$0830			MOVF	_lcd_screen, 0
$13DD	$3A02			XORLW	2
$13DE	$1D03			BTFSS	STATUS, Z
$13DF	$2BE4			GOTO	L_ProcessACC_150
$13E0	$118A			BCF	PCLATH, 3
$13E1	$120A			BCF	PCLATH, 4
$13E2	$25CF			CALL	_DisplayScreen2
$13E3	$160A			BSF	PCLATH, 4
$13E4	$	L_ProcessACC_150:
;commands.h,297 :: 		SendConstLine(msg1); // Send "OK"
$13E4	$308C			MOVLW	#_msg1
$13E5	$00D6			MOVWF	FARG_SendConstLine+0
$13E6	$3006			MOVLW	@#_msg1
$13E7	$00D7			MOVWF	FARG_SendConstLine+1
$13E8	$118A			BCF	PCLATH, 3
$13E9	$120A			BCF	PCLATH, 4
$13EA	$2652			CALL	_SendConstLine
$13EB	$160A			BSF	PCLATH, 4
;commands.h,299 :: 		return 1;
$13EC	$3001			MOVLW	1
$13ED	$00F0			MOVWF	STACK_0
$13EE	$0008			RETURN
;commands.h,300 :: 		}
$13EF	$	L_ProcessACC_149:
;commands.h,302 :: 		if (IsCommand(cmd16)) // Check if input is "axis3 off"
$13EF	$3020			MOVLW	_b
$13F0	$1703			BSF	STATUS, RP1
$13F1	$00D6			MOVWF	FARG_strcmp_c+0
$13F2	$30D9			MOVLW	#_cmd16
$13F3	$00D7			MOVWF	FARG_strcmp_c+1
$13F4	$3009			MOVLW	@#_cmd16
$13F5	$00D8			MOVWF	FARG_strcmp_c+2
$13F6	$118A			BCF	PCLATH, 3
$13F7	$120A			BCF	PCLATH, 4
$13F8	$257E			CALL	_strcmp_c
$13F9	$160A			BSF	PCLATH, 4
$13FA	$0870			MOVF	STACK_0, 0
$13FB	$1903			BTFSC	STATUS, Z
$13FC	$2C17			GOTO	L_ProcessACC_151
;commands.h,304 :: 		AXIS3_ENABLE_BIT = 0;
$13FD	$1303			BCF	STATUS, RP1
$13FE	$1087			BCF	PORTC, 1
;commands.h,306 :: 		WriteVirtualPorts();
$13FF	$118A			BCF	PCLATH, 3
$1400	$120A			BCF	PCLATH, 4
$1401	$236D			CALL	_WriteVirtualPorts
$1402	$160A			BSF	PCLATH, 4
;commands.h,308 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1403	$1703			BSF	STATUS, RP1
$1404	$0830			MOVF	_lcd_screen, 0
$1405	$3A02			XORLW	2
$1406	$1D03			BTFSS	STATUS, Z
$1407	$2C0C			GOTO	L_ProcessACC_152
$1408	$118A			BCF	PCLATH, 3
$1409	$120A			BCF	PCLATH, 4
$140A	$25CF			CALL	_DisplayScreen2
$140B	$160A			BSF	PCLATH, 4
$140C	$	L_ProcessACC_152:
;commands.h,310 :: 		SendConstLine(msg1); // Send "OK"
$140C	$308C			MOVLW	#_msg1
$140D	$00D6			MOVWF	FARG_SendConstLine+0
$140E	$3006			MOVLW	@#_msg1
$140F	$00D7			MOVWF	FARG_SendConstLine+1
$1410	$118A			BCF	PCLATH, 3
$1411	$120A			BCF	PCLATH, 4
$1412	$2652			CALL	_SendConstLine
$1413	$160A			BSF	PCLATH, 4
;commands.h,312 :: 		return 1;
$1414	$3001			MOVLW	1
$1415	$00F0			MOVWF	STACK_0
$1416	$0008			RETURN
;commands.h,313 :: 		}
$1417	$	L_ProcessACC_151:
;commands.h,315 :: 		if (IsCommand(cmd13)) // Check if input is "axis3 +"
$1417	$3020			MOVLW	_b
$1418	$1703			BSF	STATUS, RP1
$1419	$00D6			MOVWF	FARG_strcmp_c+0
$141A	$30E5			MOVLW	#_cmd13
$141B	$00D7			MOVWF	FARG_strcmp_c+1
$141C	$3009			MOVLW	@#_cmd13
$141D	$00D8			MOVWF	FARG_strcmp_c+2
$141E	$118A			BCF	PCLATH, 3
$141F	$120A			BCF	PCLATH, 4
$1420	$257E			CALL	_strcmp_c
$1421	$160A			BSF	PCLATH, 4
$1422	$0870			MOVF	STACK_0, 0
$1423	$1903			BTFSC	STATUS, Z
$1424	$2C3F			GOTO	L_ProcessACC_153
;commands.h,317 :: 		AXIS3_DIRECTION_BIT = 0;
$1425	$1303			BCF	STATUS, RP1
$1426	$1007			BCF	PORTC, 0
;commands.h,319 :: 		WriteVirtualPorts();
$1427	$118A			BCF	PCLATH, 3
$1428	$120A			BCF	PCLATH, 4
$1429	$236D			CALL	_WriteVirtualPorts
$142A	$160A			BSF	PCLATH, 4
;commands.h,321 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$142B	$1703			BSF	STATUS, RP1
$142C	$0830			MOVF	_lcd_screen, 0
$142D	$3A02			XORLW	2
$142E	$1D03			BTFSS	STATUS, Z
$142F	$2C34			GOTO	L_ProcessACC_154
$1430	$118A			BCF	PCLATH, 3
$1431	$120A			BCF	PCLATH, 4
$1432	$25CF			CALL	_DisplayScreen2
$1433	$160A			BSF	PCLATH, 4
$1434	$	L_ProcessACC_154:
;commands.h,323 :: 		SendConstLine(msg1); // Send "OK"
$1434	$308C			MOVLW	#_msg1
$1435	$00D6			MOVWF	FARG_SendConstLine+0
$1436	$3006			MOVLW	@#_msg1
$1437	$00D7			MOVWF	FARG_SendConstLine+1
$1438	$118A			BCF	PCLATH, 3
$1439	$120A			BCF	PCLATH, 4
$143A	$2652			CALL	_SendConstLine
$143B	$160A			BSF	PCLATH, 4
;commands.h,325 :: 		return 1;
$143C	$3001			MOVLW	1
$143D	$00F0			MOVWF	STACK_0
$143E	$0008			RETURN
;commands.h,326 :: 		}
$143F	$	L_ProcessACC_153:
;commands.h,328 :: 		if (IsCommand(cmd14)) // Check if input is "axis3 -"
$143F	$3020			MOVLW	_b
$1440	$1703			BSF	STATUS, RP1
$1441	$00D6			MOVWF	FARG_strcmp_c+0
$1442	$30EF			MOVLW	#_cmd14
$1443	$00D7			MOVWF	FARG_strcmp_c+1
$1444	$3009			MOVLW	@#_cmd14
$1445	$00D8			MOVWF	FARG_strcmp_c+2
$1446	$118A			BCF	PCLATH, 3
$1447	$120A			BCF	PCLATH, 4
$1448	$257E			CALL	_strcmp_c
$1449	$160A			BSF	PCLATH, 4
$144A	$0870			MOVF	STACK_0, 0
$144B	$1903			BTFSC	STATUS, Z
$144C	$2C67			GOTO	L_ProcessACC_155
;commands.h,330 :: 		AXIS3_DIRECTION_BIT = 1;
$144D	$1303			BCF	STATUS, RP1
$144E	$1407			BSF	PORTC, 0
;commands.h,332 :: 		WriteVirtualPorts();
$144F	$118A			BCF	PCLATH, 3
$1450	$120A			BCF	PCLATH, 4
$1451	$236D			CALL	_WriteVirtualPorts
$1452	$160A			BSF	PCLATH, 4
;commands.h,334 :: 		if (lcd_screen == 2) DisplayScreen2(); // Update if screen 2 is displayed
$1453	$1703			BSF	STATUS, RP1
$1454	$0830			MOVF	_lcd_screen, 0
$1455	$3A02			XORLW	2
$1456	$1D03			BTFSS	STATUS, Z
$1457	$2C5C			GOTO	L_ProcessACC_156
$1458	$118A			BCF	PCLATH, 3
$1459	$120A			BCF	PCLATH, 4
$145A	$25CF			CALL	_DisplayScreen2
$145B	$160A			BSF	PCLATH, 4
$145C	$	L_ProcessACC_156:
;commands.h,336 :: 		SendConstLine(msg1); // Send "OK"
$145C	$308C			MOVLW	#_msg1
$145D	$00D6			MOVWF	FARG_SendConstLine+0
$145E	$3006			MOVLW	@#_msg1
$145F	$00D7			MOVWF	FARG_SendConstLine+1
$1460	$118A			BCF	PCLATH, 3
$1461	$120A			BCF	PCLATH, 4
$1462	$2652			CALL	_SendConstLine
$1463	$160A			BSF	PCLATH, 4
;commands.h,338 :: 		return 1;
$1464	$3001			MOVLW	1
$1465	$00F0			MOVWF	STACK_0
$1466	$0008			RETURN
;commands.h,339 :: 		}
$1467	$	L_ProcessACC_155:
;commands.h,341 :: 		if (IsCommand(cmd31)) // Check if input is "axis3 steps switch1"
$1467	$3020			MOVLW	_b
$1468	$1703			BSF	STATUS, RP1
$1469	$00D6			MOVWF	FARG_strcmp_c+0
$146A	$30F9			MOVLW	#_cmd31
$146B	$00D7			MOVWF	FARG_strcmp_c+1
$146C	$3009			MOVLW	@#_cmd31
$146D	$00D8			MOVWF	FARG_strcmp_c+2
$146E	$118A			BCF	PCLATH, 3
$146F	$120A			BCF	PCLATH, 4
$1470	$257E			CALL	_strcmp_c
$1471	$160A			BSF	PCLATH, 4
$1472	$0870			MOVF	STACK_0, 0
$1473	$1903			BTFSC	STATUS, Z
$1474	$2C8C			GOTO	L_ProcessACC_157
;commands.h,343 :: 		axis3_steps = 1;
$1475	$3001			MOVLW	1
$1476	$1303			BCF	STATUS, RP1
$1477	$1683			BSF	STATUS, RP0
$1478	$00DB			MOVWF	_axis3_steps
$1479	$01DC			CLRF	_axis3_steps+1
$147A	$01DD			CLRF	_axis3_steps+2
$147B	$01DE			CLRF	_axis3_steps+3
;commands.h,345 :: 		axis3_bind_switch1 = 1;
$147C	$3001			MOVLW	1
$147D	$00D9			MOVWF	_axis3_bind_switch1
;commands.h,347 :: 		axis3_bind_switch2 = 0;
$147E	$01DA			CLRF	_axis3_bind_switch2, 1
;commands.h,349 :: 		SendConstLine(msg1); // Send "OK"
$147F	$308C			MOVLW	#_msg1
$1480	$1703			BSF	STATUS, RP1
$1481	$1283			BCF	STATUS, RP0
$1482	$00D6			MOVWF	FARG_SendConstLine+0
$1483	$3006			MOVLW	@#_msg1
$1484	$00D7			MOVWF	FARG_SendConstLine+1
$1485	$118A			BCF	PCLATH, 3
$1486	$120A			BCF	PCLATH, 4
$1487	$2652			CALL	_SendConstLine
$1488	$160A			BSF	PCLATH, 4
;commands.h,351 :: 		return 1;
$1489	$3001			MOVLW	1
$148A	$00F0			MOVWF	STACK_0
$148B	$0008			RETURN
;commands.h,352 :: 		}
$148C	$	L_ProcessACC_157:
;commands.h,354 :: 		if (IsCommand(cmd32)) // Check if input is "axis3 steps switch2"
$148C	$3020			MOVLW	_b
$148D	$1703			BSF	STATUS, RP1
$148E	$00D6			MOVWF	FARG_strcmp_c+0
$148F	$300F			MOVLW	#_cmd32
$1490	$00D7			MOVWF	FARG_strcmp_c+1
$1491	$300A			MOVLW	@#_cmd32
$1492	$00D8			MOVWF	FARG_strcmp_c+2
$1493	$118A			BCF	PCLATH, 3
$1494	$120A			BCF	PCLATH, 4
$1495	$257E			CALL	_strcmp_c
$1496	$160A			BSF	PCLATH, 4
$1497	$0870			MOVF	STACK_0, 0
$1498	$1903			BTFSC	STATUS, Z
$1499	$2CB1			GOTO	L_ProcessACC_158
;commands.h,356 :: 		axis3_steps = 1;
$149A	$3001			MOVLW	1
$149B	$1303			BCF	STATUS, RP1
$149C	$1683			BSF	STATUS, RP0
$149D	$00DB			MOVWF	_axis3_steps
$149E	$01DC			CLRF	_axis3_steps+1
$149F	$01DD			CLRF	_axis3_steps+2
$14A0	$01DE			CLRF	_axis3_steps+3
;commands.h,358 :: 		axis3_bind_switch1 = 0;
$14A1	$01D9			CLRF	_axis3_bind_switch1, 1
;commands.h,360 :: 		axis3_bind_switch2 = 1;
$14A2	$3001			MOVLW	1
$14A3	$00DA			MOVWF	_axis3_bind_switch2
;commands.h,362 :: 		SendConstLine(msg1); // Send "OK"
$14A4	$308C			MOVLW	#_msg1
$14A5	$1703			BSF	STATUS, RP1
$14A6	$1283			BCF	STATUS, RP0
$14A7	$00D6			MOVWF	FARG_SendConstLine+0
$14A8	$3006			MOVLW	@#_msg1
$14A9	$00D7			MOVWF	FARG_SendConstLine+1
$14AA	$118A			BCF	PCLATH, 3
$14AB	$120A			BCF	PCLATH, 4
$14AC	$2652			CALL	_SendConstLine
$14AD	$160A			BSF	PCLATH, 4
;commands.h,364 :: 		return 1;
$14AE	$3001			MOVLW	1
$14AF	$00F0			MOVWF	STACK_0
$14B0	$0008			RETURN
;commands.h,365 :: 		}
$14B1	$	L_ProcessACC_158:
;commands.h,367 :: 		if (CommandStarts(cmd17)) // Check if input is "axis3 steps x", where x is a number
$14B1	$3020			MOVLW	_b
$14B2	$1703			BSF	STATUS, RP1
$14B3	$00D6			MOVWF	FARG_str_starts_with+0
$14B4	$3025			MOVLW	#_cmd17
$14B5	$00D7			MOVWF	FARG_str_starts_with+1
$14B6	$300A			MOVLW	@#_cmd17
$14B7	$00D8			MOVWF	FARG_str_starts_with+2
$14B8	$158A			BSF	PCLATH, 3
$14B9	$120A			BCF	PCLATH, 4
$14BA	$202C			CALL	_str_starts_with
$14BB	$118A			BCF	PCLATH, 3
$14BC	$160A			BSF	PCLATH, 4
$14BD	$0870			MOVF	STACK_0, 0
$14BE	$1903			BTFSC	STATUS, Z
$14BF	$2CE2			GOTO	L_ProcessACC_159
;commands.h,369 :: 		axis3_steps = Extract_Numeric_Argument(12);
$14C0	$300C			MOVLW	12
$14C1	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$14C2	$3000			MOVLW	0
$14C3	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$14C4	$158A			BSF	PCLATH, 3
$14C5	$120A			BCF	PCLATH, 4
$14C6	$207C			CALL	_Extract_Numeric_Argument
$14C7	$118A			BCF	PCLATH, 3
$14C8	$160A			BSF	PCLATH, 4
$14C9	$0870			MOVF	STACK_0, 0
$14CA	$1303			BCF	STATUS, RP1
$14CB	$1683			BSF	STATUS, RP0
$14CC	$00DB			MOVWF	_axis3_steps
$14CD	$0871			MOVF	STACK_0+1, 0
$14CE	$00DC			MOVWF	_axis3_steps+1
$14CF	$0872			MOVF	STACK_0+2, 0
$14D0	$00DD			MOVWF	_axis3_steps+2
$14D1	$0873			MOVF	STACK_0+3, 0
$14D2	$00DE			MOVWF	_axis3_steps+3
;commands.h,371 :: 		axis3_bind_switch1 = 0;
$14D3	$01D9			CLRF	_axis3_bind_switch1, 1
;commands.h,373 :: 		axis3_bind_switch2 = 0;
$14D4	$01DA			CLRF	_axis3_bind_switch2, 1
;commands.h,375 :: 		SendConstLine(msg1); // Send "OK"
$14D5	$308C			MOVLW	#_msg1
$14D6	$1703			BSF	STATUS, RP1
$14D7	$1283			BCF	STATUS, RP0
$14D8	$00D6			MOVWF	FARG_SendConstLine+0
$14D9	$3006			MOVLW	@#_msg1
$14DA	$00D7			MOVWF	FARG_SendConstLine+1
$14DB	$118A			BCF	PCLATH, 3
$14DC	$120A			BCF	PCLATH, 4
$14DD	$2652			CALL	_SendConstLine
$14DE	$160A			BSF	PCLATH, 4
;commands.h,377 :: 		return 1;
$14DF	$3001			MOVLW	1
$14E0	$00F0			MOVWF	STACK_0
$14E1	$0008			RETURN
;commands.h,378 :: 		}
$14E2	$	L_ProcessACC_159:
;commands.h,380 :: 		if (CommandStarts(cmd41)) // Check if input is "axis3 period start x", where x is a number
$14E2	$3020			MOVLW	_b
$14E3	$1703			BSF	STATUS, RP1
$14E4	$00D6			MOVWF	FARG_str_starts_with+0
$14E5	$3034			MOVLW	#_cmd41
$14E6	$00D7			MOVWF	FARG_str_starts_with+1
$14E7	$300A			MOVLW	@#_cmd41
$14E8	$00D8			MOVWF	FARG_str_starts_with+2
$14E9	$158A			BSF	PCLATH, 3
$14EA	$120A			BCF	PCLATH, 4
$14EB	$202C			CALL	_str_starts_with
$14EC	$118A			BCF	PCLATH, 3
$14ED	$160A			BSF	PCLATH, 4
$14EE	$0870			MOVF	STACK_0, 0
$14EF	$1903			BTFSC	STATUS, Z
$14F0	$2D1D			GOTO	L_ProcessACC_160
;commands.h,382 :: 		axis3_period_current = axis3_period_start = axis3_period_end = Extract_Numeric_Argument(19);
$14F1	$3013			MOVLW	19
$14F2	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$14F3	$3000			MOVLW	0
$14F4	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$14F5	$158A			BSF	PCLATH, 3
$14F6	$120A			BCF	PCLATH, 4
$14F7	$207C			CALL	_Extract_Numeric_Argument
$14F8	$118A			BCF	PCLATH, 3
$14F9	$160A			BSF	PCLATH, 4
$14FA	$0870			MOVF	STACK_0, 0
$14FB	$00A4			MOVWF	_axis3_period_end
$14FC	$0871			MOVF	STACK_0+1, 0
$14FD	$00A5			MOVWF	_axis3_period_end+1
$14FE	$0872			MOVF	STACK_0+2, 0
$14FF	$00A6			MOVWF	_axis3_period_end+2
$1500	$0873			MOVF	STACK_0+3, 0
$1501	$00A7			MOVWF	_axis3_period_end+3
$1502	$0870			MOVF	STACK_0, 0
$1503	$00C1			MOVWF	_axis3_period_start
$1504	$0871			MOVF	STACK_0+1, 0
$1505	$00C2			MOVWF	_axis3_period_start+1
$1506	$0872			MOVF	STACK_0+2, 0
$1507	$00C3			MOVWF	_axis3_period_start+2
$1508	$0873			MOVF	STACK_0+3, 0
$1509	$00C4			MOVWF	_axis3_period_start+3
$150A	$0870			MOVF	STACK_0, 0
$150B	$00A0			MOVWF	_axis3_period_current
$150C	$0871			MOVF	STACK_0+1, 0
$150D	$00A1			MOVWF	_axis3_period_current+1
$150E	$0872			MOVF	STACK_0+2, 0
$150F	$00A2			MOVWF	_axis3_period_current+2
$1510	$0873			MOVF	STACK_0+3, 0
$1511	$00A3			MOVWF	_axis3_period_current+3
;commands.h,384 :: 		SendConstLine(msg1); // Send "OK"
$1512	$308C			MOVLW	#_msg1
$1513	$00D6			MOVWF	FARG_SendConstLine+0
$1514	$3006			MOVLW	@#_msg1
$1515	$00D7			MOVWF	FARG_SendConstLine+1
$1516	$118A			BCF	PCLATH, 3
$1517	$120A			BCF	PCLATH, 4
$1518	$2652			CALL	_SendConstLine
$1519	$160A			BSF	PCLATH, 4
;commands.h,386 :: 		return 1;
$151A	$3001			MOVLW	1
$151B	$00F0			MOVWF	STACK_0
$151C	$0008			RETURN
;commands.h,387 :: 		}
$151D	$	L_ProcessACC_160:
;commands.h,389 :: 		if (CommandStarts(cmd42)) // Check if input is "axis3 period end x", where x is a number
$151D	$3020			MOVLW	_b
$151E	$1703			BSF	STATUS, RP1
$151F	$00D6			MOVWF	FARG_str_starts_with+0
$1520	$304A			MOVLW	#_cmd42
$1521	$00D7			MOVWF	FARG_str_starts_with+1
$1522	$300A			MOVLW	@#_cmd42
$1523	$00D8			MOVWF	FARG_str_starts_with+2
$1524	$158A			BSF	PCLATH, 3
$1525	$120A			BCF	PCLATH, 4
$1526	$202C			CALL	_str_starts_with
$1527	$118A			BCF	PCLATH, 3
$1528	$160A			BSF	PCLATH, 4
$1529	$0870			MOVF	STACK_0, 0
$152A	$1903			BTFSC	STATUS, Z
$152B	$2D48			GOTO	L_ProcessACC_161
;commands.h,392 :: 		axis3_period_end= Extract_Numeric_Argument(17);
$152C	$3011			MOVLW	17
$152D	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$152E	$3000			MOVLW	0
$152F	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1530	$158A			BSF	PCLATH, 3
$1531	$120A			BCF	PCLATH, 4
$1532	$207C			CALL	_Extract_Numeric_Argument
$1533	$118A			BCF	PCLATH, 3
$1534	$160A			BSF	PCLATH, 4
$1535	$0870			MOVF	STACK_0, 0
$1536	$00A4			MOVWF	_axis3_period_end
$1537	$0871			MOVF	STACK_0+1, 0
$1538	$00A5			MOVWF	_axis3_period_end+1
$1539	$0872			MOVF	STACK_0+2, 0
$153A	$00A6			MOVWF	_axis3_period_end+2
$153B	$0873			MOVF	STACK_0+3, 0
$153C	$00A7			MOVWF	_axis3_period_end+3
;commands.h,394 :: 		SendConstLine(msg1); // Send "OK"
$153D	$308C			MOVLW	#_msg1
$153E	$00D6			MOVWF	FARG_SendConstLine+0
$153F	$3006			MOVLW	@#_msg1
$1540	$00D7			MOVWF	FARG_SendConstLine+1
$1541	$118A			BCF	PCLATH, 3
$1542	$120A			BCF	PCLATH, 4
$1543	$2652			CALL	_SendConstLine
$1544	$160A			BSF	PCLATH, 4
;commands.h,396 :: 		return 1;
$1545	$3001			MOVLW	1
$1546	$00F0			MOVWF	STACK_0
$1547	$0008			RETURN
;commands.h,398 :: 		}
$1548	$	L_ProcessACC_161:
;commands.h,400 :: 		if (CommandStarts(cmd43)) // Check if input is "axis3 period warmup x", where x is a number
$1548	$3020			MOVLW	_b
$1549	$1703			BSF	STATUS, RP1
$154A	$00D6			MOVWF	FARG_str_starts_with+0
$154B	$305E			MOVLW	#_cmd43
$154C	$00D7			MOVWF	FARG_str_starts_with+1
$154D	$300A			MOVLW	@#_cmd43
$154E	$00D8			MOVWF	FARG_str_starts_with+2
$154F	$158A			BSF	PCLATH, 3
$1550	$120A			BCF	PCLATH, 4
$1551	$202C			CALL	_str_starts_with
$1552	$118A			BCF	PCLATH, 3
$1553	$160A			BSF	PCLATH, 4
$1554	$0870			MOVF	STACK_0, 0
$1555	$1903			BTFSC	STATUS, Z
$1556	$2D73			GOTO	L_ProcessACC_162
;commands.h,403 :: 		axis3_period_warmup = Extract_Numeric_Argument(20);
$1557	$3014			MOVLW	20
$1558	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1559	$3000			MOVLW	0
$155A	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$155B	$158A			BSF	PCLATH, 3
$155C	$120A			BCF	PCLATH, 4
$155D	$207C			CALL	_Extract_Numeric_Argument
$155E	$118A			BCF	PCLATH, 3
$155F	$160A			BSF	PCLATH, 4
$1560	$0870			MOVF	STACK_0, 0
$1561	$009C			MOVWF	_axis3_period_warmup
$1562	$0871			MOVF	STACK_0+1, 0
$1563	$009D			MOVWF	_axis3_period_warmup+1
$1564	$0872			MOVF	STACK_0+2, 0
$1565	$009E			MOVWF	_axis3_period_warmup+2
$1566	$0873			MOVF	STACK_0+3, 0
$1567	$009F			MOVWF	_axis3_period_warmup+3
;commands.h,405 :: 		SendConstLine(msg1); // Send "OK"
$1568	$308C			MOVLW	#_msg1
$1569	$00D6			MOVWF	FARG_SendConstLine+0
$156A	$3006			MOVLW	@#_msg1
$156B	$00D7			MOVWF	FARG_SendConstLine+1
$156C	$118A			BCF	PCLATH, 3
$156D	$120A			BCF	PCLATH, 4
$156E	$2652			CALL	_SendConstLine
$156F	$160A			BSF	PCLATH, 4
;commands.h,407 :: 		return 1;
$1570	$3001			MOVLW	1
$1571	$00F0			MOVWF	STACK_0
$1572	$0008			RETURN
;commands.h,409 :: 		}
$1573	$	L_ProcessACC_162:
;commands.h,411 :: 		if (CommandStarts(cmd18)) // Check if input is "axis3 period x", where x is a number
$1573	$3020			MOVLW	_b
$1574	$1703			BSF	STATUS, RP1
$1575	$00D6			MOVWF	FARG_str_starts_with+0
$1576	$3075			MOVLW	#_cmd18
$1577	$00D7			MOVWF	FARG_str_starts_with+1
$1578	$300A			MOVLW	@#_cmd18
$1579	$00D8			MOVWF	FARG_str_starts_with+2
$157A	$158A			BSF	PCLATH, 3
$157B	$120A			BCF	PCLATH, 4
$157C	$202C			CALL	_str_starts_with
$157D	$118A			BCF	PCLATH, 3
$157E	$160A			BSF	PCLATH, 4
$157F	$0870			MOVF	STACK_0, 0
$1580	$1903			BTFSC	STATUS, Z
$1581	$2DA6			GOTO	L_ProcessACC_163
;commands.h,413 :: 		axis3_period_end = axis3_period_start = Extract_Numeric_Argument(13);
$1582	$300D			MOVLW	13
$1583	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1584	$3000			MOVLW	0
$1585	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1586	$158A			BSF	PCLATH, 3
$1587	$120A			BCF	PCLATH, 4
$1588	$207C			CALL	_Extract_Numeric_Argument
$1589	$118A			BCF	PCLATH, 3
$158A	$160A			BSF	PCLATH, 4
$158B	$0870			MOVF	STACK_0, 0
$158C	$00C1			MOVWF	_axis3_period_start
$158D	$0871			MOVF	STACK_0+1, 0
$158E	$00C2			MOVWF	_axis3_period_start+1
$158F	$0872			MOVF	STACK_0+2, 0
$1590	$00C3			MOVWF	_axis3_period_start+2
$1591	$0873			MOVF	STACK_0+3, 0
$1592	$00C4			MOVWF	_axis3_period_start+3
$1593	$0870			MOVF	STACK_0, 0
$1594	$00A4			MOVWF	_axis3_period_end
$1595	$0871			MOVF	STACK_0+1, 0
$1596	$00A5			MOVWF	_axis3_period_end+1
$1597	$0872			MOVF	STACK_0+2, 0
$1598	$00A6			MOVWF	_axis3_period_end+2
$1599	$0873			MOVF	STACK_0+3, 0
$159A	$00A7			MOVWF	_axis3_period_end+3
;commands.h,415 :: 		SendConstLine(msg1); // Send "OK"
$159B	$308C			MOVLW	#_msg1
$159C	$00D6			MOVWF	FARG_SendConstLine+0
$159D	$3006			MOVLW	@#_msg1
$159E	$00D7			MOVWF	FARG_SendConstLine+1
$159F	$118A			BCF	PCLATH, 3
$15A0	$120A			BCF	PCLATH, 4
$15A1	$2652			CALL	_SendConstLine
$15A2	$160A			BSF	PCLATH, 4
;commands.h,417 :: 		return 1;
$15A3	$3001			MOVLW	1
$15A4	$00F0			MOVWF	STACK_0
$15A5	$0008			RETURN
;commands.h,418 :: 		}
$15A6	$	L_ProcessACC_163:
;commands.h,420 :: 		return 0;
$15A6	$1303			BCF	STATUS, RP1
$15A7	$1283			BCF	STATUS, RP0
$15A8	$01F0			CLRF	STACK_0, 1
;commands.h,421 :: 		}
$15A9	$0008			RETURN
$0BDF	$	table___cmd20:
;main.c,43 :: 		
$0BDF	$3476			RETLW	118
$0BE0	$3465			RETLW	101
$0BE1	$3472			RETLW	114
$0BE2	$3473			RETLW	115
$0BE3	$3469			RETLW	105
$0BE4	$346F			RETLW	111
$0BE5	$346E			RETLW	110
$0BE6	$340A			RETLW	10
$0BE7	$3400			RETLW	0
$0BE8	$0008			RETURN
$0BE9	$	table__lstr_1_commands:
$0BE9	$3432			RETLW	50
$0BEA	$342E			RETLW	46
$0BEB	$3430			RETLW	48
$0BEC	$340A			RETLW	10
$0BED	$3400			RETLW	0
$0BEE	$0008			RETURN
$0BEF	$	table___cmd19:
;main.c,41 :: 		
$0BEF	$3467			RETLW	103
$0BF0	$346F			RETLW	111
$0BF1	$340A			RETLW	10
$0BF2	$3400			RETLW	0
$0BF3	$0008			RETURN
$0BF4	$	_ProcessGo:
;go.h,172 :: 		void ProcessGo()
;go.h,174 :: 		axis1_counter = 0;
$0BF4	$1303			BCF	STATUS, RP1
$0BF5	$1683			BSF	STATUS, RP0
$0BF6	$01AD			CLRF	_axis1_counter
$0BF7	$01AE			CLRF	_axis1_counter+1
$0BF8	$01AF			CLRF	_axis1_counter+2
$0BF9	$01B0			CLRF	_axis1_counter+3
;go.h,176 :: 		axis2_counter = 0;
$0BFA	$01B1			CLRF	_axis2_counter
$0BFB	$01B2			CLRF	_axis2_counter+1
$0BFC	$01B3			CLRF	_axis2_counter+2
$0BFD	$01B4			CLRF	_axis2_counter+3
;go.h,178 :: 		axis3_counter = 0;
$0BFE	$01B5			CLRF	_axis3_counter
$0BFF	$01B6			CLRF	_axis3_counter+1
$0C00	$01B7			CLRF	_axis3_counter+2
$0C01	$01B8			CLRF	_axis3_counter+3
;go.h,180 :: 		axis1_steps_counter = 0;
$0C02	$01CB			CLRF	_axis1_steps_counter
$0C03	$01CC			CLRF	_axis1_steps_counter+1
$0C04	$01CD			CLRF	_axis1_steps_counter+2
$0C05	$01CE			CLRF	_axis1_steps_counter+3
;go.h,182 :: 		axis2_steps_counter = 0;
$0C06	$01D5			CLRF	_axis2_steps_counter
$0C07	$01D6			CLRF	_axis2_steps_counter+1
$0C08	$01D7			CLRF	_axis2_steps_counter+2
$0C09	$01D8			CLRF	_axis2_steps_counter+3
;go.h,184 :: 		axis3_steps_counter = 0;
$0C0A	$01DF			CLRF	_axis3_steps_counter
$0C0B	$01E0			CLRF	_axis3_steps_counter+1
$0C0C	$01E1			CLRF	_axis3_steps_counter+2
$0C0D	$01E2			CLRF	_axis3_steps_counter+3
;go.h,186 :: 		axis1_warmup_counter = 0;
$0C0E	$01B9			CLRF	_axis1_warmup_counter
$0C0F	$01BA			CLRF	_axis1_warmup_counter+1
$0C10	$01BB			CLRF	_axis1_warmup_counter+2
$0C11	$01BC			CLRF	_axis1_warmup_counter+3
;go.h,188 :: 		axis2_warmup_counter = 0;
$0C12	$01BD			CLRF	_axis2_warmup_counter
$0C13	$01BE			CLRF	_axis2_warmup_counter+1
$0C14	$01BF			CLRF	_axis2_warmup_counter+2
$0C15	$01C0			CLRF	_axis2_warmup_counter+3
;go.h,190 :: 		axis3_warmup_counter = 0;
$0C16	$01C1			CLRF	_axis3_warmup_counter
$0C17	$01C2			CLRF	_axis3_warmup_counter+1
$0C18	$01C3			CLRF	_axis3_warmup_counter+2
$0C19	$01C4			CLRF	_axis3_warmup_counter+3
;go.h,192 :: 		switch1_closed = 0;
$0C1A	$01AB			CLRF	_switch1_closed, 1
;go.h,194 :: 		switch2_closed = 0;
$0C1B	$01AC			CLRF	_switch2_closed, 1
;go.h,196 :: 		axis1_period_current = axis1_period_start;
$0C1C	$1703			BSF	STATUS, RP1
$0C1D	$1283			BCF	STATUS, RP0
$0C1E	$0839			MOVF	_axis1_period_start, 0
$0C1F	$1303			BCF	STATUS, RP1
$0C20	$1683			BSF	STATUS, RP0
$0C21	$00E7			MOVWF	_axis1_period_current
$0C22	$1703			BSF	STATUS, RP1
$0C23	$1283			BCF	STATUS, RP0
$0C24	$083A			MOVF	_axis1_period_start+1, 0
$0C25	$1303			BCF	STATUS, RP1
$0C26	$1683			BSF	STATUS, RP0
$0C27	$00E8			MOVWF	_axis1_period_current+1
$0C28	$1703			BSF	STATUS, RP1
$0C29	$1283			BCF	STATUS, RP0
$0C2A	$083B			MOVF	_axis1_period_start+2, 0
$0C2B	$1303			BCF	STATUS, RP1
$0C2C	$1683			BSF	STATUS, RP0
$0C2D	$00E9			MOVWF	_axis1_period_current+2
$0C2E	$1703			BSF	STATUS, RP1
$0C2F	$1283			BCF	STATUS, RP0
$0C30	$083C			MOVF	_axis1_period_start+3, 0
$0C31	$1303			BCF	STATUS, RP1
$0C32	$1683			BSF	STATUS, RP0
$0C33	$00EA			MOVWF	_axis1_period_current+3
;go.h,198 :: 		axis2_period_current = axis2_period_start;
$0C34	$1703			BSF	STATUS, RP1
$0C35	$1283			BCF	STATUS, RP0
$0C36	$083D			MOVF	_axis2_period_start, 0
$0C37	$0094			MOVWF	_axis2_period_current
$0C38	$083E			MOVF	_axis2_period_start+1, 0
$0C39	$0095			MOVWF	_axis2_period_current+1
$0C3A	$083F			MOVF	_axis2_period_start+2, 0
$0C3B	$0096			MOVWF	_axis2_period_current+2
$0C3C	$0840			MOVF	_axis2_period_start+3, 0
$0C3D	$0097			MOVWF	_axis2_period_current+3
;go.h,200 :: 		axis3_period_current = axis3_period_start;
$0C3E	$0841			MOVF	_axis3_period_start, 0
$0C3F	$00A0			MOVWF	_axis3_period_current
$0C40	$0842			MOVF	_axis3_period_start+1, 0
$0C41	$00A1			MOVWF	_axis3_period_current+1
$0C42	$0843			MOVF	_axis3_period_start+2, 0
$0C43	$00A2			MOVWF	_axis3_period_current+2
$0C44	$0844			MOVF	_axis3_period_start+3, 0
$0C45	$00A3			MOVWF	_axis3_period_current+3
;go.h,202 :: 		INTCON.PEIE =1; // Enable Peripheral Interrupts
$0C46	$170B			BSF	INTCON, 6
;go.h,204 :: 		INTCON.GIE = 1; // Enable General Interrupts
$0C47	$178B			BSF	INTCON, 7
;go.h,206 :: 		PIE1.TMR2IE = 1; // Enable Timer2 Interrupt
$0C48	$1303			BCF	STATUS, RP1
$0C49	$1683			BSF	STATUS, RP0
$0C4A	$148C			BSF	PIE1, 1
;go.h,208 :: 		T2CON = 0b01001001; // Timer2 Configuration Word
$0C4B	$3049			MOVLW	73
$0C4C	$1283			BCF	STATUS, RP0
$0C4D	$0092			MOVWF	T2CON
;go.h,212 :: 		PR2 = PR2_setting;
$0C4E	$1703			BSF	STATUS, RP1
$0C4F	$0845			MOVF	_PR2_setting, 0
$0C50	$1303			BCF	STATUS, RP1
$0C51	$1683			BSF	STATUS, RP0
$0C52	$0092			MOVWF	PR2
;go.h,214 :: 		trace_flag = 0;
$0C53	$01AA			CLRF	_trace_flag, 1
;go.h,216 :: 		trace_counter = 0;
$0C54	$01A2			CLRF	_trace_counter
$0C55	$01A3			CLRF	_trace_counter+1
$0C56	$01A4			CLRF	_trace_counter+2
$0C57	$01A5			CLRF	_trace_counter+3
;go.h,218 :: 		task_running = 1;
$0C58	$3001			MOVLW	1
$0C59	$1703			BSF	STATUS, RP1
$0C5A	$1283			BCF	STATUS, RP0
$0C5B	$00A9			MOVWF	_task_running
;go.h,220 :: 		T2CON.TMR2ON = 1; // Enable Timer2
$0C5C	$1303			BCF	STATUS, RP1
$0C5D	$1512			BSF	T2CON, 2
;go.h,222 :: 		}
$0C5E	$0008			RETURN
$0C5F	$	table___cmd21:
;main.c,45 :: 		{
$0C5F	$3473			RETLW	115
$0C60	$3474			RETLW	116
$0C61	$346F			RETLW	111
$0C62	$3470			RETLW	112
$0C63	$340A			RETLW	10
$0C64	$3400			RETLW	0
$0C65	$0008			RETURN
$0C66	$	table___cmd23:
;main.c,47 :: 		
$0C66	$3473			RETLW	115
$0C67	$3463			RETLW	99
$0C68	$3472			RETLW	114
$0C69	$3465			RETLW	101
$0C6A	$3465			RETLW	101
$0C6B	$346E			RETLW	110
$0C6C	$3420			RETLW	32
$0C6D	$3431			RETLW	49
$0C6E	$340A			RETLW	10
$0C6F	$3400			RETLW	0
$0C70	$0008			RETURN
$0C71	$	table___cmd24:
;main.c,48 :: 		if (b_i<31) b_i++;
$0C71	$3473			RETLW	115
$0C72	$3463			RETLW	99
$0C73	$3472			RETLW	114
$0C74	$3465			RETLW	101
$0C75	$3465			RETLW	101
$0C76	$346E			RETLW	110
$0C77	$3420			RETLW	32
$0C78	$3432			RETLW	50
$0C79	$340A			RETLW	10
$0C7A	$3400			RETLW	0
$0C7B	$0008			RETURN
$0C7C	$	table___cmd25:
;main.c,50 :: 		
$0C7C	$3470			RETLW	112
$0C7D	$3469			RETLW	105
$0C7E	$346E			RETLW	110
$0C7F	$3467			RETLW	103
$0C80	$340A			RETLW	10
$0C81	$3400			RETLW	0
$0C82	$0008			RETURN
$0C83	$	table___cmd26:
;main.c,51 :: 		if (i==13)                   // Check if Enter is received
$0C83	$3463			RETLW	99
$0C84	$346F			RETLW	111
$0C85	$346D			RETLW	109
$0C86	$346D			RETLW	109
$0C87	$3475			RETLW	117
$0C88	$346E			RETLW	110
$0C89	$3469			RETLW	105
$0C8A	$3463			RETLW	99
$0C8B	$3461			RETLW	97
$0C8C	$3474			RETLW	116
$0C8D	$3469			RETLW	105
$0C8E	$346F			RETLW	111
$0C8F	$346E			RETLW	110
$0C90	$3420			RETLW	32
$0C91	$3474			RETLW	116
$0C92	$3465			RETLW	101
$0C93	$3473			RETLW	115
$0C94	$3474			RETLW	116
$0C95	$340A			RETLW	10
$0C96	$3400			RETLW	0
$0C97	$0008			RETURN
$0C98	$	table___msg3:
;main.c,16 :: 		
$0C98	$3455			RETLW	85
$0C99	$346E			RETLW	110
$0C9A	$3464			RETLW	100
$0C9B	$3465			RETLW	101
$0C9C	$3466			RETLW	102
$0C9D	$3469			RETLW	105
$0C9E	$346E			RETLW	110
$0C9F	$3465			RETLW	101
$0CA0	$3464			RETLW	100
$0CA1	$3420			RETLW	32
$0CA2	$3463			RETLW	99
$0CA3	$346F			RETLW	111
$0CA4	$346D			RETLW	109
$0CA5	$346D			RETLW	109
$0CA6	$3461			RETLW	97
$0CA7	$346E			RETLW	110
$0CA8	$3464			RETLW	100
$0CA9	$340A			RETLW	10
$0CAA	$3400			RETLW	0
$0CAB	$0008			RETURN
$0CAC	$	table___cmd33:
;main.c,62 :: 		}
$0CAC	$346C			RETLW	108
$0CAD	$3463			RETLW	99
$0CAE	$3464			RETLW	100
$0CAF	$3431			RETLW	49
$0CB0	$3420			RETLW	32
$0CB1	$340A			RETLW	10
$0CB2	$3400			RETLW	0
$0CB3	$0008			RETURN
$0CB4	$	table___cmd34:
;main.c,63 :: 		
$0CB4	$346C			RETLW	108
$0CB5	$3463			RETLW	99
$0CB6	$3464			RETLW	100
$0CB7	$3432			RETLW	50
$0CB8	$3420			RETLW	32
$0CB9	$340A			RETLW	10
$0CBA	$3400			RETLW	0
$0CBB	$0008			RETURN
$0CBC	$	table___cmd44:
;main.c,77 :: 		
$0CBC	$3474			RETLW	116
$0CBD	$3472			RETLW	114
$0CBE	$3461			RETLW	97
$0CBF	$3463			RETLW	99
$0CC0	$3465			RETLW	101
$0CC1	$3420			RETLW	32
$0CC2	$3461			RETLW	97
$0CC3	$3478			RETLW	120
$0CC4	$3469			RETLW	105
$0CC5	$3473			RETLW	115
$0CC6	$3431			RETLW	49
$0CC7	$340A			RETLW	10
$0CC8	$3400			RETLW	0
$0CC9	$0008			RETURN
$0CCA	$	table___cmd45:
;main.c,78 :: 		if (trace_flag)
$0CCA	$3474			RETLW	116
$0CCB	$3472			RETLW	114
$0CCC	$3461			RETLW	97
$0CCD	$3463			RETLW	99
$0CCE	$3465			RETLW	101
$0CCF	$3420			RETLW	32
$0CD0	$3461			RETLW	97
$0CD1	$3478			RETLW	120
$0CD2	$3469			RETLW	105
$0CD3	$3473			RETLW	115
$0CD4	$3432			RETLW	50
$0CD5	$340A			RETLW	10
$0CD6	$3400			RETLW	0
$0CD7	$0008			RETURN
$0CD8	$	table___cmd46:
;main.c,79 :: 		{
$0CD8	$3474			RETLW	116
$0CD9	$3472			RETLW	114
$0CDA	$3461			RETLW	97
$0CDB	$3463			RETLW	99
$0CDC	$3465			RETLW	101
$0CDD	$3420			RETLW	32
$0CDE	$3461			RETLW	97
$0CDF	$3478			RETLW	120
$0CE0	$3469			RETLW	105
$0CE1	$3473			RETLW	115
$0CE2	$3433			RETLW	51
$0CE3	$340A			RETLW	10
$0CE4	$3400			RETLW	0
$0CE5	$0008			RETURN
$0CE6	$	table___cmd47:
;main.c,80 :: 		Usart_Write(TRACE_CHAR);
$0CE6	$3474			RETLW	116
$0CE7	$3472			RETLW	114
$0CE8	$3461			RETLW	97
$0CE9	$3463			RETLW	99
$0CEA	$3465			RETLW	101
$0CEB	$3420			RETLW	32
$0CEC	$346F			RETLW	111
$0CED	$3466			RETLW	102
$0CEE	$3466			RETLW	102
$0CEF	$340A			RETLW	10
$0CF0	$3400			RETLW	0
$0CF1	$0008			RETURN
$0CF2	$	table___cmd48:
;main.c,81 :: 		
$0CF2	$3474			RETLW	116
$0CF3	$3472			RETLW	114
$0CF4	$3461			RETLW	97
$0CF5	$3463			RETLW	99
$0CF6	$3465			RETLW	101
$0CF7	$3420			RETLW	32
$0CF8	$3473			RETLW	115
$0CF9	$346B			RETLW	107
$0CFA	$3469			RETLW	105
$0CFB	$3470			RETLW	112
$0CFC	$3420			RETLW	32
$0CFD	$340A			RETLW	10
$0CFE	$3400			RETLW	0
$0CFF	$0008			RETURN
$0D00	$	table___cmdxx:
;main.c,83 :: 		}
$0D00	$3470			RETLW	112
$0D01	$3472			RETLW	114
$0D02	$3432			RETLW	50
$0D03	$3420			RETLW	32
$0D04	$340A			RETLW	10
$0D05	$3400			RETLW	0
$0D06	$0008			RETURN
$0D07	$	_IntializeController:
;main.c,87 :: 		void IntializeController()
;main.c,89 :: 		TRISB = 0;                            // LCD Data Port
$0D07	$1303			BCF	STATUS, RP1
$0D08	$1683			BSF	STATUS, RP0
$0D09	$0186			CLRF	TRISB, 1
;main.c,91 :: 		TRISD = 3;                            // LCD Control Port + Switch Bits
$0D0A	$3003			MOVLW	3
$0D0B	$0088			MOVWF	TRISD
;main.c,93 :: 		TRISA = 0;                            // Output Port (Axis 1)
$0D0C	$0185			CLRF	TRISA, 1
;main.c,95 :: 		TRISE = 0;                            // Output Port (Axis 2)
$0D0D	$0189			CLRF	TRISE, 1
;main.c,97 :: 		TRISC = 0;                            // Output Port (Axis 3) + Serial Communication Bits
$0D0E	$0187			CLRF	TRISC, 1
;main.c,99 :: 		AXIS1_ENABLE_BIT = 0; // Disable axis 1
$0D0F	$10A0			BCF	_PORTA_V, 1
;main.c,101 :: 		AXIS2_ENABLE_BIT = 0; // Disable axis 2
$0D10	$10A1			BCF	_PORTE_V, 1
;main.c,103 :: 		AXIS3_ENABLE_BIT = 0; // Disable axis 3
$0D11	$1283			BCF	STATUS, RP0
$0D12	$1087			BCF	PORTC, 1
;main.c,105 :: 		AXIS1_DIRECTION_BIT = 0; // Set direction of axis 1 to forward
$0D13	$1683			BSF	STATUS, RP0
$0D14	$1020			BCF	_PORTA_V, 0
;main.c,107 :: 		AXIS2_DIRECTION_BIT = 0; // Set direction of axis 2 to forward
$0D15	$1021			BCF	_PORTE_V, 0
;main.c,109 :: 		AXIS3_DIRECTION_BIT = 0; // Set direction of axis 3 to forward
$0D16	$1283			BCF	STATUS, RP0
$0D17	$1007			BCF	PORTC, 0
;main.c,111 :: 		AXIS1_STEP_BIT = 1; // Initialize axis 1 step output to 1
$0D18	$1683			BSF	STATUS, RP0
$0D19	$1520			BSF	_PORTA_V, 2
;main.c,113 :: 		AXIS2_STEP_BIT = 1; // Initialize axis 2 step output to 1
$0D1A	$1521			BSF	_PORTE_V, 2
;main.c,115 :: 		AXIS3_STEP_BIT = 1; // Initialize axis 3 step output to 1
$0D1B	$1283			BCF	STATUS, RP0
$0D1C	$1507			BSF	PORTC, 2
;main.c,117 :: 		WriteVirtualPorts();
$0D1D	$118A			BCF	PCLATH, 3
$0D1E	$236D			CALL	_WriteVirtualPorts
$0D1F	$158A			BSF	PCLATH, 3
;main.c,119 :: 		delay_ms(50);
$0D20	$3002			MOVLW	2
$0D21	$00FC			MOVWF	STACK_12
$0D22	$30FF			MOVLW	255
$0D23	$00FB			MOVWF	STACK_11
$0D24	$30FF			MOVLW	255
$0D25	$00FA			MOVWF	STACK_10
$0D26	$0BFC			DECFSZ	STACK_12, F
$0D27	$2D29			GOTO	$+2
$0D28	$2D30			GOTO	$+8
$0D29	$0BFB			DECFSZ	STACK_11, F
$0D2A	$2D2C			GOTO	$+2
$0D2B	$2D2F			GOTO	$+4
$0D2C	$0BFA			DECFSZ	STACK_10, F
$0D2D	$2D2C			GOTO	$-1
$0D2E	$2D29			GOTO	$-5
$0D2F	$2D26			GOTO	$-9
$0D30	$3046			MOVLW	70
$0D31	$00FB			MOVWF	STACK_11
$0D32	$30FF			MOVLW	255
$0D33	$00FA			MOVWF	STACK_10
$0D34	$0BFB			DECFSZ	STACK_11, F
$0D35	$2D37			GOTO	$+2
$0D36	$2D3A			GOTO	$+4
$0D37	$0BFA			DECFSZ	STACK_10, F
$0D38	$2D37			GOTO	$-1
$0D39	$2D34			GOTO	$-5
$0D3A	$30CF			MOVLW	207
$0D3B	$00FA			MOVWF	STACK_10
$0D3C	$0BFA			DECFSZ	STACK_10, F
$0D3D	$2D3C			GOTO	$-1
$0D3E	$0000			NOP
;main.c,121 :: 		Intialize_LCD();
$0D3F	$2285			CALL	_Intialize_LCD
;main.c,123 :: 		DisplayScreen1();
$0D40	$22AB			CALL	_DisplayScreen1
;main.c,125 :: 		Usart_Init(BAUD_RATE);
$0D41	$3004			MOVLW	4
$0D42	$1303			BCF	STATUS, RP1
$0D43	$1683			BSF	STATUS, RP0
$0D44	$0099			MOVWF	SPBRG
$0D45	$1518			BSF	TXSTA, BRGH
$0D46	$23CA			CALL	_Usart_Init
;main.c,127 :: 		CTS = 0;
$0D47	$1303			BCF	STATUS, RP1
$0D48	$1287			BCF	PORTC, 5
;main.c,131 :: 		SendConstLine(newline);
$0D49	$30BC			MOVLW	#_newline
$0D4A	$1703			BSF	STATUS, RP1
$0D4B	$00D6			MOVWF	FARG_SendConstLine+0
$0D4C	$3006			MOVLW	@#_newline
$0D4D	$00D7			MOVWF	FARG_SendConstLine+1
$0D4E	$118A			BCF	PCLATH, 3
$0D4F	$2652			CALL	_SendConstLine
$0D50	$158A			BSF	PCLATH, 3
;main.c,133 :: 		SendConstLine(newline);
$0D51	$30BC			MOVLW	#_newline
$0D52	$1703			BSF	STATUS, RP1
$0D53	$00D6			MOVWF	FARG_SendConstLine+0
$0D54	$3006			MOVLW	@#_newline
$0D55	$00D7			MOVWF	FARG_SendConstLine+1
$0D56	$118A			BCF	PCLATH, 3
$0D57	$2652			CALL	_SendConstLine
$0D58	$158A			BSF	PCLATH, 3
;main.c,135 :: 		SendConstLine(Banner1);
$0D59	$30D6			MOVLW	#_banner1
$0D5A	$1703			BSF	STATUS, RP1
$0D5B	$00D6			MOVWF	FARG_SendConstLine+0
$0D5C	$300A			MOVLW	@#_banner1
$0D5D	$00D7			MOVWF	FARG_SendConstLine+1
$0D5E	$118A			BCF	PCLATH, 3
$0D5F	$2652			CALL	_SendConstLine
$0D60	$158A			BSF	PCLATH, 3
;main.c,137 :: 		SendConstLine(Banner2);
$0D61	$3004			MOVLW	#_banner2
$0D62	$1703			BSF	STATUS, RP1
$0D63	$00D6			MOVWF	FARG_SendConstLine+0
$0D64	$300B			MOVLW	@#_banner2
$0D65	$00D7			MOVWF	FARG_SendConstLine+1
$0D66	$118A			BCF	PCLATH, 3
$0D67	$2652			CALL	_SendConstLine
$0D68	$158A			BSF	PCLATH, 3
;main.c,139 :: 		SendConstLine(Banner3);
$0D69	$3032			MOVLW	#_banner3
$0D6A	$1703			BSF	STATUS, RP1
$0D6B	$00D6			MOVWF	FARG_SendConstLine+0
$0D6C	$300B			MOVLW	@#_banner3
$0D6D	$00D7			MOVWF	FARG_SendConstLine+1
$0D6E	$118A			BCF	PCLATH, 3
$0D6F	$2652			CALL	_SendConstLine
$0D70	$158A			BSF	PCLATH, 3
;main.c,141 :: 		SendConstLine(Banner4);
$0D71	$3060			MOVLW	#_banner4
$0D72	$1703			BSF	STATUS, RP1
$0D73	$00D6			MOVWF	FARG_SendConstLine+0
$0D74	$300B			MOVLW	@#_banner4
$0D75	$00D7			MOVWF	FARG_SendConstLine+1
$0D76	$118A			BCF	PCLATH, 3
$0D77	$2652			CALL	_SendConstLine
$0D78	$158A			BSF	PCLATH, 3
;main.c,143 :: 		SendConstLine(Banner5);
$0D79	$308E			MOVLW	#_banner5
$0D7A	$1703			BSF	STATUS, RP1
$0D7B	$00D6			MOVWF	FARG_SendConstLine+0
$0D7C	$300B			MOVLW	@#_banner5
$0D7D	$00D7			MOVWF	FARG_SendConstLine+1
$0D7E	$118A			BCF	PCLATH, 3
$0D7F	$2652			CALL	_SendConstLine
$0D80	$158A			BSF	PCLATH, 3
;main.c,145 :: 		SendConstLine(newline);
$0D81	$30BC			MOVLW	#_newline
$0D82	$1703			BSF	STATUS, RP1
$0D83	$00D6			MOVWF	FARG_SendConstLine+0
$0D84	$3006			MOVLW	@#_newline
$0D85	$00D7			MOVWF	FARG_SendConstLine+1
$0D86	$118A			BCF	PCLATH, 3
$0D87	$2652			CALL	_SendConstLine
$0D88	$158A			BSF	PCLATH, 3
;main.c,147 :: 		Prompt();
$0D89	$23BC			CALL	_Prompt
;main.c,148 :: 		}
$0D8A	$0008			RETURN
$0D8B	$	_Usart_Data_Ready:
$0D8B	$3000			MOVLW	0
$0D8C	$1303			BCF	STATUS, RP1
$0D8D	$1283			BCF	STATUS, RP0
$0D8E	$1A8C			BTFSC	PIR1, 5
$0D8F	$3001			MOVLW	1
$0D90	$00F1			MOVWF	STACK_1
$0D91	$0871			MOVF	STACK_1, 0
$0D92	$00F0			MOVWF	STACK_0
$0D93	$0008			RETURN
$0D94	$	_Usart_Read:
$0D94	$1303			BCF	STATUS, RP1
$0D95	$1283			BCF	STATUS, RP0
$0D96	$081A			MOVF	RCREG, 0
$0D97	$1703			BSF	STATUS, RP1
$0D98	$00D0			MOVWF	Usart_Read_tmp_L0
$0D99	$1303			BCF	STATUS, RP1
$0D9A	$1C98			BTFSS	RCSTA, 1
$0D9B	$2D9E			GOTO	L_Usart_Read_2
$0D9C	$1218			BCF	RCSTA, 4
$0D9D	$1618			BSF	RCSTA, 4
$0D9E	$	L_Usart_Read_2:
$0D9E	$1703			BSF	STATUS, RP1
$0D9F	$0850			MOVF	Usart_Read_tmp_L0, 0
$0DA0	$00F0			MOVWF	STACK_0
$0DA1	$0008			RETURN
$0DA2	$	_ValidChar:
;functions.h,70 :: 		short ValidChar(char i)
;functions.h,74 :: 		if (i>31 && i<127) return 1;
$0DA2	$1703			BSF	STATUS, RP1
$0DA3	$1283			BCF	STATUS, RP0
$0DA4	$0850			MOVF	FARG_ValidChar+0, 0
$0DA5	$3C1F			SUBLW	31
$0DA6	$1803			BTFSC	STATUS, C
$0DA7	$2DAF			GOTO	L_ValidChar_22
$0DA8	$307F			MOVLW	127
$0DA9	$0250			SUBWF	FARG_ValidChar+0, 0
$0DAA	$1803			BTFSC	STATUS, C
$0DAB	$2DAF			GOTO	L_ValidChar_22
$0DAC	$	L118_ex_L_ValidChar_22:
$0DAC	$3001			MOVLW	1
$0DAD	$00F0			MOVWF	STACK_0
$0DAE	$0008			RETURN
$0DAF	$	L_ValidChar_22:
;functions.h,76 :: 		return 0;
$0DAF	$01F0			CLRF	STACK_0, 1
;functions.h,77 :: 		}
$0DB0	$0008			RETURN
$1800	$	_ProcessCommand:
;commands.h,423 :: 		void ProcessCommand()
;commands.h,427 :: 		if (ProcessACC()) return;
$1800	$118A			BCF	PCLATH, 3
$1801	$2000			CALL	_ProcessACC
$1802	$158A			BSF	PCLATH, 3
$1803	$0870			MOVF	STACK_0, 0
$1804	$1903			BTFSC	STATUS, Z
$1805	$2807			GOTO	L_ProcessCommand_164
$1806	$0008			RETURN
$1807	$	L_ProcessCommand_164:
;commands.h,431 :: 		if (IsCommand(cmd20))
$1807	$3020			MOVLW	_b
$1808	$1703			BSF	STATUS, RP1
$1809	$00D6			MOVWF	FARG_strcmp_c+0
$180A	$30DF			MOVLW	#_cmd20
$180B	$00D7			MOVWF	FARG_strcmp_c+1
$180C	$300B			MOVLW	@#_cmd20
$180D	$00D8			MOVWF	FARG_strcmp_c+2
$180E	$118A			BCF	PCLATH, 3
$180F	$120A			BCF	PCLATH, 4
$1810	$257E			CALL	_strcmp_c
$1811	$158A			BSF	PCLATH, 3
$1812	$160A			BSF	PCLATH, 4
$1813	$0870			MOVF	STACK_0, 0
$1814	$1903			BTFSC	STATUS, Z
$1815	$2820			GOTO	L_ProcessCommand_165
;commands.h,433 :: 		SendConstLine(FIRMWARE_VERSION);
$1816	$30E9			MOVLW	#lstr_1_commands
$1817	$00D6			MOVWF	FARG_SendConstLine+0
$1818	$300B			MOVLW	@#lstr_1_commands
$1819	$00D7			MOVWF	FARG_SendConstLine+1
$181A	$118A			BCF	PCLATH, 3
$181B	$120A			BCF	PCLATH, 4
$181C	$2652			CALL	_SendConstLine
$181D	$158A			BSF	PCLATH, 3
$181E	$160A			BSF	PCLATH, 4
;commands.h,435 :: 		return;
$181F	$0008			RETURN
;commands.h,436 :: 		}
$1820	$	L_ProcessCommand_165:
;commands.h,438 :: 		if (IsCommand(cmd19)) // Check if input is "go"
$1820	$3020			MOVLW	_b
$1821	$1703			BSF	STATUS, RP1
$1822	$00D6			MOVWF	FARG_strcmp_c+0
$1823	$30EF			MOVLW	#_cmd19
$1824	$00D7			MOVWF	FARG_strcmp_c+1
$1825	$300B			MOVLW	@#_cmd19
$1826	$00D8			MOVWF	FARG_strcmp_c+2
$1827	$118A			BCF	PCLATH, 3
$1828	$120A			BCF	PCLATH, 4
$1829	$257E			CALL	_strcmp_c
$182A	$158A			BSF	PCLATH, 3
$182B	$160A			BSF	PCLATH, 4
$182C	$0870			MOVF	STACK_0, 0
$182D	$1903			BTFSC	STATUS, Z
$182E	$283D			GOTO	L_ProcessCommand_166
;commands.h,440 :: 		ProcessGo();
$182F	$120A			BCF	PCLATH, 4
$1830	$23F4			CALL	_ProcessGo
$1831	$160A			BSF	PCLATH, 4
;commands.h,442 :: 		SendConstLine(msg1); // Send "OK"
$1832	$308C			MOVLW	#_msg1
$1833	$1703			BSF	STATUS, RP1
$1834	$00D6			MOVWF	FARG_SendConstLine+0
$1835	$3006			MOVLW	@#_msg1
$1836	$00D7			MOVWF	FARG_SendConstLine+1
$1837	$118A			BCF	PCLATH, 3
$1838	$120A			BCF	PCLATH, 4
$1839	$2652			CALL	_SendConstLine
$183A	$158A			BSF	PCLATH, 3
$183B	$160A			BSF	PCLATH, 4
;commands.h,444 :: 		return;
$183C	$0008			RETURN
;commands.h,445 :: 		}
$183D	$	L_ProcessCommand_166:
;commands.h,447 :: 		if (IsCommand(cmd21)) // Check if input is "stop"
$183D	$3020			MOVLW	_b
$183E	$1703			BSF	STATUS, RP1
$183F	$00D6			MOVWF	FARG_strcmp_c+0
$1840	$305F			MOVLW	#_cmd21
$1841	$00D7			MOVWF	FARG_strcmp_c+1
$1842	$300C			MOVLW	@#_cmd21
$1843	$00D8			MOVWF	FARG_strcmp_c+2
$1844	$118A			BCF	PCLATH, 3
$1845	$120A			BCF	PCLATH, 4
$1846	$257E			CALL	_strcmp_c
$1847	$158A			BSF	PCLATH, 3
$1848	$160A			BSF	PCLATH, 4
$1849	$0870			MOVF	STACK_0, 0
$184A	$1903			BTFSC	STATUS, Z
$184B	$285C			GOTO	L_ProcessCommand_167
;commands.h,449 :: 		ProcessStop();
$184C	$118A			BCF	PCLATH, 3
$184D	$120A			BCF	PCLATH, 4
$184E	$2397			CALL	_ProcessStop
$184F	$158A			BSF	PCLATH, 3
$1850	$160A			BSF	PCLATH, 4
;commands.h,451 :: 		SendConstLine(msg1); //Send "OK"
$1851	$308C			MOVLW	#_msg1
$1852	$1703			BSF	STATUS, RP1
$1853	$00D6			MOVWF	FARG_SendConstLine+0
$1854	$3006			MOVLW	@#_msg1
$1855	$00D7			MOVWF	FARG_SendConstLine+1
$1856	$118A			BCF	PCLATH, 3
$1857	$120A			BCF	PCLATH, 4
$1858	$2652			CALL	_SendConstLine
$1859	$158A			BSF	PCLATH, 3
$185A	$160A			BSF	PCLATH, 4
;commands.h,453 :: 		return;
$185B	$0008			RETURN
;commands.h,454 :: 		}
$185C	$	L_ProcessCommand_167:
;commands.h,456 :: 		if (IsCommand(cmd23)) // Check if input is "screen 1"
$185C	$3020			MOVLW	_b
$185D	$1703			BSF	STATUS, RP1
$185E	$00D6			MOVWF	FARG_strcmp_c+0
$185F	$3066			MOVLW	#_cmd23
$1860	$00D7			MOVWF	FARG_strcmp_c+1
$1861	$300C			MOVLW	@#_cmd23
$1862	$00D8			MOVWF	FARG_strcmp_c+2
$1863	$118A			BCF	PCLATH, 3
$1864	$120A			BCF	PCLATH, 4
$1865	$257E			CALL	_strcmp_c
$1866	$158A			BSF	PCLATH, 3
$1867	$160A			BSF	PCLATH, 4
$1868	$0870			MOVF	STACK_0, 0
$1869	$1903			BTFSC	STATUS, Z
$186A	$2878			GOTO	L_ProcessCommand_168
;commands.h,458 :: 		DisplayScreen1();
$186B	$120A			BCF	PCLATH, 4
$186C	$22AB			CALL	_DisplayScreen1
$186D	$160A			BSF	PCLATH, 4
;commands.h,460 :: 		SendConstLine(msg1); //Send "OK"
$186E	$308C			MOVLW	#_msg1
$186F	$00D6			MOVWF	FARG_SendConstLine+0
$1870	$3006			MOVLW	@#_msg1
$1871	$00D7			MOVWF	FARG_SendConstLine+1
$1872	$118A			BCF	PCLATH, 3
$1873	$120A			BCF	PCLATH, 4
$1874	$2652			CALL	_SendConstLine
$1875	$158A			BSF	PCLATH, 3
$1876	$160A			BSF	PCLATH, 4
;commands.h,462 :: 		return;
$1877	$0008			RETURN
;commands.h,463 :: 		}
$1878	$	L_ProcessCommand_168:
;commands.h,465 :: 		if (IsCommand(cmd24)) // Check if input is "screen 2"
$1878	$3020			MOVLW	_b
$1879	$1703			BSF	STATUS, RP1
$187A	$00D6			MOVWF	FARG_strcmp_c+0
$187B	$3071			MOVLW	#_cmd24
$187C	$00D7			MOVWF	FARG_strcmp_c+1
$187D	$300C			MOVLW	@#_cmd24
$187E	$00D8			MOVWF	FARG_strcmp_c+2
$187F	$118A			BCF	PCLATH, 3
$1880	$120A			BCF	PCLATH, 4
$1881	$257E			CALL	_strcmp_c
$1882	$158A			BSF	PCLATH, 3
$1883	$160A			BSF	PCLATH, 4
$1884	$0870			MOVF	STACK_0, 0
$1885	$1903			BTFSC	STATUS, Z
$1886	$2896			GOTO	L_ProcessCommand_169
;commands.h,467 :: 		DisplayScreen2();
$1887	$118A			BCF	PCLATH, 3
$1888	$120A			BCF	PCLATH, 4
$1889	$25CF			CALL	_DisplayScreen2
$188A	$158A			BSF	PCLATH, 3
$188B	$160A			BSF	PCLATH, 4
;commands.h,469 :: 		SendConstLine(msg1); //Send "OK"
$188C	$308C			MOVLW	#_msg1
$188D	$00D6			MOVWF	FARG_SendConstLine+0
$188E	$3006			MOVLW	@#_msg1
$188F	$00D7			MOVWF	FARG_SendConstLine+1
$1890	$118A			BCF	PCLATH, 3
$1891	$120A			BCF	PCLATH, 4
$1892	$2652			CALL	_SendConstLine
$1893	$158A			BSF	PCLATH, 3
$1894	$160A			BSF	PCLATH, 4
;commands.h,471 :: 		return;
$1895	$0008			RETURN
;commands.h,472 :: 		}
$1896	$	L_ProcessCommand_169:
;commands.h,474 :: 		if (IsCommand(cmd25)) // Check if input is "ping"
$1896	$3020			MOVLW	_b
$1897	$1703			BSF	STATUS, RP1
$1898	$00D6			MOVWF	FARG_strcmp_c+0
$1899	$307C			MOVLW	#_cmd25
$189A	$00D7			MOVWF	FARG_strcmp_c+1
$189B	$300C			MOVLW	@#_cmd25
$189C	$00D8			MOVWF	FARG_strcmp_c+2
$189D	$118A			BCF	PCLATH, 3
$189E	$120A			BCF	PCLATH, 4
$189F	$257E			CALL	_strcmp_c
$18A0	$158A			BSF	PCLATH, 3
$18A1	$160A			BSF	PCLATH, 4
$18A2	$0870			MOVF	STACK_0, 0
$18A3	$1903			BTFSC	STATUS, Z
$18A4	$28AF			GOTO	L_ProcessCommand_170
;commands.h,476 :: 		SendConstLine(msg1); // Send "OK"
$18A5	$308C			MOVLW	#_msg1
$18A6	$00D6			MOVWF	FARG_SendConstLine+0
$18A7	$3006			MOVLW	@#_msg1
$18A8	$00D7			MOVWF	FARG_SendConstLine+1
$18A9	$118A			BCF	PCLATH, 3
$18AA	$120A			BCF	PCLATH, 4
$18AB	$2652			CALL	_SendConstLine
$18AC	$158A			BSF	PCLATH, 3
$18AD	$160A			BSF	PCLATH, 4
;commands.h,478 :: 		return;
$18AE	$0008			RETURN
;commands.h,479 :: 		}
$18AF	$	L_ProcessCommand_170:
;commands.h,481 :: 		if (IsCommand(cmd26)) // Check if input is "communication test"
$18AF	$3020			MOVLW	_b
$18B0	$1703			BSF	STATUS, RP1
$18B1	$00D6			MOVWF	FARG_strcmp_c+0
$18B2	$3083			MOVLW	#_cmd26
$18B3	$00D7			MOVWF	FARG_strcmp_c+1
$18B4	$300C			MOVLW	@#_cmd26
$18B5	$00D8			MOVWF	FARG_strcmp_c+2
$18B6	$118A			BCF	PCLATH, 3
$18B7	$120A			BCF	PCLATH, 4
$18B8	$257E			CALL	_strcmp_c
$18B9	$158A			BSF	PCLATH, 3
$18BA	$160A			BSF	PCLATH, 4
$18BB	$0870			MOVF	STACK_0, 0
$18BC	$1903			BTFSC	STATUS, Z
$18BD	$28D9			GOTO	L_ProcessCommand_171
;commands.h,483 :: 		if (comm_test > 1)
$18BE	$0846			MOVF	_comm_test, 0
$18BF	$3C01			SUBLW	1
$18C0	$1803			BTFSC	STATUS, C
$18C1	$28CD			GOTO	L_ProcessCommand_172
;commands.h,485 :: 		comm_test = 0;
$18C2	$01C6			CLRF	_comm_test, 1
;commands.h,487 :: 		SendConstLine(msg3); // Send "Undefined Command"
$18C3	$3098			MOVLW	#_msg3
$18C4	$00D6			MOVWF	FARG_SendConstLine+0
$18C5	$300C			MOVLW	@#_msg3
$18C6	$00D7			MOVWF	FARG_SendConstLine+1
$18C7	$118A			BCF	PCLATH, 3
$18C8	$120A			BCF	PCLATH, 4
$18C9	$2652			CALL	_SendConstLine
$18CA	$158A			BSF	PCLATH, 3
$18CB	$160A			BSF	PCLATH, 4
;commands.h,488 :: 		}
$18CC	$28D8			GOTO	L_ProcessCommand_173
$18CD	$	L_ProcessCommand_172:
;commands.h,491 :: 		comm_test++;
$18CD	$1703			BSF	STATUS, RP1
$18CE	$0AC6			INCF	_comm_test, 1
;commands.h,493 :: 		SendConstLine(msg1); //Send "OK"
$18CF	$308C			MOVLW	#_msg1
$18D0	$00D6			MOVWF	FARG_SendConstLine+0
$18D1	$3006			MOVLW	@#_msg1
$18D2	$00D7			MOVWF	FARG_SendConstLine+1
$18D3	$118A			BCF	PCLATH, 3
$18D4	$120A			BCF	PCLATH, 4
$18D5	$2652			CALL	_SendConstLine
$18D6	$158A			BSF	PCLATH, 3
$18D7	$160A			BSF	PCLATH, 4
;commands.h,494 :: 		}
$18D8	$	L_ProcessCommand_173:
;commands.h,496 :: 		return;
$18D8	$0008			RETURN
;commands.h,497 :: 		}
$18D9	$	L_ProcessCommand_171:
;commands.h,499 :: 		if (CommandStarts(cmd33)) // Check if input is "lcd1 x", where x is a string
$18D9	$3020			MOVLW	_b
$18DA	$1703			BSF	STATUS, RP1
$18DB	$00D6			MOVWF	FARG_str_starts_with+0
$18DC	$30AC			MOVLW	#_cmd33
$18DD	$00D7			MOVWF	FARG_str_starts_with+1
$18DE	$300C			MOVLW	@#_cmd33
$18DF	$00D8			MOVWF	FARG_str_starts_with+2
$18E0	$120A			BCF	PCLATH, 4
$18E1	$202C			CALL	_str_starts_with
$18E2	$160A			BSF	PCLATH, 4
$18E3	$0870			MOVF	STACK_0, 0
$18E4	$1903			BTFSC	STATUS, Z
$18E5	$293C			GOTO	L_ProcessCommand_174
;commands.h,501 :: 		for (t=5; b[t] != '\n' && (t-5)<16; t++)
$18E6	$3005			MOVLW	5
$18E7	$00C7			MOVWF	_t
$18E8	$3000			MOVLW	0
$18E9	$00C8			MOVWF	_t+1
$18EA	$	L_ProcessCommand_175:
$18EA	$0847			MOVF	_t, 0
$18EB	$3F20			ADDLW	_b
$18EC	$0084			MOVWF	FSR
$18ED	$0800			MOVF	INDF, 0
$18EE	$00F4			MOVWF	STACK_4
$18EF	$0874			MOVF	STACK_4, 0
$18F0	$3A0A			XORLW	10
$18F1	$1903			BTFSC	STATUS, Z
$18F2	$291E			GOTO	L_ProcessCommand_176
$18F3	$3005			MOVLW	5
$18F4	$0247			SUBWF	_t, 0
$18F5	$00F4			MOVWF	STACK_4
$18F6	$3000			MOVLW	0
$18F7	$1C03			BTFSS	STATUS, C
$18F8	$3F01			ADDLW	1
$18F9	$0248			SUBWF	_t+1, 0
$18FA	$00F5			MOVWF	STACK_4+1
$18FB	$3080			MOVLW	128
$18FC	$0675			XORWF	STACK_4+1, 0
$18FD	$00F0			MOVWF	STACK_0
$18FE	$3080			MOVLW	128
$18FF	$0270			SUBWF	STACK_0, 0
$1900	$1D03			BTFSS	STATUS, Z
$1901	$2904			GOTO	L_ProcessCommand_222
$1902	$3010			MOVLW	16
$1903	$0274			SUBWF	STACK_4, 0
$1904	$	L_ProcessCommand_222:
$1904	$1803			BTFSC	STATUS, C
$1905	$291E			GOTO	L_ProcessCommand_176
$1906	$	L1143_ex_L_ProcessCommand_176:
;commands.h,503 :: 		lcd1[t-5] = b[t];
$1906	$3005			MOVLW	5
$1907	$0247			SUBWF	_t, 0
$1908	$00F0			MOVWF	STACK_0
$1909	$3000			MOVLW	0
$190A	$1C03			BTFSS	STATUS, C
$190B	$3F01			ADDLW	1
$190C	$0248			SUBWF	_t+1, 0
$190D	$00F1			MOVWF	STACK_0+1
$190E	$0870			MOVF	STACK_0, 0
$190F	$3F50			ADDLW	_lcd1
$1910	$00F4			MOVWF	STACK_4
$1911	$0847			MOVF	_t, 0
$1912	$3F20			ADDLW	_b
$1913	$0084			MOVWF	FSR
$1914	$0800			MOVF	INDF, 0
$1915	$00F0			MOVWF	STACK_0
$1916	$0874			MOVF	STACK_4, 0
$1917	$0084			MOVWF	FSR
$1918	$0870			MOVF	STACK_0, 0
$1919	$0080			MOVWF	INDF
;commands.h,504 :: 		}
$191A	$	L_ProcessCommand_177:
;commands.h,501 :: 		for (t=5; b[t] != '\n' && (t-5)<16; t++)
$191A	$0AC7			INCF	_t, 1
$191B	$1903			BTFSC	STATUS, Z
$191C	$0AC8			INCF	_t+1, 1
;commands.h,504 :: 		}
$191D	$28EA			GOTO	L_ProcessCommand_175
$191E	$	L_ProcessCommand_176:
;commands.h,506 :: 		lcd1[t-5] = 0;
$191E	$3005			MOVLW	5
$191F	$0247			SUBWF	_t, 0
$1920	$00F0			MOVWF	STACK_0
$1921	$3000			MOVLW	0
$1922	$1C03			BTFSS	STATUS, C
$1923	$3F01			ADDLW	1
$1924	$0248			SUBWF	_t+1, 0
$1925	$00F1			MOVWF	STACK_0+1
$1926	$3050			MOVLW	_lcd1
$1927	$07F0			ADDWF	STACK_0, 1
$1928	$0870			MOVF	STACK_0, 0
$1929	$0084			MOVWF	FSR
$192A	$0180			CLRF	INDF, 1
;commands.h,508 :: 		if (lcd_screen == 1) DisplayScreen1();
$192B	$0830			MOVF	_lcd_screen, 0
$192C	$3A01			XORLW	1
$192D	$1D03			BTFSS	STATUS, Z
$192E	$2932			GOTO	L_ProcessCommand_180
$192F	$120A			BCF	PCLATH, 4
$1930	$22AB			CALL	_DisplayScreen1
$1931	$160A			BSF	PCLATH, 4
$1932	$	L_ProcessCommand_180:
;commands.h,510 :: 		SendConstLine(msg1); // Send "OK"
$1932	$308C			MOVLW	#_msg1
$1933	$00D6			MOVWF	FARG_SendConstLine+0
$1934	$3006			MOVLW	@#_msg1
$1935	$00D7			MOVWF	FARG_SendConstLine+1
$1936	$118A			BCF	PCLATH, 3
$1937	$120A			BCF	PCLATH, 4
$1938	$2652			CALL	_SendConstLine
$1939	$158A			BSF	PCLATH, 3
$193A	$160A			BSF	PCLATH, 4
;commands.h,512 :: 		return;
$193B	$0008			RETURN
;commands.h,513 :: 		}
$193C	$	L_ProcessCommand_174:
;commands.h,515 :: 		if (CommandStarts(cmd34)) // Check if input is "lcd2 x", where x is a string
$193C	$3020			MOVLW	_b
$193D	$1703			BSF	STATUS, RP1
$193E	$00D6			MOVWF	FARG_str_starts_with+0
$193F	$30B4			MOVLW	#_cmd34
$1940	$00D7			MOVWF	FARG_str_starts_with+1
$1941	$300C			MOVLW	@#_cmd34
$1942	$00D8			MOVWF	FARG_str_starts_with+2
$1943	$120A			BCF	PCLATH, 4
$1944	$202C			CALL	_str_starts_with
$1945	$160A			BSF	PCLATH, 4
$1946	$0870			MOVF	STACK_0, 0
$1947	$1903			BTFSC	STATUS, Z
$1948	$299F			GOTO	L_ProcessCommand_181
;commands.h,517 :: 		for (t=5; b[t] != '\n' && (t-5)<16; t++)
$1949	$3005			MOVLW	5
$194A	$00C7			MOVWF	_t
$194B	$3000			MOVLW	0
$194C	$00C8			MOVWF	_t+1
$194D	$	L_ProcessCommand_182:
$194D	$0847			MOVF	_t, 0
$194E	$3F20			ADDLW	_b
$194F	$0084			MOVWF	FSR
$1950	$0800			MOVF	INDF, 0
$1951	$00F4			MOVWF	STACK_4
$1952	$0874			MOVF	STACK_4, 0
$1953	$3A0A			XORLW	10
$1954	$1903			BTFSC	STATUS, Z
$1955	$2981			GOTO	L_ProcessCommand_183
$1956	$3005			MOVLW	5
$1957	$0247			SUBWF	_t, 0
$1958	$00F4			MOVWF	STACK_4
$1959	$3000			MOVLW	0
$195A	$1C03			BTFSS	STATUS, C
$195B	$3F01			ADDLW	1
$195C	$0248			SUBWF	_t+1, 0
$195D	$00F5			MOVWF	STACK_4+1
$195E	$3080			MOVLW	128
$195F	$0675			XORWF	STACK_4+1, 0
$1960	$00F0			MOVWF	STACK_0
$1961	$3080			MOVLW	128
$1962	$0270			SUBWF	STACK_0, 0
$1963	$1D03			BTFSS	STATUS, Z
$1964	$2967			GOTO	L_ProcessCommand_223
$1965	$3010			MOVLW	16
$1966	$0274			SUBWF	STACK_4, 0
$1967	$	L_ProcessCommand_223:
$1967	$1803			BTFSC	STATUS, C
$1968	$2981			GOTO	L_ProcessCommand_183
$1969	$	L1184_ex_L_ProcessCommand_183:
;commands.h,519 :: 		lcd2[t-5] = b[t];
$1969	$3005			MOVLW	5
$196A	$0247			SUBWF	_t, 0
$196B	$00F0			MOVWF	STACK_0
$196C	$3000			MOVLW	0
$196D	$1C03			BTFSS	STATUS, C
$196E	$3F01			ADDLW	1
$196F	$0248			SUBWF	_t+1, 0
$1970	$00F1			MOVWF	STACK_0+1
$1971	$0870			MOVF	STACK_0, 0
$1972	$3F60			ADDLW	_lcd2
$1973	$00F4			MOVWF	STACK_4
$1974	$0847			MOVF	_t, 0
$1975	$3F20			ADDLW	_b
$1976	$0084			MOVWF	FSR
$1977	$0800			MOVF	INDF, 0
$1978	$00F0			MOVWF	STACK_0
$1979	$0874			MOVF	STACK_4, 0
$197A	$0084			MOVWF	FSR
$197B	$0870			MOVF	STACK_0, 0
$197C	$0080			MOVWF	INDF
;commands.h,520 :: 		}
$197D	$	L_ProcessCommand_184:
;commands.h,517 :: 		for (t=5; b[t] != '\n' && (t-5)<16; t++)
$197D	$0AC7			INCF	_t, 1
$197E	$1903			BTFSC	STATUS, Z
$197F	$0AC8			INCF	_t+1, 1
;commands.h,520 :: 		}
$1980	$294D			GOTO	L_ProcessCommand_182
$1981	$	L_ProcessCommand_183:
;commands.h,522 :: 		lcd2[t-5] = 0;
$1981	$3005			MOVLW	5
$1982	$0247			SUBWF	_t, 0
$1983	$00F0			MOVWF	STACK_0
$1984	$3000			MOVLW	0
$1985	$1C03			BTFSS	STATUS, C
$1986	$3F01			ADDLW	1
$1987	$0248			SUBWF	_t+1, 0
$1988	$00F1			MOVWF	STACK_0+1
$1989	$3060			MOVLW	_lcd2
$198A	$07F0			ADDWF	STACK_0, 1
$198B	$0870			MOVF	STACK_0, 0
$198C	$0084			MOVWF	FSR
$198D	$0180			CLRF	INDF, 1
;commands.h,524 :: 		if (lcd_screen == 1) DisplayScreen1();
$198E	$0830			MOVF	_lcd_screen, 0
$198F	$3A01			XORLW	1
$1990	$1D03			BTFSS	STATUS, Z
$1991	$2995			GOTO	L_ProcessCommand_187
$1992	$120A			BCF	PCLATH, 4
$1993	$22AB			CALL	_DisplayScreen1
$1994	$160A			BSF	PCLATH, 4
$1995	$	L_ProcessCommand_187:
;commands.h,526 :: 		SendConstLine(msg1); // Send "OK"
$1995	$308C			MOVLW	#_msg1
$1996	$00D6			MOVWF	FARG_SendConstLine+0
$1997	$3006			MOVLW	@#_msg1
$1998	$00D7			MOVWF	FARG_SendConstLine+1
$1999	$118A			BCF	PCLATH, 3
$199A	$120A			BCF	PCLATH, 4
$199B	$2652			CALL	_SendConstLine
$199C	$158A			BSF	PCLATH, 3
$199D	$160A			BSF	PCLATH, 4
;commands.h,528 :: 		return;
$199E	$0008			RETURN
;commands.h,529 :: 		}
$199F	$	L_ProcessCommand_181:
;commands.h,531 :: 		if (CommandStarts(cmd44)) // Check if input is "trace axis1"
$199F	$3020			MOVLW	_b
$19A0	$1703			BSF	STATUS, RP1
$19A1	$00D6			MOVWF	FARG_str_starts_with+0
$19A2	$30BC			MOVLW	#_cmd44
$19A3	$00D7			MOVWF	FARG_str_starts_with+1
$19A4	$300C			MOVLW	@#_cmd44
$19A5	$00D8			MOVWF	FARG_str_starts_with+2
$19A6	$120A			BCF	PCLATH, 4
$19A7	$202C			CALL	_str_starts_with
$19A8	$160A			BSF	PCLATH, 4
$19A9	$0870			MOVF	STACK_0, 0
$19AA	$1903			BTFSC	STATUS, Z
$19AB	$29BC			GOTO	L_ProcessCommand_188
;commands.h,533 :: 		trace_axis = 1;
$19AC	$3001			MOVLW	1
$19AD	$1303			BCF	STATUS, RP1
$19AE	$1683			BSF	STATUS, RP0
$19AF	$00EF			MOVWF	_trace_axis
;commands.h,535 :: 		SendConstLine(msg1); // Send "OK"
$19B0	$308C			MOVLW	#_msg1
$19B1	$1703			BSF	STATUS, RP1
$19B2	$1283			BCF	STATUS, RP0
$19B3	$00D6			MOVWF	FARG_SendConstLine+0
$19B4	$3006			MOVLW	@#_msg1
$19B5	$00D7			MOVWF	FARG_SendConstLine+1
$19B6	$118A			BCF	PCLATH, 3
$19B7	$120A			BCF	PCLATH, 4
$19B8	$2652			CALL	_SendConstLine
$19B9	$158A			BSF	PCLATH, 3
$19BA	$160A			BSF	PCLATH, 4
;commands.h,537 :: 		return;
$19BB	$0008			RETURN
;commands.h,538 :: 		}
$19BC	$	L_ProcessCommand_188:
;commands.h,540 :: 		if (CommandStarts(cmd45)) // Check if input is "trace axis2"
$19BC	$3020			MOVLW	_b
$19BD	$1703			BSF	STATUS, RP1
$19BE	$00D6			MOVWF	FARG_str_starts_with+0
$19BF	$30CA			MOVLW	#_cmd45
$19C0	$00D7			MOVWF	FARG_str_starts_with+1
$19C1	$300C			MOVLW	@#_cmd45
$19C2	$00D8			MOVWF	FARG_str_starts_with+2
$19C3	$120A			BCF	PCLATH, 4
$19C4	$202C			CALL	_str_starts_with
$19C5	$160A			BSF	PCLATH, 4
$19C6	$0870			MOVF	STACK_0, 0
$19C7	$1903			BTFSC	STATUS, Z
$19C8	$29D9			GOTO	L_ProcessCommand_189
;commands.h,542 :: 		trace_axis = 2;
$19C9	$3002			MOVLW	2
$19CA	$1303			BCF	STATUS, RP1
$19CB	$1683			BSF	STATUS, RP0
$19CC	$00EF			MOVWF	_trace_axis
;commands.h,544 :: 		SendConstLine(msg1); // Send "OK"
$19CD	$308C			MOVLW	#_msg1
$19CE	$1703			BSF	STATUS, RP1
$19CF	$1283			BCF	STATUS, RP0
$19D0	$00D6			MOVWF	FARG_SendConstLine+0
$19D1	$3006			MOVLW	@#_msg1
$19D2	$00D7			MOVWF	FARG_SendConstLine+1
$19D3	$118A			BCF	PCLATH, 3
$19D4	$120A			BCF	PCLATH, 4
$19D5	$2652			CALL	_SendConstLine
$19D6	$158A			BSF	PCLATH, 3
$19D7	$160A			BSF	PCLATH, 4
;commands.h,546 :: 		return;
$19D8	$0008			RETURN
;commands.h,547 :: 		}
$19D9	$	L_ProcessCommand_189:
;commands.h,549 :: 		if (CommandStarts(cmd46)) // Check if input is "trace axis3"
$19D9	$3020			MOVLW	_b
$19DA	$1703			BSF	STATUS, RP1
$19DB	$00D6			MOVWF	FARG_str_starts_with+0
$19DC	$30D8			MOVLW	#_cmd46
$19DD	$00D7			MOVWF	FARG_str_starts_with+1
$19DE	$300C			MOVLW	@#_cmd46
$19DF	$00D8			MOVWF	FARG_str_starts_with+2
$19E0	$120A			BCF	PCLATH, 4
$19E1	$202C			CALL	_str_starts_with
$19E2	$160A			BSF	PCLATH, 4
$19E3	$0870			MOVF	STACK_0, 0
$19E4	$1903			BTFSC	STATUS, Z
$19E5	$29F6			GOTO	L_ProcessCommand_190
;commands.h,551 :: 		trace_axis = 3;
$19E6	$3003			MOVLW	3
$19E7	$1303			BCF	STATUS, RP1
$19E8	$1683			BSF	STATUS, RP0
$19E9	$00EF			MOVWF	_trace_axis
;commands.h,553 :: 		SendConstLine(msg1); // Send "OK"
$19EA	$308C			MOVLW	#_msg1
$19EB	$1703			BSF	STATUS, RP1
$19EC	$1283			BCF	STATUS, RP0
$19ED	$00D6			MOVWF	FARG_SendConstLine+0
$19EE	$3006			MOVLW	@#_msg1
$19EF	$00D7			MOVWF	FARG_SendConstLine+1
$19F0	$118A			BCF	PCLATH, 3
$19F1	$120A			BCF	PCLATH, 4
$19F2	$2652			CALL	_SendConstLine
$19F3	$158A			BSF	PCLATH, 3
$19F4	$160A			BSF	PCLATH, 4
;commands.h,555 :: 		return;
$19F5	$0008			RETURN
;commands.h,556 :: 		}
$19F6	$	L_ProcessCommand_190:
;commands.h,558 :: 		if (CommandStarts(cmd47)) // Check if input is "trace off"
$19F6	$3020			MOVLW	_b
$19F7	$1703			BSF	STATUS, RP1
$19F8	$00D6			MOVWF	FARG_str_starts_with+0
$19F9	$30E6			MOVLW	#_cmd47
$19FA	$00D7			MOVWF	FARG_str_starts_with+1
$19FB	$300C			MOVLW	@#_cmd47
$19FC	$00D8			MOVWF	FARG_str_starts_with+2
$19FD	$120A			BCF	PCLATH, 4
$19FE	$202C			CALL	_str_starts_with
$19FF	$160A			BSF	PCLATH, 4
$1A00	$0870			MOVF	STACK_0, 0
$1A01	$1903			BTFSC	STATUS, Z
$1A02	$2A12			GOTO	L_ProcessCommand_191
;commands.h,560 :: 		trace_axis = 0;
$1A03	$1303			BCF	STATUS, RP1
$1A04	$1683			BSF	STATUS, RP0
$1A05	$01EF			CLRF	_trace_axis, 1
;commands.h,562 :: 		SendConstLine(msg1); // Send "OK"
$1A06	$308C			MOVLW	#_msg1
$1A07	$1703			BSF	STATUS, RP1
$1A08	$1283			BCF	STATUS, RP0
$1A09	$00D6			MOVWF	FARG_SendConstLine+0
$1A0A	$3006			MOVLW	@#_msg1
$1A0B	$00D7			MOVWF	FARG_SendConstLine+1
$1A0C	$118A			BCF	PCLATH, 3
$1A0D	$120A			BCF	PCLATH, 4
$1A0E	$2652			CALL	_SendConstLine
$1A0F	$158A			BSF	PCLATH, 3
$1A10	$160A			BSF	PCLATH, 4
;commands.h,564 :: 		return;
$1A11	$0008			RETURN
;commands.h,565 :: 		}
$1A12	$	L_ProcessCommand_191:
;commands.h,567 :: 		if (CommandStarts(cmd48)) // Check if input is "trace skip x", where x is a number
$1A12	$3020			MOVLW	_b
$1A13	$1703			BSF	STATUS, RP1
$1A14	$00D6			MOVWF	FARG_str_starts_with+0
$1A15	$30F2			MOVLW	#_cmd48
$1A16	$00D7			MOVWF	FARG_str_starts_with+1
$1A17	$300C			MOVLW	@#_cmd48
$1A18	$00D8			MOVWF	FARG_str_starts_with+2
$1A19	$120A			BCF	PCLATH, 4
$1A1A	$202C			CALL	_str_starts_with
$1A1B	$160A			BSF	PCLATH, 4
$1A1C	$0870			MOVF	STACK_0, 0
$1A1D	$1903			BTFSC	STATUS, Z
$1A1E	$2A3C			GOTO	L_ProcessCommand_192
;commands.h,569 :: 		trace_skip = Extract_Numeric_Argument(11);
$1A1F	$300B			MOVLW	11
$1A20	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1A21	$3000			MOVLW	0
$1A22	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1A23	$120A			BCF	PCLATH, 4
$1A24	$207C			CALL	_Extract_Numeric_Argument
$1A25	$160A			BSF	PCLATH, 4
$1A26	$0870			MOVF	STACK_0, 0
$1A27	$1303			BCF	STATUS, RP1
$1A28	$1683			BSF	STATUS, RP0
$1A29	$00A6			MOVWF	_trace_skip
$1A2A	$0871			MOVF	STACK_0+1, 0
$1A2B	$00A7			MOVWF	_trace_skip+1
$1A2C	$0872			MOVF	STACK_0+2, 0
$1A2D	$00A8			MOVWF	_trace_skip+2
$1A2E	$0873			MOVF	STACK_0+3, 0
$1A2F	$00A9			MOVWF	_trace_skip+3
;commands.h,571 :: 		SendConstLine(msg1); // Send "OK"
$1A30	$308C			MOVLW	#_msg1
$1A31	$1703			BSF	STATUS, RP1
$1A32	$1283			BCF	STATUS, RP0
$1A33	$00D6			MOVWF	FARG_SendConstLine+0
$1A34	$3006			MOVLW	@#_msg1
$1A35	$00D7			MOVWF	FARG_SendConstLine+1
$1A36	$118A			BCF	PCLATH, 3
$1A37	$120A			BCF	PCLATH, 4
$1A38	$2652			CALL	_SendConstLine
$1A39	$158A			BSF	PCLATH, 3
$1A3A	$160A			BSF	PCLATH, 4
;commands.h,573 :: 		return;
$1A3B	$0008			RETURN
;commands.h,574 :: 		}
$1A3C	$	L_ProcessCommand_192:
;commands.h,576 :: 		if (CommandStarts(cmdxx)) // Check if input is "pr2 x", where x is a number
$1A3C	$3020			MOVLW	_b
$1A3D	$1703			BSF	STATUS, RP1
$1A3E	$00D6			MOVWF	FARG_str_starts_with+0
$1A3F	$3000			MOVLW	#_cmdxx
$1A40	$00D7			MOVWF	FARG_str_starts_with+1
$1A41	$300D			MOVLW	@#_cmdxx
$1A42	$00D8			MOVWF	FARG_str_starts_with+2
$1A43	$120A			BCF	PCLATH, 4
$1A44	$202C			CALL	_str_starts_with
$1A45	$160A			BSF	PCLATH, 4
$1A46	$0870			MOVF	STACK_0, 0
$1A47	$1903			BTFSC	STATUS, Z
$1A48	$2A5C			GOTO	L_ProcessCommand_193
;commands.h,578 :: 		PR2_setting = Extract_Numeric_Argument(4);
$1A49	$3004			MOVLW	4
$1A4A	$00D6			MOVWF	FARG_Extract_Numeric_Argument+0
$1A4B	$3000			MOVLW	0
$1A4C	$00D7			MOVWF	FARG_Extract_Numeric_Argument+1
$1A4D	$120A			BCF	PCLATH, 4
$1A4E	$207C			CALL	_Extract_Numeric_Argument
$1A4F	$160A			BSF	PCLATH, 4
$1A50	$0870			MOVF	STACK_0, 0
$1A51	$00C5			MOVWF	_PR2_setting
;commands.h,580 :: 		SendConstLine(msg1); // Send "OK"
$1A52	$308C			MOVLW	#_msg1
$1A53	$00D6			MOVWF	FARG_SendConstLine+0
$1A54	$3006			MOVLW	@#_msg1
$1A55	$00D7			MOVWF	FARG_SendConstLine+1
$1A56	$118A			BCF	PCLATH, 3
$1A57	$120A			BCF	PCLATH, 4
$1A58	$2652			CALL	_SendConstLine
$1A59	$158A			BSF	PCLATH, 3
$1A5A	$160A			BSF	PCLATH, 4
;commands.h,582 :: 		return;
$1A5B	$0008			RETURN
;commands.h,583 :: 		}
$1A5C	$	L_ProcessCommand_193:
;commands.h,585 :: 		SendConstLine(msg3); // Send "Undefined Command"
$1A5C	$3098			MOVLW	#_msg3
$1A5D	$1703			BSF	STATUS, RP1
$1A5E	$00D6			MOVWF	FARG_SendConstLine+0
$1A5F	$300C			MOVLW	@#_msg3
$1A60	$00D7			MOVWF	FARG_SendConstLine+1
$1A61	$118A			BCF	PCLATH, 3
$1A62	$120A			BCF	PCLATH, 4
$1A63	$2652			CALL	_SendConstLine
$1A64	$158A			BSF	PCLATH, 3
$1A65	$160A			BSF	PCLATH, 4
;commands.h,586 :: 		}
$1A66	$0008			RETURN
$0DB1	$	table___msg5:
;main.c,18 :: 		
$0DB1	$3454			RETLW	84
$0DB2	$3461			RETLW	97
$0DB3	$3473			RETLW	115
$0DB4	$346B			RETLW	107
$0DB5	$3420			RETLW	32
$0DB6	$3463			RETLW	99
$0DB7	$346F			RETLW	111
$0DB8	$346D			RETLW	109
$0DB9	$3470			RETLW	112
$0DBA	$346C			RETLW	108
$0DBB	$3465			RETLW	101
$0DBC	$3474			RETLW	116
$0DBD	$3465			RETLW	101
$0DBE	$3464			RETLW	100
$0DBF	$340A			RETLW	10
$0DC0	$3400			RETLW	0
$0DC1	$0008			RETURN
$0DC2	$	GlobalInimain:
$0DC2	$3000			MOVLW	0
$0DC3	$1303			BCF	STATUS, RP1
$0DC4	$1683			BSF	STATUS, RP0
$0DC5	$00EF			MOVWF	_trace_axis+0
$0DC6	$3000			MOVLW	0
$0DC7	$00AA			MOVWF	_trace_flag+0
$0DC8	$3064			MOVLW	100
$0DC9	$00A6			MOVWF	_trace_skip+0
$0DCA	$3000			MOVLW	0
$0DCB	$00A7			MOVWF	_trace_skip+1
$0DCC	$3000			MOVLW	0
$0DCD	$00A8			MOVWF	_trace_skip+2
$0DCE	$3000			MOVLW	0
$0DCF	$00A9			MOVWF	_trace_skip+3
$0DD0	$3000			MOVLW	0
$0DD1	$00A2			MOVWF	_trace_counter+0
$0DD2	$3000			MOVLW	0
$0DD3	$00A3			MOVWF	_trace_counter+1
$0DD4	$3000			MOVLW	0
$0DD5	$00A4			MOVWF	_trace_counter+2
$0DD6	$3000			MOVLW	0
$0DD7	$00A5			MOVWF	_trace_counter+3
$0DD8	$3000			MOVLW	0
$0DD9	$1703			BSF	STATUS, RP1
$0DDA	$1283			BCF	STATUS, RP0
$0DDB	$00C6			MOVWF	_comm_test+0
$0DDC	$3000			MOVLW	0
$0DDD	$00A9			MOVWF	_task_running+0
$0DDE	$3000			MOVLW	0
$0DDF	$00A8			MOVWF	_task_done_msg+0
$0DE0	$3001			MOVLW	1
$0DE1	$00B0			MOVWF	_lcd_screen+0
$0DE2	$3000			MOVLW	0
$0DE3	$1303			BCF	STATUS, RP1
$0DE4	$1683			BSF	STATUS, RP0
$0DE5	$00AD			MOVWF	_axis1_counter+0
$0DE6	$3000			MOVLW	0
$0DE7	$00AE			MOVWF	_axis1_counter+1
$0DE8	$3000			MOVLW	0
$0DE9	$00AF			MOVWF	_axis1_counter+2
$0DEA	$3000			MOVLW	0
$0DEB	$00B0			MOVWF	_axis1_counter+3
$0DEC	$3000			MOVLW	0
$0DED	$00B1			MOVWF	_axis2_counter+0
$0DEE	$3000			MOVLW	0
$0DEF	$00B2			MOVWF	_axis2_counter+1
$0DF0	$3000			MOVLW	0
$0DF1	$00B3			MOVWF	_axis2_counter+2
$0DF2	$3000			MOVLW	0
$0DF3	$00B4			MOVWF	_axis2_counter+3
$0DF4	$3000			MOVLW	0
$0DF5	$00B5			MOVWF	_axis3_counter+0
$0DF6	$3000			MOVLW	0
$0DF7	$00B6			MOVWF	_axis3_counter+1
$0DF8	$3000			MOVLW	0
$0DF9	$00B7			MOVWF	_axis3_counter+2
$0DFA	$3000			MOVLW	0
$0DFB	$00B8			MOVWF	_axis3_counter+3
$0DFC	$3000			MOVLW	0
$0DFD	$00CB			MOVWF	_axis1_steps_counter+0
$0DFE	$3000			MOVLW	0
$0DFF	$00CC			MOVWF	_axis1_steps_counter+1
$0E00	$3000			MOVLW	0
$0E01	$00CD			MOVWF	_axis1_steps_counter+2
$0E02	$3000			MOVLW	0
$0E03	$00CE			MOVWF	_axis1_steps_counter+3
$0E04	$3000			MOVLW	0
$0E05	$00D5			MOVWF	_axis2_steps_counter+0
$0E06	$3000			MOVLW	0
$0E07	$00D6			MOVWF	_axis2_steps_counter+1
$0E08	$3000			MOVLW	0
$0E09	$00D7			MOVWF	_axis2_steps_counter+2
$0E0A	$3000			MOVLW	0
$0E0B	$00D8			MOVWF	_axis2_steps_counter+3
$0E0C	$3000			MOVLW	0
$0E0D	$00DF			MOVWF	_axis3_steps_counter+0
$0E0E	$3000			MOVLW	0
$0E0F	$00E0			MOVWF	_axis3_steps_counter+1
$0E10	$3000			MOVLW	0
$0E11	$00E1			MOVWF	_axis3_steps_counter+2
$0E12	$3000			MOVLW	0
$0E13	$00E2			MOVWF	_axis3_steps_counter+3
$0E14	$3000			MOVLW	0
$0E15	$00C7			MOVWF	_axis1_steps+0
$0E16	$3000			MOVLW	0
$0E17	$00C8			MOVWF	_axis1_steps+1
$0E18	$3000			MOVLW	0
$0E19	$00C9			MOVWF	_axis1_steps+2
$0E1A	$3000			MOVLW	0
$0E1B	$00CA			MOVWF	_axis1_steps+3
$0E1C	$3000			MOVLW	0
$0E1D	$00D1			MOVWF	_axis2_steps+0
$0E1E	$3000			MOVLW	0
$0E1F	$00D2			MOVWF	_axis2_steps+1
$0E20	$3000			MOVLW	0
$0E21	$00D3			MOVWF	_axis2_steps+2
$0E22	$3000			MOVLW	0
$0E23	$00D4			MOVWF	_axis2_steps+3
$0E24	$3000			MOVLW	0
$0E25	$00DB			MOVWF	_axis3_steps+0
$0E26	$3000			MOVLW	0
$0E27	$00DC			MOVWF	_axis3_steps+1
$0E28	$3000			MOVLW	0
$0E29	$00DD			MOVWF	_axis3_steps+2
$0E2A	$3000			MOVLW	0
$0E2B	$00DE			MOVWF	_axis3_steps+3
$0E2C	$3005			MOVLW	5
$0E2D	$1703			BSF	STATUS, RP1
$0E2E	$1283			BCF	STATUS, RP0
$0E2F	$00B9			MOVWF	_axis1_period_start+0
$0E30	$3000			MOVLW	0
$0E31	$00BA			MOVWF	_axis1_period_start+1
$0E32	$3000			MOVLW	0
$0E33	$00BB			MOVWF	_axis1_period_start+2
$0E34	$3000			MOVLW	0
$0E35	$00BC			MOVWF	_axis1_period_start+3
$0E36	$3005			MOVLW	5
$0E37	$00BD			MOVWF	_axis2_period_start+0
$0E38	$3000			MOVLW	0
$0E39	$00BE			MOVWF	_axis2_period_start+1
$0E3A	$3000			MOVLW	0
$0E3B	$00BF			MOVWF	_axis2_period_start+2
$0E3C	$3000			MOVLW	0
$0E3D	$00C0			MOVWF	_axis2_period_start+3
$0E3E	$3005			MOVLW	5
$0E3F	$00C1			MOVWF	_axis3_period_start+0
$0E40	$3000			MOVLW	0
$0E41	$00C2			MOVWF	_axis3_period_start+1
$0E42	$3000			MOVLW	0
$0E43	$00C3			MOVWF	_axis3_period_start+2
$0E44	$3000			MOVLW	0
$0E45	$00C4			MOVWF	_axis3_period_start+3
$0E46	$3005			MOVLW	5
$0E47	$1303			BCF	STATUS, RP1
$0E48	$1683			BSF	STATUS, RP0
$0E49	$00EB			MOVWF	_axis1_period_end+0
$0E4A	$3000			MOVLW	0
$0E4B	$00EC			MOVWF	_axis1_period_end+1
$0E4C	$3000			MOVLW	0
$0E4D	$00ED			MOVWF	_axis1_period_end+2
$0E4E	$3000			MOVLW	0
$0E4F	$00EE			MOVWF	_axis1_period_end+3
$0E50	$3005			MOVLW	5
$0E51	$1703			BSF	STATUS, RP1
$0E52	$1283			BCF	STATUS, RP0
$0E53	$00A4			MOVWF	_axis3_period_end+0
$0E54	$3000			MOVLW	0
$0E55	$00A5			MOVWF	_axis3_period_end+1
$0E56	$3000			MOVLW	0
$0E57	$00A6			MOVWF	_axis3_period_end+2
$0E58	$3000			MOVLW	0
$0E59	$00A7			MOVWF	_axis3_period_end+3
$0E5A	$3000			MOVLW	0
$0E5B	$1303			BCF	STATUS, RP1
$0E5C	$1683			BSF	STATUS, RP0
$0E5D	$00E7			MOVWF	_axis1_period_current+0
$0E5E	$3000			MOVLW	0
$0E5F	$00E8			MOVWF	_axis1_period_current+1
$0E60	$3000			MOVLW	0
$0E61	$00E9			MOVWF	_axis1_period_current+2
$0E62	$3000			MOVLW	0
$0E63	$00EA			MOVWF	_axis1_period_current+3
$0E64	$3000			MOVLW	0
$0E65	$1703			BSF	STATUS, RP1
$0E66	$1283			BCF	STATUS, RP0
$0E67	$0094			MOVWF	_axis2_period_current+0
$0E68	$3000			MOVLW	0
$0E69	$0095			MOVWF	_axis2_period_current+1
$0E6A	$3000			MOVLW	0
$0E6B	$0096			MOVWF	_axis2_period_current+2
$0E6C	$3000			MOVLW	0
$0E6D	$0097			MOVWF	_axis2_period_current+3
$0E6E	$3000			MOVLW	0
$0E6F	$00A0			MOVWF	_axis3_period_current+0
$0E70	$3000			MOVLW	0
$0E71	$00A1			MOVWF	_axis3_period_current+1
$0E72	$3000			MOVLW	0
$0E73	$00A2			MOVWF	_axis3_period_current+2
$0E74	$3000			MOVLW	0
$0E75	$00A3			MOVWF	_axis3_period_current+3
$0E76	$3032			MOVLW	50
$0E77	$1303			BCF	STATUS, RP1
$0E78	$1683			BSF	STATUS, RP0
$0E79	$00E3			MOVWF	_axis1_period_warmup+0
$0E7A	$3000			MOVLW	0
$0E7B	$00E4			MOVWF	_axis1_period_warmup+1
$0E7C	$3000			MOVLW	0
$0E7D	$00E5			MOVWF	_axis1_period_warmup+2
$0E7E	$3000			MOVLW	0
$0E7F	$00E6			MOVWF	_axis1_period_warmup+3
$0E80	$3032			MOVLW	50
$0E81	$1703			BSF	STATUS, RP1
$0E82	$1283			BCF	STATUS, RP0
$0E83	$0090			MOVWF	_axis2_period_warmup+0
$0E84	$3000			MOVLW	0
$0E85	$0091			MOVWF	_axis2_period_warmup+1
$0E86	$3000			MOVLW	0
$0E87	$0092			MOVWF	_axis2_period_warmup+2
$0E88	$3000			MOVLW	0
$0E89	$0093			MOVWF	_axis2_period_warmup+3
$0E8A	$3032			MOVLW	50
$0E8B	$009C			MOVWF	_axis3_period_warmup+0
$0E8C	$3000			MOVLW	0
$0E8D	$009D			MOVWF	_axis3_period_warmup+1
$0E8E	$3000			MOVLW	0
$0E8F	$009E			MOVWF	_axis3_period_warmup+2
$0E90	$3000			MOVLW	0
$0E91	$009F			MOVWF	_axis3_period_warmup+3
$0E92	$3000			MOVLW	0
$0E93	$1303			BCF	STATUS, RP1
$0E94	$1683			BSF	STATUS, RP0
$0E95	$00C5			MOVWF	_axis1_bind_switch1+0
$0E96	$3000			MOVLW	0
$0E97	$00C6			MOVWF	_axis1_bind_switch2+0
$0E98	$3000			MOVLW	0
$0E99	$00CF			MOVWF	_axis2_bind_switch1+0
$0E9A	$3000			MOVLW	0
$0E9B	$00D0			MOVWF	_axis2_bind_switch2+0
$0E9C	$3000			MOVLW	0
$0E9D	$00D9			MOVWF	_axis3_bind_switch1+0
$0E9E	$3000			MOVLW	0
$0E9F	$00DA			MOVWF	_axis3_bind_switch2+0
$0EA0	$3000			MOVLW	0
$0EA1	$00AB			MOVWF	_switch1_closed+0
$0EA2	$3000			MOVLW	0
$0EA3	$00AC			MOVWF	_switch2_closed+0
$0EA4	$3000			MOVLW	0
$0EA5	$1703			BSF	STATUS, RP1
$0EA6	$1283			BCF	STATUS, RP0
$0EA7	$00B7			MOVWF	_b_i+0
$0EA8	$3000			MOVLW	0
$0EA9	$00B8			MOVWF	_b_i+1
$0EAA	$300F			MOVLW	15
$0EAB	$00C5			MOVWF	_PR2_setting+0
;main.c,155 :: 		}
$0EAC	$0008			RETURN
$0EAD	$	_main:
;main.c,29 :: 		void main()
;main.c,32 :: 		delay_ms(250); // 250ms delay before startup ...
$0EAD	$25C2			CALL	GlobalInimain
$0EAE	$3007			MOVLW	7
$0EAF	$00FC			MOVWF	STACK_12
$0EB0	$30FF			MOVLW	255
$0EB1	$00FB			MOVWF	STACK_11
$0EB2	$30FF			MOVLW	255
$0EB3	$00FA			MOVWF	STACK_10
$0EB4	$0BFC			DECFSZ	STACK_12, F
$0EB5	$2EB7			GOTO	$+2
$0EB6	$2EBE			GOTO	$+8
$0EB7	$0BFB			DECFSZ	STACK_11, F
$0EB8	$2EBA			GOTO	$+2
$0EB9	$2EBD			GOTO	$+4
$0EBA	$0BFA			DECFSZ	STACK_10, F
$0EBB	$2EBA			GOTO	$-1
$0EBC	$2EB7			GOTO	$-5
$0EBD	$2EB4			GOTO	$-9
$0EBE	$3060			MOVLW	96
$0EBF	$00FB			MOVWF	STACK_11
$0EC0	$30FF			MOVLW	255
$0EC1	$00FA			MOVWF	STACK_10
$0EC2	$0BFB			DECFSZ	STACK_11, F
$0EC3	$2EC5			GOTO	$+2
$0EC4	$2EC8			GOTO	$+4
$0EC5	$0BFA			DECFSZ	STACK_10, F
$0EC6	$2EC5			GOTO	$-1
$0EC7	$2EC2			GOTO	$-5
$0EC8	$3014			MOVLW	20
$0EC9	$00FA			MOVWF	STACK_10
$0ECA	$0BFA			DECFSZ	STACK_10, F
$0ECB	$2ECA			GOTO	$-1
;main.c,34 :: 		IntializeController();
$0ECC	$2507			CALL	_IntializeController
;main.c,36 :: 		while (1)
$0ECD	$	L_main_194:
;main.c,38 :: 		if (Usart_Data_Ready())
$0ECD	$1303			BCF	STATUS, RP1
$0ECE	$1283			BCF	STATUS, RP0
$0ECF	$258B			CALL	_Usart_Data_Ready
$0ED0	$0870			MOVF	STACK_0, 0
$0ED1	$1903			BTFSC	STATUS, Z
$0ED2	$2F1F			GOTO	L_main_196
;main.c,40 :: 		i = Usart_Read();
$0ED3	$2594			CALL	_Usart_Read
$0ED4	$0870			MOVF	STACK_0, 0
$0ED5	$00C9			MOVWF	_i
;main.c,42 :: 		Usart_Write(i);              // Echo character back to sender
$0ED6	$0870			MOVF	STACK_0, 0
$0ED7	$00DB			MOVWF	FARG_Usart_Write+0
$0ED8	$118A			BCF	PCLATH, 3
$0ED9	$242F			CALL	_Usart_Write
$0EDA	$158A			BSF	PCLATH, 3
;main.c,44 :: 		if (ValidChar(i))            // If received character is valid, append to array
$0EDB	$1703			BSF	STATUS, RP1
$0EDC	$0849			MOVF	_i, 0
$0EDD	$00D0			MOVWF	FARG_ValidChar+0
$0EDE	$25A2			CALL	_ValidChar
$0EDF	$0870			MOVF	STACK_0, 0
$0EE0	$1903			BTFSC	STATUS, Z
$0EE1	$2EF7			GOTO	L_main_197
;main.c,46 :: 		b[b_i] = i;
$0EE2	$0837			MOVF	_b_i, 0
$0EE3	$3F20			ADDLW	_b
$0EE4	$00F0			MOVWF	STACK_0
$0EE5	$0870			MOVF	STACK_0, 0
$0EE6	$0084			MOVWF	FSR
$0EE7	$0849			MOVF	_i, 0
$0EE8	$0080			MOVWF	INDF
;main.c,48 :: 		if (b_i<31) b_i++;
$0EE9	$3080			MOVLW	128
$0EEA	$0638			XORWF	_b_i+1, 0
$0EEB	$00F0			MOVWF	STACK_0
$0EEC	$3080			MOVLW	128
$0EED	$0270			SUBWF	STACK_0, 0
$0EEE	$1D03			BTFSS	STATUS, Z
$0EEF	$2EF2			GOTO	L_main_224
$0EF0	$301F			MOVLW	31
$0EF1	$0237			SUBWF	_b_i, 0
$0EF2	$	L_main_224:
$0EF2	$1803			BTFSC	STATUS, C
$0EF3	$2EF7			GOTO	L_main_198
$0EF4	$0AB7			INCF	_b_i, 1
$0EF5	$1903			BTFSC	STATUS, Z
$0EF6	$0AB8			INCF	_b_i+1, 1
$0EF7	$	L_main_198:
;main.c,49 :: 		}
$0EF7	$	L_main_197:
;main.c,51 :: 		if (i==13)                   // Check if Enter is received
$0EF7	$0849			MOVF	_i, 0
$0EF8	$3A0D			XORLW	13
$0EF9	$1D03			BTFSS	STATUS, Z
$0EFA	$2F0F			GOTO	L_main_199
;main.c,53 :: 		b[b_i] = '\n';            // Append "New Line" character to command buffer
$0EFB	$0837			MOVF	_b_i, 0
$0EFC	$3F20			ADDLW	_b
$0EFD	$00F0			MOVWF	STACK_0
$0EFE	$0870			MOVF	STACK_0, 0
$0EFF	$0084			MOVWF	FSR
$0F00	$300A			MOVLW	10
$0F01	$0080			MOVWF	INDF
;main.c,55 :: 		Usart_Write(10);          // Send "Carriage Return" character
$0F02	$300A			MOVLW	10
$0F03	$00DB			MOVWF	FARG_Usart_Write+0
$0F04	$118A			BCF	PCLATH, 3
$0F05	$242F			CALL	_Usart_Write
$0F06	$158A			BSF	PCLATH, 3
;main.c,57 :: 		ProcessCommand();         // Process received command
$0F07	$160A			BSF	PCLATH, 4
$0F08	$2000			CALL	_ProcessCommand
$0F09	$120A			BCF	PCLATH, 4
;main.c,59 :: 		b_i=0;                    // Reset buffer index
$0F0A	$1703			BSF	STATUS, RP1
$0F0B	$1283			BCF	STATUS, RP0
$0F0C	$01B7			CLRF	_b_i
$0F0D	$01B8			CLRF	_b_i+1
;main.c,61 :: 		Prompt();
$0F0E	$23BC			CALL	_Prompt
;main.c,62 :: 		}
$0F0F	$	L_main_199:
;main.c,64 :: 		CTS = ~CTS; // Toggle CTS
$0F0F	$1303			BCF	STATUS, RP1
$0F10	$1283			BCF	STATUS, RP0
$0F11	$3000			MOVLW	0
$0F12	$1303			BCF	STATUS, RP1
$0F13	$1283			BCF	STATUS, RP0
$0F14	$1A87			BTFSC	PORTC, 5
$0F15	$3001			MOVLW	1
$0F16	$00F1			MOVWF	STACK_1
$0F17	$0971			COMF	STACK_1, W
$0F18	$00F0			MOVWF	STACK_0
$0F19	$3000			MOVLW	0
$0F1A	$1870			BTFSC	STACK_0, 0
$0F1B	$3020			MOVLW	32
$0F1C	$0607			XORWF	PORTC, 0
$0F1D	$3920			ANDLW	32
$0F1E	$0687			XORWF	PORTC, 1
;main.c,65 :: 		}
$0F1F	$	L_main_196:
;main.c,67 :: 		if (task_done_msg)
$0F1F	$1703			BSF	STATUS, RP1
$0F20	$1283			BCF	STATUS, RP0
$0F21	$0828			MOVF	_task_done_msg, 0
$0F22	$1903			BTFSC	STATUS, Z
$0F23	$2F36			GOTO	L_main_200
;main.c,69 :: 		SendConstLine(newline);
$0F24	$30BC			MOVLW	#_newline
$0F25	$00D6			MOVWF	FARG_SendConstLine+0
$0F26	$3006			MOVLW	@#_newline
$0F27	$00D7			MOVWF	FARG_SendConstLine+1
$0F28	$118A			BCF	PCLATH, 3
$0F29	$2652			CALL	_SendConstLine
$0F2A	$158A			BSF	PCLATH, 3
;main.c,71 :: 		SendConstLine(msg5);
$0F2B	$30B1			MOVLW	#_msg5
$0F2C	$1703			BSF	STATUS, RP1
$0F2D	$00D6			MOVWF	FARG_SendConstLine+0
$0F2E	$300D			MOVLW	@#_msg5
$0F2F	$00D7			MOVWF	FARG_SendConstLine+1
$0F30	$118A			BCF	PCLATH, 3
$0F31	$2652			CALL	_SendConstLine
$0F32	$158A			BSF	PCLATH, 3
;main.c,73 :: 		Prompt();
$0F33	$23BC			CALL	_Prompt
;main.c,75 :: 		task_done_msg = 0;
$0F34	$1703			BSF	STATUS, RP1
$0F35	$01A8			CLRF	_task_done_msg, 1
;main.c,76 :: 		}
$0F36	$	L_main_200:
;main.c,78 :: 		if (trace_flag)
$0F36	$1303			BCF	STATUS, RP1
$0F37	$1683			BSF	STATUS, RP0
$0F38	$082A			MOVF	_trace_flag, 0
$0F39	$1903			BTFSC	STATUS, Z
$0F3A	$2F44			GOTO	L_main_201
;main.c,80 :: 		Usart_Write(TRACE_CHAR);
$0F3B	$3040			MOVLW	64
$0F3C	$1703			BSF	STATUS, RP1
$0F3D	$1283			BCF	STATUS, RP0
$0F3E	$00DB			MOVWF	FARG_Usart_Write+0
$0F3F	$118A			BCF	PCLATH, 3
$0F40	$242F			CALL	_Usart_Write
$0F41	$158A			BSF	PCLATH, 3
;main.c,82 :: 		trace_flag = 0;
$0F42	$1683			BSF	STATUS, RP0
$0F43	$01AA			CLRF	_trace_flag, 1
;main.c,83 :: 		}
$0F44	$	L_main_201:
;main.c,84 :: 		}
$0F44	$2ECD			GOTO	L_main_194
;main.c,85 :: 		}
$0F45	$2F45			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		interrupt
$036D		WriteVirtualPorts
$0377		Trace
$0397		ProcessStop
$039B		Delay_1us
$03A3		Delay_5500us
$03B4		Delay_50us
$03BB		Lcd8_Cmd
$03E7		Lcd8_Chr_CP
$03F1		____DoICP
$03F8		Lcd8_Chr
$042F		Usart_Write
$0441		Mul_32x32_U
$0478		Lcd8_Init
$04AE		ProgramCustomChars
$0516		strcp_c
$053D		?table___lcd1_default
$0544		?table___lcd2_default
$0547		strcpy
$0561		Lcd8_Out
$057E		strcmp_c
$05C4		?table___cmd3
$05CF		DisplayScreen2
$0652		SendConstLine
$068C		?table___msg1
$0691		?table___cmd4
$069D		?table___cmd1
$06A7		?table___cmd2
$06B1		?table___cmd9
$06BC		?table___newline
$0800		?table___cmd27
$0816		?table___cmd28
$082C		str_starts_with
$086D		?table___cmd5
$087C		Extract_Numeric_Argument
$08D1		?table___cmd35
$08E7		?table___cmd36
$08FB		?table___cmd37
$0912		?table___cmd6
$0922		?table___cmd10
$092E		?table___cmd7
$0938		?table___cmd8
$0942		?table___cmd29
$0958		?table___cmd30
$096E		?table___cmd11
$097D		?table___cmd38
$0993		?table___cmd39
$09A7		?table___cmd40
$09BE		?table___cmd12
$09CE		?table___cmd15
$09D9		?table___cmd16
$09E5		?table___cmd13
$09EF		?table___cmd14
$09F9		?table___cmd31
$0A0F		?table___cmd32
$0A25		?table___cmd17
$0A34		?table___cmd41
$0A4A		?table___cmd42
$0A5E		?table___cmd43
$0A75		?table___cmd18
$0A85		Intialize_LCD
$0AAB		DisplayScreen1
$0AD6		?table___banner1
$0B04		?table___banner2
$0B32		?table___banner3
$0B60		?table___banner4
$0B8E		?table___banner5
$0BBC		Prompt
$0BCA		Usart_Init
$0BDF		?table___cmd20
$0BE9		?table__lstr_1_commands
$0BEF		?table___cmd19
$0BF4		ProcessGo
$0C5F		?table___cmd21
$0C66		?table___cmd23
$0C71		?table___cmd24
$0C7C		?table___cmd25
$0C83		?table___cmd26
$0C98		?table___msg3
$0CAC		?table___cmd33
$0CB4		?table___cmd34
$0CBC		?table___cmd44
$0CCA		?table___cmd45
$0CD8		?table___cmd46
$0CE6		?table___cmd47
$0CF2		?table___cmd48
$0D00		?table___cmdxx
$0D07		IntializeController
$0D8B		Usart_Data_Ready
$0D94		Usart_Read
$0DA2		ValidChar
$0DB1		?table___msg5
$0DC2		GlobalInimain
$0EAD		main
$1000		ProcessACC
$1800		ProcessCommand


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_interrupt:
$001B		L_interrupt_45:
$0021		L_interrupt_46:
$0053		L_interrupt_47:
$0061		L382_ex_L_interrupt_50:
$0065		L_interrupt_50:
$007B		L_interrupt_207:
$007D		L397_ex_L_interrupt_53:
$0081		L_interrupt_53:
$008A		L409_ex_L_interrupt_56:
$008E		L_interrupt_56:
$0097		L421_ex_L_interrupt_59:
$009B		L_interrupt_59:
$00A3		L_interrupt_60:
$00B1		L440_ex_L_interrupt_63:
$00B5		L_interrupt_63:
$00CB		L_interrupt_208:
$00CD		L455_ex_L_interrupt_66:
$00D1		L_interrupt_66:
$00DA		L467_ex_L_interrupt_69:
$00DE		L_interrupt_69:
$00E7		L479_ex_L_interrupt_72:
$00EB		L_interrupt_72:
$00F3		L_interrupt_73:
$0103		L498_ex_L_interrupt_76:
$0107		L_interrupt_76:
$011D		L_interrupt_209:
$011F		L513_ex_L_interrupt_79:
$0123		L_interrupt_79:
$012C		L525_ex_L_interrupt_82:
$0130		L_interrupt_82:
$0139		L537_ex_L_interrupt_85:
$013D		L_interrupt_85:
$014D		L_interrupt_210:
$015D		L_interrupt_211:
$0166		L_interrupt_87:
$0174		L_interrupt_212:
$017E		L_interrupt_88:
$0182		L_interrupt_86:
$01A0		L_interrupt_213:
$01B2		L_interrupt_214:
$01BB		L_interrupt_90:
$01C9		L_interrupt_215:
$01D3		L_interrupt_91:
$01D9		L_interrupt_89:
$01F7		L_interrupt_216:
$0209		L_interrupt_217:
$0212		L_interrupt_93:
$0220		L_interrupt_218:
$022A		L_interrupt_94:
$0230		L_interrupt_92:
$023E		L_interrupt_219:
$025F		L602_ex_L609_ex_L_interrupt_100:
$0260		L609_ex_L_interrupt_100:
$0283		L_interrupt_100:
$0283		L_interrupt_101:
$0283		L_interrupt_95:
$02A1		L_interrupt_220:
$02C2		L650_ex_L657_ex_L_interrupt_107:
$02C3		L657_ex_L_interrupt_107:
$02E6		L_interrupt_102:
$02E6		L_interrupt_107:
$02E6		L_interrupt_108:
$0304		L_interrupt_221:
$0326		L698_ex_L705_ex_L_interrupt_114:
$0329		L705_ex_L_interrupt_114:
$034B		L_interrupt_109:
$034B		L_interrupt_114:
$034B		L_interrupt_115:
$0358		L735_ex_L_interrupt_118:
$035D		L_interrupt_118:
$035F		L_Interrupt_end:
$036D		_WriteVirtualPorts:
$0377		_Trace:
$038E		L_Trace_206:
$0396		L_Trace_44:
$0397		_ProcessStop:
$039B		_Delay_1us:
$03A3		_Delay_5500us:
$03B4		_Delay_50us:
$03BB		_Lcd8_Cmd:
$03C3		L_Lcd8_Cmd_0:
$03DA		L_Lcd8_Cmd_1:
$03E3		L_Lcd8_Cmd_2:
$03E6		L_Lcd8_Cmd_3:
$03E7		_Lcd8_Chr_CP:
$03F1		_____DoICP:
$03F8		_Lcd8_Chr:
$03F9		L_Lcd8_Chr_6:
$03FE		L_Lcd8_Chr_7:
$0401		L_Lcd8_Chr_8:
$0404		L_Lcd8_Chr_9:
$0407		L_Lcd8_Chr_10:
$040A		L_Lcd8_Chr_4:
$041D		L_Lcd8_Chr_5:
$042F		_Usart_Write:
$042F		L_Usart_Write_3:
$043B		L_Usart_Write_4:
$0441		_Mul_32x32_U:
$0449		_NEXT:
$044D		_LOOP:
$0469		_EXIT1:
$0477		_EXIT2:
$0478		_Lcd8_Init:
$04AE		_ProgramCustomChars:
$0516		_strcp_c:
$0519		L_strcp_c_0:
$053C		L_strcp_c_1:
$053D		table___lcd1_default:
$0544		table___lcd2_default:
$0547		_strcpy:
$054B		L_strcpy_31:
$055E		L_strcpy_32:
$0561		_Lcd8_Out:
$0568		L_Lcd8_Out_11:
$057D		L_Lcd8_Out_12:
$057E		_strcmp_c:
$0581		L_strcmp_c_2:
$05A3		L34_ex_L_strcmp_c_3:
$05BF		L_strcmp_c_4:
$05BF		L_strcmp_c_7:
$05C1		L_strcmp_c_3:
$05C4		table___cmd3:
$05CF		_DisplayScreen2:
$05F5		L_DisplayScreen2_32:
$05F7		L_DisplayScreen2_33:
$0607		L_DisplayScreen2_34:
$0608		L_DisplayScreen2_35:
$0618		L_DisplayScreen2_36:
$061A		L_DisplayScreen2_37:
$062A		L_DisplayScreen2_38:
$062B		L_DisplayScreen2_39:
$063A		L_DisplayScreen2_40:
$063C		L_DisplayScreen2_41:
$064A		L_DisplayScreen2_42:
$064B		L_DisplayScreen2_43:
$0652		_SendConstLine:
$0656		L_SendConstLine_17:
$067F		L_SendConstLine_19:
$0684		L_SendConstLine_18:
$068C		table___msg1:
$0691		table___cmd4:
$069D		table___cmd1:
$06A7		table___cmd2:
$06B1		table___cmd9:
$06BC		table___newline:
$0800		table___cmd27:
$0816		table___cmd28:
$082C		_str_starts_with:
$082F		L_str_starts_with_8:
$084A		L58_ex_L_str_starts_with_9:
$0868		L_str_starts_with_10:
$0868		L_str_starts_with_13:
$086A		L_str_starts_with_9:
$086D		table___cmd5:
$087C		_Extract_Numeric_Argument:
$0886		L_Extract_Numeric_Argument_29:
$0890		L_Extract_Numeric_Argument_205:
$08C4		L_Extract_Numeric_Argument_31:
$08C8		L_Extract_Numeric_Argument_30:
$08D1		table___cmd35:
$08E7		table___cmd36:
$08FB		table___cmd37:
$0912		table___cmd6:
$0922		table___cmd10:
$092E		table___cmd7:
$0938		table___cmd8:
$0942		table___cmd29:
$0958		table___cmd30:
$096E		table___cmd11:
$097D		table___cmd38:
$0993		table___cmd39:
$09A7		table___cmd40:
$09BE		table___cmd12:
$09CE		table___cmd15:
$09D9		table___cmd16:
$09E5		table___cmd13:
$09EF		table___cmd14:
$09F9		table___cmd31:
$0A0F		table___cmd32:
$0A25		table___cmd17:
$0A34		table___cmd41:
$0A4A		table___cmd42:
$0A5E		table___cmd43:
$0A75		table___cmd18:
$0A85		_Intialize_LCD:
$0AAB		_DisplayScreen1:
$0AD6		table___banner1:
$0B04		table___banner2:
$0B32		table___banner3:
$0B60		table___banner4:
$0B8E		table___banner5:
$0BBC		_Prompt:
$0BCA		_Usart_Init:
$0BD3		L_Usart_Init_0:
$0BDC		L_Usart_Init_1:
$0BDF		table___cmd20:
$0BE9		table__lstr_1_commands:
$0BEF		table___cmd19:
$0BF4		_ProcessGo:
$0C5F		table___cmd21:
$0C66		table___cmd23:
$0C71		table___cmd24:
$0C7C		table___cmd25:
$0C83		table___cmd26:
$0C98		table___msg3:
$0CAC		table___cmd33:
$0CB4		table___cmd34:
$0CBC		table___cmd44:
$0CCA		table___cmd45:
$0CD8		table___cmd46:
$0CE6		table___cmd47:
$0CF2		table___cmd48:
$0D00		table___cmdxx:
$0D07		_IntializeController:
$0D8B		_Usart_Data_Ready:
$0D94		_Usart_Read:
$0D9E		L_Usart_Read_2:
$0DA2		_ValidChar:
$0DAC		L118_ex_L_ValidChar_22:
$0DAF		L_ValidChar_22:
$0DB1		table___msg5:
$0DC2		GlobalInimain:
$0EAD		_main:
$0ECD		L_main_194:
$0EF2		L_main_224:
$0EF7		L_main_197:
$0EF7		L_main_198:
$0F0F		L_main_199:
$0F1F		L_main_196:
$0F36		L_main_200:
$0F44		L_main_201:
$1000		_ProcessACC:
$101F		L_ProcessACC_120:
$102A		L_ProcessACC_119:
$1048		L_ProcessACC_122:
$1053		L_ProcessACC_121:
$1071		L_ProcessACC_124:
$107C		L_ProcessACC_123:
$109A		L_ProcessACC_126:
$10A5		L_ProcessACC_125:
$10CA		L_ProcessACC_127:
$10EF		L_ProcessACC_128:
$1120		L_ProcessACC_129:
$1157		L_ProcessACC_130:
$1186		L_ProcessACC_131:
$11B5		L_ProcessACC_132:
$11EC		L_ProcessACC_133:
$120A		L_ProcessACC_135:
$1215		L_ProcessACC_134:
$1233		L_ProcessACC_137:
$123E		L_ProcessACC_136:
$125C		L_ProcessACC_139:
$1267		L_ProcessACC_138:
$1285		L_ProcessACC_141:
$1290		L_ProcessACC_140:
$12B5		L_ProcessACC_142:
$12DA		L_ProcessACC_143:
$130B		L_ProcessACC_144:
$1336		L_ProcessACC_145:
$1361		L_ProcessACC_146:
$138C		L_ProcessACC_147:
$13C7		L_ProcessACC_148:
$13E4		L_ProcessACC_150:
$13EF		L_ProcessACC_149:
$140C		L_ProcessACC_152:
$1417		L_ProcessACC_151:
$1434		L_ProcessACC_154:
$143F		L_ProcessACC_153:
$145C		L_ProcessACC_156:
$1467		L_ProcessACC_155:
$148C		L_ProcessACC_157:
$14B1		L_ProcessACC_158:
$14E2		L_ProcessACC_159:
$151D		L_ProcessACC_160:
$1548		L_ProcessACC_161:
$1573		L_ProcessACC_162:
$15A6		L_ProcessACC_163:
$1800		_ProcessCommand:
$1807		L_ProcessCommand_164:
$1820		L_ProcessCommand_165:
$183D		L_ProcessCommand_166:
$185C		L_ProcessCommand_167:
$1878		L_ProcessCommand_168:
$1896		L_ProcessCommand_169:
$18AF		L_ProcessCommand_170:
$18CD		L_ProcessCommand_172:
$18D8		L_ProcessCommand_173:
$18D9		L_ProcessCommand_171:
$18EA		L_ProcessCommand_175:
$1904		L_ProcessCommand_222:
$1906		L1143_ex_L_ProcessCommand_176:
$191A		L_ProcessCommand_177:
$191E		L_ProcessCommand_176:
$1932		L_ProcessCommand_180:
$193C		L_ProcessCommand_174:
$194D		L_ProcessCommand_182:
$1967		L_ProcessCommand_223:
$1969		L1184_ex_L_ProcessCommand_183:
$197D		L_ProcessCommand_184:
$1981		L_ProcessCommand_183:
$1995		L_ProcessCommand_187:
$199F		L_ProcessCommand_181:
$19BC		L_ProcessCommand_188:
$19D9		L_ProcessCommand_189:
$19F6		L_ProcessCommand_190:
$1A12		L_ProcessCommand_191:
$1A3C		L_ProcessCommand_192:
$1A5C		L_ProcessCommand_193:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0005		PORTA
$0006		PORTB
$0007		PORTC
$0008		PORTD
$0009		PORTE
$000A		PCLATH
$000B		INTCON
$000C		PIR1
$0012		T2CON
$0018		RCSTA
$0019		TXREG
$001A		RCREG
$0020		_b
$0040		_temp
$0050		_lcd1
$0060		_lcd2
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$0089		TRISE
$008C		PIE1
$0092		PR2
$0098		TXSTA
$0099		SPBRG
$00A0		_PORTA_V
$00A1		_PORTE_V
$00A2		_trace_counter
$00A6		_trace_skip
$00AA		_trace_flag
$00AB		_switch1_closed
$00AC		_switch2_closed
$00AD		_axis1_counter
$00B1		_axis2_counter
$00B5		_axis3_counter
$00B9		_axis1_warmup_counter
$00BD		_axis2_warmup_counter
$00C1		_axis3_warmup_counter
$00C5		_axis1_bind_switch1
$00C6		_axis1_bind_switch2
$00C7		_axis1_steps
$00CB		_axis1_steps_counter
$00CF		_axis2_bind_switch1
$00D0		_axis2_bind_switch2
$00D1		_axis2_steps
$00D5		_axis2_steps_counter
$00D9		_axis3_bind_switch1
$00DA		_axis3_bind_switch2
$00DB		_axis3_steps
$00DF		_axis3_steps_counter
$00E3		_axis1_period_warmup
$00E7		_axis1_period_current
$00EB		_axis1_period_end
$00EF		_trace_axis
$0110		_axis2_period_warmup
$0114		_axis2_period_current
$0118		_axis2_period_end
$011C		_axis3_period_warmup
$0120		_axis3_period_current
$0124		_axis3_period_end
$0128		_task_done_msg
$0129		_task_running
$012A		lcd8bit_DataAddress
$012B		lcd8bit_CtrlAddress
$012C		_com
$012D		___DoICPSavePCLATH
$012E		___DoICPHiAddr
$012F		___DoICPLoAddr
$0130		_lcd_screen
$0131		_sum
$0135		_j
$0137		_b_i
$0139		_axis1_period_start
$013D		_axis2_period_start
$0141		_axis3_period_start
$0145		_PR2_setting
$0146		_comm_test
$0147		_t
$0149		_i
$014A		interrupt_axis1_job_over_L0
$014B		interrupt_axis2_job_over_L0
$014C		interrupt_axis3_job_over_L0
$014D		?saveFSR
$014E		?saveSTATUS
$014F		?savePCLATH
$0150		FARG_ValidChar+0
$0150		Usart_Read_tmp_L0
$0151		FARG_Usart_Init+0
$0155		Usart_Init_tmp_L0
$0156		FARG_Extract_Numeric_Argument+0
$0156		FARG_Lcd8_Init+0
$0156		FARG_Lcd8_Out+0
$0156		FARG_SendConstLine+0
$0156		FARG_str_starts_with+0
$0156		FARG_strcmp_c+0
$0156		FARG_strcp_c+0
$0156		FARG_strcpy+0
$0157		FARG_Lcd8_Init+1
$0157		FARG_Lcd8_Out+1
$0157		FARG_str_starts_with+1
$0157		FARG_strcmp_c+1
$0157		FARG_strcp_c+1
$0157		FARG_strcpy+1
$0158		FARG_Lcd8_Out+2
$0158		SendConstLine_t_L0
$0158		strcpy_cp_L0
$0159		Lcd8_Out_i_L0
$0159		str_starts_with_i_L0
$0159		strcmp_c_i_L0
$0159		strcp_c_i_L0
$015A		Lcd8_Out_j_L0
$015B		FARG_Lcd8_Chr_CP+0
$015B		FARG_Lcd8_Chr+0
$015B		FARG_Usart_Write+0
$015C		FARG_Lcd8_Chr+1
$015D		FARG_Lcd8_Chr+2
$015E		FARG_Lcd8_Cmd+0


